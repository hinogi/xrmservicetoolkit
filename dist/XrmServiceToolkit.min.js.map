{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///XrmServiceToolkit.min.js","webpack:///webpack/bootstrap fb5a5e18bd0403863ec3","webpack:///./src/Index.ts","webpack:///./src/Helper.ts","webpack:///./src/ParameterCheck.ts","webpack:///./src/Extension.ts","webpack:///./src/HelperRest.ts","webpack:///./src/HelperSoap.ts","webpack:///./src/Rest.ts","webpack:///./src/Soap.ts"],"names":["root","factory","exports","module","define","amd","XrmServiceToolkit","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Rest_1","Rest","Soap_1","Soap","Extension_1","Extension","alertMessage","message","undefined","Xrm","Utility","alertDialog","alert","guidsAreEqual","guid1","guid2","isEqual","replace","toLowerCase","context","oContext","window","GetGlobalContext","Page","parent","Error","getClientUrl","serverUrl","getServerUrl","match","substring","length","htmlEncode","s","buffer","hEncode","count","cnt","slength","charCodeAt","String","fromCharCode","innerSurrogateAmpersandWorkaround","c0","c1","toString","crmXmlEncode","crmXmlDecode","parameterCheck","parameter","stringParameterCheck","callbackParameterCheck","callbackParameter","booleanParameterCheck","Helper_1","JQueryXrmFieldTooltip","filename","bDisplayImg","registerHelp","entity","attr","txt","obj","jQuery","children","html","append","css","t","parseHelpXml","data","_this","getEntityName","entXml","each","find","text","ui","setFormNotification","errorMessage","support","cors","ajax","type","url","dataType","success","error","xmlHttpRequest","textStatus","errorThrown","JQueryXrmDependentOptionSet","filterDependentField","parentField","childField","jQueryXrmDependentOptionSet","depOptionSet","config","hasOwnProperty","dependentOptionSet","dependent","parent_1","attributes","get","child","parentControl","getControl","childControl","currentChildFieldValue","getValue","controls","ctrl","setValue","setSubmitMode","fireOnChange","setDisabled","os","options","optionsToShow","showOptions","value","clearOptions","option","addOption","bCurrentValueIsValid","childFieldOptions","validOptionIndex","optionDataValue","parseInt","getDisabled","init","configWr","parentFields","jsConfig","i","ilength","node","mapping","a","alength","b","blength","optionToShow","push","parent_2","JQueryXrmCustomFilterView","setCustomFilterView","target","entityName","viewName","fetchXml","layoutXml","viewId","addCustomView","xmlToString","responseXml","xmlString","XMLSerializer","xml","serializeToString","e","targetFields","dynamic","customFilterView","dynamicControlType","getControlType","fieldValueType","getAttribute","dynamicValue","getSelectionOption","name","operator","dynamicString","JQueryXrmFormatNotesControl","allowInsert","allowEdit","notescontrol","src","Object","defineProperty","oDataPath","errorHandler","req","status","statusText","JSON","parse","responseText","dateReviver","key","exec","Date","getXhr","XMLHttpRequest","ActiveXObject","performRequest","settings","ParameterCheck_1","request","open","async","setRequestHeader","action","onreadystatechange","readyState","send","padNumber","len","str","encodeDate","dateTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","encodeValue","slice","getTime","stringToDate","split","UTC","Number","nsResolver","prefix","ns","Map","isNodeNull","getNamedItem","selectNodes","xPathExpression","output","xPathResults","evaluate","XPathResult","ANY_TYPE","result","iterateNext","selectSingleNode","xpathExpr","xpe","XPathEvaluator","results","FIRST_ORDERED_NODE_TYPE","singleNodeValue","selectSingleNodeText","x","textContent","getNodeText","setSelectionNamespaces","doc","namespaces","setProperty","join","xmlParser","xmlDoc","loadXML","DOMParser","parser","parseFromString","isArray","input","constructor","indexOf","getError","resp","internalCallback","faultXml","responseXML","faultstring","errorCode","bodyNode","firstChild","childNodes","nodeName","j","testNode","k","orgServiceFault","l","errorCodeNode","doRequest","soapBody","requestType","soapXml","orgServicePath","responseType","fetchMore","fetchCoreXml","pageNumber","pageCookie","fetchResults","moreFetchXml","moreMsgBody","moreResultXml","newFetchResult","newMoreRecords","iii","nLength","businessEntity","deserialize","newPageCookie","joinArray","array","suffix","joinConditionPair","values","value1","valueIndex","isMetadataArray","elementName","arrayElements","getNodeName","baseName","localName","objectifyNode","nodeValue","nodeType","arrayValue","tempLength","objectTypeName","_type","xrmValue","sType","sValue","xrmEntityReference","gId","sLogicalName","sName","logicalName","xrmEntityCollection","items","xrmOptionSetValue","iValue","sFormattedValue","formattedValue","create","prototype","serialize","attributeName","attribute","encodedValue","encodedId","encodedLogicalName","collections","collectionLengh","item","openQuickCreate","oType","resultNode","resultNodes","lenj","sKey","parentNode","lenk","tempParentNode","tempParentNodeChildNodes","tempNode","subNode","entRef","entCv","entOsv","oChildNodes","leni","entityReferenceNode","partyNodes","y","leny","itemNodes","z","lenz","itemNodeChildNodes","nodeText","itemRef","partyListNodes","pi","lenpi","partyReferenceNode","parseFloat","foVal","o","leno","foNode","isNaN","HelperRest_1","Create","object","successCallback","errorCallback","d","stringify","Retrieve","select","expand","systemQueryOptions","selectString","Update","Delete","RetrieveMultiple","onComplete","optionsString","charAt","returned","__next","queryOptions","Associate","entityid1","odataSetName1","entityid2","odataSetName2","relationship","entity2","uri","jsonEntity","Disassociate","odataSetName","HelperSoap_1","be","callback","mBody","resultXml","Execute","Fetch","fetchCore","fetchAll","isAggregate","isLimitedReturn","distinctPos","isDistinct","valQuotes","distinctValue","fetchEntity","fetchCoreDom","fetchResult","moreRecords","ii","olength","columnSet","query","msgBody","retrieveResult","retriveMultipleResults","QueryByAttribute","orderBy","QueryAll","SetState","stateCode","statusCode","relationshipName","targetEntityName","targetId","relatedEntityName","relatedBusinessEntities","relatedEntities","relatedXml","GetCurrentUserId","GetCurrentUserBusinessUnitId","GetCurrentUserRoles","roles","IsCurrentUserInRole","jlength","arguments","Assign","assigneeEntityName","assigneeId","GrantAccess","accessOptions","targetEntityId","principalEntityName","principalEntityId","accessRights","accessRightString","ModifyAccess","RevokeAccess","revokeeEntityName","revokeeEntityId","RetrievePrincipalAccess","RetrieveAllEntitiesMetadata","entityFilters","retrieveIfPublished","entityFiltersString","templength","response","RetrieveEntityMetadata","RetrieveAttributeMetadata","entityLogicalName","attributeLogicalName"],"mappings":"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","file":"XrmServiceToolkit.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"XrmServiceToolkit\"] = factory();\n\telse\n\t\troot[\"XrmServiceToolkit\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"XrmServiceToolkit\"] = factory();\n\telse\n\t\troot[\"XrmServiceToolkit\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path=\"../typings/main.d.ts\" />\n\t\"use strict\";\n\t/**\n\t* MSCRM 2015, 2013, 2011 Web Service Toolkit for JavaScript\n\t* @author Jaimie Ji\n\t* @author David Berry\n\t* @current version : 2.2.1\n\t\n\t* Credits:\n\t*   The idea of this library was inspired by Daniel Cai's CrmWebServiceToolkit.\n\t*   The idea of BusinessEntity was inspired by Daniel Cai && Ascentium CrmService JavaScript Library.\n\t*   The REST Endpoint functions were inspired by MSCRM 2011 SDK JavaScript code and various resources from CRM websites and forums. Some of them were just copies with minor modification.\n\t*   The Soap functions were inspired by Daniel Cai && Jamie Miley && Paul Way && Customer Effective.\n\t*   Additional thanks to all contributors of MSCRM and i have learned a lot from you all.\n\t* Date: February, 2012\n\t*\n\t* Special Thanks:\n\t*   JetBrains ReSharper Open License\n\t* Date: July, 2012\n\t*\n\t* What's new:\n\t**********************************************************************************************************\n\t*   Version: 1.1\n\t*   Date: April, 2012\n\t*       Dependency: JSON2\n\t*       New Function - XrmServiceToolkit.Soap.Assign\n\t*       New Function - XrmServiceToolkit.Soap.GrantAccess\n\t*       New Function - XrmServiceToolkit.Soap.ModifyAccess\n\t*       New Function - XrmServiceToolkit.Soap.GrantAccess\n\t*       New Function - XrmServiceToolkit.Soap.RetrievePrincipalAccess\n\t**********************************************************************************************************\n\t*   Version: 1.2\n\t*   Date: April, 2012\n\t*       Dependency: JSON2\n\t*       New Fix - Fix soaps functions to create/update/retrieve activities with Party List fields.\n\t**********************************************************************************************************\n\t*   Version: 1.3\n\t*   Date: July, 2012\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       New Feature: cross browser support. jQuery Integration.\n\t*       New Extension: A new category of functions to extend some functions:\n\t*          1. JQueryXrmDependentOptionSet: Create Configurable Dependent Option Set to utilize CRM 2011 web resource.\n\t*          2. JQueryXrmFieldTooltip: Create configurable tooltip for fields on CRM 2011 form\n\t*          3. JQueryXrmCustomFilterView: Create configurable ability to add custom filter view to crm 2011 lookup field on the form\n\t*          4. JQueryXrmFormatNotesControl: Format the notes control to allow insert, allow edit\n\t**********************************************************************************************************\n\t*   Version: 1.3.1\n\t*   Date: November, 2012\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       New Feature - A change of logic to increase performance when returning large number of records\n\t*       New Function - XrmServiceToolkit.Soap.QueryAll: Return all available records by query options (>5k+)\n\t*       New Fix - XrmServiceToolkit.Rest.RetrieveMultiple not returning records more than 50\n\t*       New Fix - XrmServiceToolkit.Soap.Business error when referring number fields like (int, double, float)\n\t*       New Fix - XrmServiceToolkit.Soap not handling error message properly\n\t**********************************************************************************************************\n\t*   Version: 1.3.2\n\t*   Date: January, 2013\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       New Fix - XrmServiceToolkit.Soap cross browser support to initialize soap service\n\t**********************************************************************************************************\n\t*   Version: 1.4.0\n\t*   Date: January, 2013\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       Feature: Add Cross Browser Support for RU12\n\t*       Tested Platform: IE9, IE10, Chrome Version 24.0.1312.56 m, Firefox 18.0.1\n\t**********************************************************************************************************\n\t*   Version: 1.4.1\n\t*   Date: April, 2013\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       Tested Platform: IE9, IE10, Chrome Version 26.0.1410.64 m, Firefox 20.0.1\n\t*       Feature: Add Cross Browser Support for RU12, RU13\n\t*       New Fix - XrmServiceToolkit.Common.AddNotification method updated for RU12, RU13, still compatible for RU11 below\n\t*       New Fix - XrmServiceToolkit.Soap.Fetch method did not format linked record correctly\n\t*       New Fix - XrmServiceToolkit.Soap.Retrieve method did not return partylist data for activity\n\t*       New Fix - Added manual conversion from String to Date conversion for cross browser\n\t*       New Fix - getServerUrl method is updated as getClientUrl to align with RU12 SDK method getClientUrl(), still compatible to support RU11 below\n\t*       New Function - getServerUrl private method is updated as getClientUrl to align with RU12 SDK method getClientUrl(), still compatible to support RU11 below\n\t*       New Function - XrmServiceToolkit.Soap.RetrieveAllEntitiesMetadata method is a method to return all metadata for all entities by the specified entity filters\n\t*       New Function - XrmServiceToolkit.Soap.RetrieveEntityMetadata method is a method to return the metadata for a certain entity by the specified entity filters\n\t*       New Function - XrmServiceToolkit.Soap.RetrieveAttributeMetadata method is a method to return the metadata for a certain entity's attribute\n\t**********************************************************************************************************\n\t*   Version: 1.4.2 (beta)\n\t*   Date: May, 2013\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       Tested Platform: IE10\n\t*       New Fix - XrmServiceToolkit.Soap.Fetch now takes an additional parameter, 'fetchAll', that when set to true will retrieve all pages of results\n\t*       New Behaviour - XrmServiceToolkit.Soap.Fetch works best when providing a FetchXML string starting with the \"entity\" node, because of the way paging works;\n\t*           It will still function with the traditional \"fetch\" node to start, but then the XML has to be parsed to select just the \"entity\" node, which adds some overhead.\n\t*       New Behaviour - XrmServiceToolkit fetch and queryall methods use a unified model, and some redundant code has been removed.  This allows better paging operations.\n\t*\n\t**********************************************************************************************************\n\t*   Version: 2.0.0 (beta)\n\t*   Date: October, 2013\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       ---NOTE---Due to the changes for CRM 2013, please use the attached version of JSON2 and jQuery\n\t*       Tested Platform: IE10, latest Chrome, latest FireFox\n\t*    Changes:\n\t*       New Behaviour - XrmServiceTookit.Soap.Fetch parameters change to work with asynchronous callback compared to 1.4.2 beta: XrmServiceToolkit.Soap.Fetch(fetchXml, fetchAll, callback)\n\t*       New Behaviour - XrmServiceTookit.Soap.AddNotification is working with CRM 2013 using the out-of-box functionality. Still support CRM 2011\n\t*       New Fix - XrmServiceToolkit.Common.GetObjectCodeType is now using metadata retrieval as a supported method\n\t*       New Fix - The included jQuery has a line changed at the bottom <window.jQuery = jQuery;> $ is removed to work with CRM 2013 form\n\t*   Beta Release for CRM 2013\n\t**********************************************************************************************************\n\t*   Version: 2.0.1 (beta)\n\t*   Date: April, 2014\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       ---NOTE---Due to the changes for CRM 2013, please use the attached version of JSON2 and jQuery\n\t*       Tested Platform: IE11, IE10, latest Chrome, latest FireFox\n\t*    Changes:\n\t*       New Behaviour - XrmServiceTookit.Soap.Fetch method will allow 'page' and 'count' parameter to limit the returned records.\n\t*       New Fix - XrmServiceToolkit.Soap.Fetch fix an error when passing difference formats of Fetch XML with/without '<fetch>..' statements\n\t*       New Fix - XrmServiceToolkit.Extension methods error when retrieving web resources\n\t*   Beta Release for CRM 2013\n\t**********************************************************************************************************\n\t*   Version: 2.1\n\t*   Date: September, 2014\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       ---NOTE---Due to the changes for CRM 2013, please use the attached version of JSON2 and jQuery\n\t*       Tested Platform: IE11, IE10, latest Chrome, latest FireFox\n\t*    Changes:\n\t*       Performance Refactor\n\t*       New Fix - XrmServiceToolkit.Common.DisableAllControlsInTab to support CRM2013 changes\n\t*   Beta Release for CRM 2013\n\t**********************************************************************************************************\n\t*   Version: 2.2\n\t*   Date: April, 2015\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       ---NOTE---Due to the changes for CRM 2013, please use the attached version of JSON2 and jQuery\n\t*       Tested Platform: IE11, IE10, latest Chrome, latest FireFox\n\t*    Changes:\n\t*       CRM 2015 release\n\t*       New Fix - Error Handling\n\t*       New Fix - XrmServiceToolkit.Soap.Fetch aggregate fix\n\t*       New Fix - XrmServiceToolkit.Soap.Fetch distinct support\n\t*       New Fix - Aliased Values Handling\n\t*   Stable Release for CRM 2013, CRM 2015\n\t**********************************************************************************************************\n\t*   Version: 2.2.1\n\t*   Date: May, 2015\n\t*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n\t*       ---NOTE---Due to the changes for CRM 2013, please use the attached version of JSON2 and jQuery\n\t*       Tested Platform: IE11, IE10, latest Chrome, latest FireFox\n\t*    Changes:\n\t*       CRM 2015 7.1 release\n\t*       New Fix - Added logic for EntityReference in SOAP for 7.1 changes\n\t*   Beta Release for CRM 2015 online Update 1\n\t**********************************************************************************************************\n\t*/\n\tvar Rest_1 = __webpack_require__(6);\n\texports.Rest = Rest_1.default;\n\tvar Soap_1 = __webpack_require__(7);\n\texports.Soap = Soap_1.default;\n\tvar Extension_1 = __webpack_require__(3);\n\texports.Extension = Extension_1.default;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * Prompt an alert message\n\t *\n\t * @param {string} message Alert message text\n\t */\n\tfunction alertMessage(message) {\n\t    (Xrm.Utility !== undefined && Xrm.Utility.alertDialog !== undefined) ? Xrm.Utility.alertDialog(message) : alert(message);\n\t}\n\texports.alertMessage = alertMessage;\n\t/**\n\t * Check if two guids are equal\n\t *\n\t * @export\n\t * @param {string} guid1 A string represents a guid\n\t * @param {string} guid2 A string represents a guid\n\t * @returns {boolean}\n\t */\n\tfunction guidsAreEqual(guid1, guid2) {\n\t    var isEqual;\n\t    if (guid1 === null || guid2 === null || guid1 === undefined || guid2 === undefined) {\n\t        isEqual = false;\n\t    }\n\t    else {\n\t        isEqual = guid1.replace(/[{}]/g, \"\").toLowerCase() === guid2.replace(/[{}]/g, \"\").toLowerCase();\n\t    }\n\t    return isEqual;\n\t}\n\texports.guidsAreEqual = guidsAreEqual;\n\t/**\n\t * Private function to the context object.\n\t *\n\t * @export\n\t * @returns {Xrm.Context}\n\t */\n\tfunction context() {\n\t    var oContext;\n\t    if (typeof window.GetGlobalContext !== \"undefined\") {\n\t        oContext = window.GetGlobalContext();\n\t    }\n\t    else if (typeof GetGlobalContext !== \"undefined\") {\n\t        oContext = GetGlobalContext();\n\t    }\n\t    else {\n\t        if (typeof Xrm !== \"undefined\") {\n\t            oContext = Xrm.Page.context;\n\t        }\n\t        else if (typeof window.parent.Xrm !== \"undefined\") {\n\t            oContext = window.parent.Xrm.Page.context;\n\t        }\n\t        else {\n\t            throw new Error(\"Context is not available.\");\n\t        }\n\t    }\n\t    return oContext;\n\t}\n\texports.context = context;\n\t/**\n\t * Private function to return the server URL from the context\n\t *\n\t * @export\n\t * @returns {string} Url of the organization\n\t */\n\tfunction getClientUrl() {\n\t    var serverUrl = typeof context().getClientUrl !== \"undefined\" ? context().getClientUrl() : context().getServerUrl();\n\t    if (serverUrl.match(/\\/$/)) {\n\t        serverUrl = serverUrl.substring(0, serverUrl.length - 1);\n\t    }\n\t    return serverUrl;\n\t}\n\texports.getClientUrl = getClientUrl;\n\tfunction htmlEncode(s) {\n\t    var buffer = \"\";\n\t    var hEncode = \"\";\n\t    if (s === null || s === \"\" || s === undefined)\n\t        return s;\n\t    for (var count = 0, cnt = 0, slength = s.length; cnt < slength; cnt++) {\n\t        var c = s.charCodeAt(cnt);\n\t        if (c > 96 && c < 123 || c > 64 && c < 91 || c === 32 || c > 47 && c < 58 || c === 46 || c === 44 || c === 45 || c === 95) {\n\t            buffer += String.fromCharCode(c);\n\t        }\n\t        else {\n\t            buffer += \"&#\" + c + \";\";\n\t        }\n\t        if (++count === 500) {\n\t            hEncode += buffer;\n\t            buffer = \"\";\n\t            count = 0;\n\t        }\n\t    }\n\t    if (buffer.length)\n\t        hEncode += buffer;\n\t    return hEncode;\n\t}\n\texports.htmlEncode = htmlEncode;\n\tfunction innerSurrogateAmpersandWorkaround(s) {\n\t    var buffer = \"\";\n\t    var c0;\n\t    var cnt = 0;\n\t    var slength = s.length;\n\t    for (; cnt < slength; cnt++) {\n\t        c0 = s.charCodeAt(cnt);\n\t        if (c0 >= 55296 && c0 <= 57343) {\n\t            if (cnt + 1 < s.length) {\n\t                var c1 = s.charCodeAt(cnt + 1);\n\t                if (c1 >= 56320 && c1 <= 57343) {\n\t                    buffer += \"CRMEntityReferenceOpen\" + ((c0 - 55296) * 1024 + (c1 & 1023) + 65536).toString(16) + \"CRMEntityReferenceClose\";\n\t                    cnt++;\n\t                }\n\t                else {\n\t                    buffer += String.fromCharCode(c0);\n\t                }\n\t            }\n\t            else {\n\t                buffer += String.fromCharCode(c0);\n\t            }\n\t        }\n\t        else {\n\t            buffer += String.fromCharCode(c0);\n\t        }\n\t    }\n\t    s = buffer;\n\t    buffer = \"\";\n\t    for (cnt = 0, slength = s.length; cnt < slength; cnt++) {\n\t        c0 = s.charCodeAt(cnt);\n\t        if (c0 >= 55296 && c0 <= 57343) {\n\t            buffer += String.fromCharCode(65533);\n\t        }\n\t        else {\n\t            buffer += String.fromCharCode(c0);\n\t        }\n\t    }\n\t    s = buffer;\n\t    s = htmlEncode(s);\n\t    s = s.replace(/CRMEntityReferenceOpen/g, \"&#x\");\n\t    s = s.replace(/CRMEntityReferenceClose/g, \";\");\n\t    return s;\n\t}\n\texports.innerSurrogateAmpersandWorkaround = innerSurrogateAmpersandWorkaround;\n\tfunction crmXmlEncode(s) {\n\t    if (\"undefined\" === typeof s || \"unknown\" === typeof s || null === s) {\n\t        return s;\n\t    }\n\t    else if (typeof s !== \"string\") {\n\t        s = s.toString();\n\t    }\n\t    return innerSurrogateAmpersandWorkaround(s);\n\t}\n\texports.crmXmlEncode = crmXmlEncode;\n\tfunction crmXmlDecode(s) {\n\t    if (typeof s !== \"string\") {\n\t        s = s.toString();\n\t    }\n\t    return s;\n\t}\n\texports.crmXmlDecode = crmXmlDecode;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * Private function used to check whether required parameters are null or undefined\n\t *\n\t * @export\n\t * @param parameter The parameter to check\n\t * @param message The error message text to include when the error is thrown\n\t */\n\tfunction parameterCheck(parameter, message) {\n\t    if ((typeof parameter === \"undefined\") || parameter === null) {\n\t        throw new Error(message);\n\t    }\n\t}\n\texports.parameterCheck = parameterCheck;\n\t/**\n\t * Private function used to check whether required parameters are null or undefined\n\t *\n\t * @export\n\t * @param {*} parameter The string parameter to check\n\t * @param {string} message The error message text to include when the error is thrown\n\t */\n\tfunction stringParameterCheck(parameter, message) {\n\t    if (typeof parameter !== \"string\") {\n\t        throw new Error(message);\n\t    }\n\t}\n\texports.stringParameterCheck = stringParameterCheck;\n\t/**\n\t * Private function used to check whether required callback parameters are functions\n\t *\n\t * @export\n\t * @param {*} callbackParameter The callback parameter to check\n\t * @param {string} message The error message text to include when the error is thrown.\n\t */\n\tfunction callbackParameterCheck(callbackParameter, message) {\n\t    if (typeof callbackParameter !== \"function\") {\n\t        throw new Error(message);\n\t    }\n\t}\n\texports.callbackParameterCheck = callbackParameterCheck;\n\t/**\n\t * Private function used to check whether required parameters are null or undefined\n\t *\n\t * @export\n\t * @param {*} parameter The boolean parameter to check\n\t * @param {string} message The error message text to include when the error is thrown\n\t */\n\tfunction booleanParameterCheck(parameter, message) {\n\t    if (typeof parameter !== \"boolean\") {\n\t        throw new Error(message);\n\t    }\n\t}\n\texports.booleanParameterCheck = booleanParameterCheck;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../typings/main.d.ts\" />\n\tvar Helper_1 = __webpack_require__(1);\n\t// JQueryXrmFieldTooltip: jQueryXrmFieldTooltip,\n\t// JQueryXrmDependentOptionSet: jQueryXrmDependentOptionSet,\n\t// JQueryXrmCustomFilterView: jQueryXrmCustomFilterView,\n\t// JQueryXrmFormatNotesControl: jQueryXrmFormatNotesControl\n\tvar Extension = (function () {\n\t    function Extension() {\n\t    }\n\t    // jQuery Load Help function to add tooltip for attribute in CRM 2011. Unsupported because of the usage of DOM object edit.\n\t    //****************************************************\n\t    /**\n\t     * A generic configurable method to add tooltip to crm 2011 field.\n\t     *\n\t     * @param {string} filename A JavaScript String corresponding the name of the configuration web resource name in CRM 2011 instance\n\t     * @param {boolean} bDisplayImg A JavaScript boolean corresponding if display a help image for the tooltip\n\t     * @example\n\t     * JQueryLoadHelp('cm_xmlhelpfile', true);\n\t     */\n\t    Extension.JQueryXrmFieldTooltip = function (filename, bDisplayImg) {\n\t        /*\n\t        This function is used add tooltips to any field in CRM2011.\n\t\n\t        This function requires the following parameters:\n\t        filename :   name of the XML web resource\n\t        bDisplayImg: boolean to show/hide the help image (true/false)\n\t        Returns: nothing\n\t        Example:  jQueryLoadHelp('cm_xmlhelpfile', true);\n\t        Designed by: http://lambrite.com/?p=221\n\t        Adapted by Geron Profet (www.crmxpg.nl), Jaimie Ji\n\t        Modified by Jaimie Ji with jQuery and cross browser\n\t        */\n\t        if (Xrm.Page.ui.setFormNotification !== undefined) {\n\t            Helper_1.alertMessage(\"XrmServiceToolkit.Extension.JQueryXrmFieldTooltip is not supported in CRM2013.\\nPlease use the out of box functionality\");\n\t            return;\n\t        }\n\t        if (typeof jQuery === \"undefined\") {\n\t            var errorMessage = (\"jQuery is not loaded.\\nPlease ensure that jQuery is included\\n as web resource in the form load.\");\n\t            Helper_1.alertMessage(errorMessage);\n\t            return;\n\t        }\n\t        /**\n\t         * Appends a help tooltip to an attribute\n\t         *\n\t         * @param {string} entity Entityname\n\t         * @param {string} attr Attributename\n\t         * @param {string} txt Help description\n\t         */\n\t        function registerHelp(entity, attr, txt) {\n\t            var obj = jQuery(\"#\" + attr + \"_c\").children(\":first\");\n\t            if (obj != null) {\n\t                var html = \"\\n                    <img id=\\\"img_\" + attr + \"\\\" src=\\\"/_imgs/ico/16_help.gif\\\" alt=\\\"\" + txt + \"\\\" width=\\\"16\\\" height=\\\"16\\\" /><div id=\\\"help_\" + attr + \"\\\" style=\\\"visibility: hidden; position: absolute;\\\">: \" + txt + \"</div>\\n                \";\n\t                jQuery(obj).append(html);\n\t                // 20110909 GP: added line to hide/show help image\n\t                jQuery(\"#img_\" + attr).css(\"display\", (bDisplayImg) ? \"inline\" : \"none\");\n\t            }\n\t        }\n\t        // ****************************************************\n\t        function parseHelpXml(data) {\n\t            var _this = this;\n\t            var entity = Xrm.Page.data.entity.getEntityName().toString().toLowerCase();\n\t            var entXml = jQuery(\"entity[name=\" + entity + \"]\", data);\n\t            jQuery(entXml).children().each(function () {\n\t                var attr = jQuery(_this).attr(\"name\");\n\t                var txt = jQuery(_this).find(\"shorthelp\").text();\n\t                registerHelp(entity, attr, txt);\n\t            });\n\t        }\n\t        jQuery.support.cors = true;\n\t        jQuery.ajax({\n\t            type: \"GET\",\n\t            url: Helper_1.getClientUrl() + \"/WebResources/\" + filename,\n\t            dataType: \"xml\",\n\t            success: parseHelpXml,\n\t            // ReSharper disable UnusedParameter\n\t            error: function (xmlHttpRequest, textStatus, errorThrown) {\n\t                // ReSharper restore UnusedParameter\n\t                Helper_1.alertMessage(\"Something is wrong to setup the tooltip for the fields. Please contact your administrator\");\n\t            }\n\t        }); // end Ajax\n\t    };\n\t    // Generic Dependent Option Set Function. Changed from CRM 2011 SDK example\n\t    /**\n\t     * A generic configurable method to configure dependent optionset for CRM 2011 instance\n\t     *\n\t     * @param {string} filename A JavaScript String corresponding the name of the configuration web resource name in CRM 2011 instance\n\t     */\n\t    Extension.JQueryXrmDependentOptionSet = function (filename) {\n\t        if (typeof jQuery === \"undefined\") {\n\t            Helper_1.alertMessage(\"jQuery is not loaded.\\nPlease ensure that jQuery is included\\n as web resource in the form load.\");\n\t            return;\n\t        }\n\t        // This is the function set on the OnChange event for\n\t        // parent fields.\n\t        // ReSharper disable DuplicatingLocalDeclaration\n\t        function filterDependentField(parentField, childField, jQueryXrmDependentOptionSet) {\n\t            // ReSharper restore DuplicatingLocalDeclaration\n\t            for (var depOptionSet in this.JQueryXrmDependentOptionSet.config) {\n\t                if (this.JQueryXrmDependentOptionSet.config.hasOwnProperty(depOptionSet)) {\n\t                    var dependentOptionSet = this.JQueryXrmDependentOptionSet.config[depOptionSet];\n\t                    /* Match the parameters to the correct dependent optionset mapping*/\n\t                    if ((dependentOptionSet.parent === parentField) && (dependentOptionSet.dependent === childField)) {\n\t                        /* Get references to the related fields*/\n\t                        var parent_1 = Xrm.Page.data.entity.attributes.get(parentField);\n\t                        var child = Xrm.Page.data.entity.attributes.get(childField);\n\t                        var parentControl = Xrm.Page.getControl(parentField);\n\t                        var childControl = Xrm.Page.getControl(childField);\n\t                        /* Capture the current value of the child field*/\n\t                        var currentChildFieldValue = child.getValue();\n\t                        /* If the parent field is null the Child field can be set to null */\n\t                        var controls = void 0;\n\t                        var ctrl = void 0;\n\t                        if (parent_1.getValue() === null) {\n\t                            child.setValue(null);\n\t                            child.setSubmitMode(\"always\");\n\t                            child.fireOnChange();\n\t                            // Any attribute may have any number of controls,\n\t                            // so disable each instance.\n\t                            controls = child.controls.get();\n\t                            for (ctrl in controls) {\n\t                                if (controls.hasOwnProperty(ctrl)) {\n\t                                    controls[ctrl].setDisabled(true);\n\t                                }\n\t                            }\n\t                            return;\n\t                        }\n\t                        for (var os in dependentOptionSet.options) {\n\t                            if (dependentOptionSet.options.hasOwnProperty(os)) {\n\t                                var options = dependentOptionSet.options[os];\n\t                                var optionsToShow = options.showOptions;\n\t                                /* Find the Options that corresponds to the value of the parent field. */\n\t                                if (parent_1.getValue().toString() === options.value.toString()) {\n\t                                    controls = child.controls.get(); /*Enable the field and set the options*/\n\t                                    for (ctrl in controls) {\n\t                                        if (controls.hasOwnProperty(ctrl)) {\n\t                                            controls[ctrl].setDisabled(false);\n\t                                            controls[ctrl].clearOptions();\n\t                                            for (var option in optionsToShow) {\n\t                                                if (optionsToShow.hasOwnProperty(option)) {\n\t                                                    controls[ctrl].addOption(optionsToShow[option]);\n\t                                                }\n\t                                            }\n\t                                        }\n\t                                    }\n\t                                    /*Check whether the current value is valid*/\n\t                                    var bCurrentValueIsValid = false;\n\t                                    var childFieldOptions = optionsToShow;\n\t                                    for (var validOptionIndex in childFieldOptions) {\n\t                                        if (childFieldOptions.hasOwnProperty(validOptionIndex)) {\n\t                                            var optionDataValue = childFieldOptions[validOptionIndex].value;\n\t                                            if (currentChildFieldValue === parseInt(optionDataValue)) {\n\t                                                bCurrentValueIsValid = true;\n\t                                                break;\n\t                                            }\n\t                                        }\n\t                                    }\n\t                                    /*\n\t                            If the value is valid, set it.\n\t                            If not, set the child field to null\n\t                            */\n\t                                    if (bCurrentValueIsValid) {\n\t                                        child.setValue(currentChildFieldValue);\n\t                                    }\n\t                                    else {\n\t                                        child.setValue(null);\n\t                                    }\n\t                                    child.setSubmitMode(\"always\");\n\t                                    child.fireOnChange();\n\t                                    if (parentControl.getDisabled() === true) {\n\t                                        childControl.setDisabled(true);\n\t                                    }\n\t                                    break;\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        /**\n\t         * Initialize optionsets\n\t         *\n\t         * @param {*} data (description)\n\t         */\n\t        function init(data) {\n\t            var entity = Xrm.Page.data.entity.getEntityName().toString().toLowerCase();\n\t            var configWr = jQuery(\"entity[name=\" + entity + \"]\", data);\n\t            // Convert the XML Data into a JScript object.\n\t            var parentFields = configWr.children(\"ParentField\");\n\t            var jsConfig = [];\n\t            for (var i = 0, ilength = parentFields.length; i < ilength; i++) {\n\t                var node = parentFields[i];\n\t                var mapping = {};\n\t                mapping.parent = jQuery(node).attr(\"id\");\n\t                mapping.dependent = jQuery(node).children(\"DependentField:first\").attr(\"id\");\n\t                mapping.options = [];\n\t                var options = jQuery(node).children(\"Option\");\n\t                for (var a = 0, alength = options.length; a < alength; a++) {\n\t                    var option = {};\n\t                    option.value = jQuery(options[a]).attr(\"value\");\n\t                    option.showOptions = [];\n\t                    var optionsToShow = jQuery(options[a]).children(\"ShowOption\");\n\t                    for (var b = 0, blength = optionsToShow.length; b < blength; b++) {\n\t                        var optionToShow = {};\n\t                        optionToShow.value = jQuery(optionsToShow[b]).attr(\"value\");\n\t                        optionToShow.text = jQuery(optionsToShow[b]).attr(\"label\"); // Label is not used in the code.\n\t                        option.showOptions.push(optionToShow);\n\t                    }\n\t                    mapping.options.push(option);\n\t                }\n\t                jsConfig.push(mapping);\n\t            }\n\t            // Attach the configuration object to jQueryXrmDependentOptionSet\n\t            // so it will be available for the OnChange events.\n\t            this.JQueryXrmDependentOptionSet.config = jsConfig;\n\t            // Fire the OnChange event for the mapped optionset fields\n\t            // so that the dependent fields are filtered for the current values.\n\t            for (var depOptionSet in this.JQueryXrmDependentOptionSet.config) {\n\t                if (this.JQueryXrmDependentOptionSet.config.hasOwnProperty(depOptionSet)) {\n\t                    var parent_2 = this.JQueryXrmDependentOptionSet.config[depOptionSet].parent;\n\t                    var child = this.JQueryXrmDependentOptionSet.config[depOptionSet].dependent;\n\t                    filterDependentField(parent_2, child, this.JQueryXrmDependentOptionSet);\n\t                }\n\t            }\n\t        }\n\t        jQuery.support.cors = true;\n\t        jQuery.ajax({\n\t            type: \"GET\",\n\t            url: Helper_1.getClientUrl() + \"/WebResources/\" + filename,\n\t            dataType: \"xml\",\n\t            success: init,\n\t            // ReSharper disable UnusedParameter\n\t            error: function (xmlHttpRequest, textStatus, errorThrown) {\n\t                // ReSharper restore UnusedParameter\n\t                Helper_1.alertMessage(\"Something is wrong to setup the dependent picklist. Please contact your administrator\");\n\t            }\n\t        }); // end Ajax\n\t    };\n\t    ;\n\t    /**\n\t     * (A generic configurable method to add custom filter view to lookup field in crm 2011 instance\n\t     *\n\t     * @param {string} filename A JavaScript String corresponding the name of the configuration web resource name in CRM 2011 instance\n\t     */\n\t    Extension.JQueryXrmCustomFilterView = function (filename) {\n\t        if (typeof jQuery === \"undefined\") {\n\t            Helper_1.alertMessage(\"jQuery is not loaded.\\nPlease ensure that jQuery is included\\n as web resource in the form load.\");\n\t            return;\n\t        }\n\t        function setCustomFilterView(target, entityName, viewName, fetchXml, layoutXml) {\n\t            // use randomly generated GUID Id for our new view\n\t            var viewId = \"{1DFB2B35-B07C-44D1-868D-258DEEAB88E2}\";\n\t            // add the Custom View to the indicated [lookupFieldName] Control\n\t            Xrm.Page.getControl(target).addCustomView(viewId, entityName, viewName, fetchXml, layoutXml, true);\n\t        }\n\t        function xmlToString(responseXml) {\n\t            var xmlString = \"\";\n\t            try {\n\t                if (responseXml != null) {\n\t                    if (typeof XMLSerializer !== \"undefined\" && typeof responseXml.xml === \"undefined\") {\n\t                        // ReSharper disable InconsistentNaming\n\t                        xmlString = (new XMLSerializer()).serializeToString(responseXml);\n\t                    }\n\t                    else {\n\t                        if (typeof responseXml.xml !== \"undefined\") {\n\t                            xmlString = responseXml.xml;\n\t                        }\n\t                        else if (typeof responseXml[0].xml !== \"undefined\") {\n\t                            xmlString = responseXml[0].xml;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            catch (e) {\n\t                Helper_1.alertMessage(\"Cannot convert the XML to a string.\");\n\t            }\n\t            return xmlString;\n\t        }\n\t        function init(data) {\n\t            var entity = Xrm.Page.data.entity.getEntityName().toString().toLowerCase();\n\t            var configWr = jQuery(\"entity[name=\" + entity + \"]\", data);\n\t            // Convert the XML Data into a JScript object.\n\t            var targetFields = configWr.children(\"TargetField\");\n\t            var jsConfig = [];\n\t            for (var i = 0, ilength = targetFields.length; i < ilength; i++) {\n\t                var node = targetFields[i];\n\t                var mapping = {};\n\t                mapping.target = jQuery(node).attr(\"id\");\n\t                mapping.entityName = jQuery(node).attr(\"viewentity\");\n\t                mapping.viewName = jQuery(node).attr(\"viewname\");\n\t                mapping.dynamic = jQuery(node).children(\"dynamic\").children();\n\t                mapping.fetchXml = xmlToString(jQuery(node).children(\"fetch\"));\n\t                mapping.layoutXml = xmlToString(jQuery(node).children(\"grid\"));\n\t                jsConfig.push(mapping);\n\t            }\n\t            // Attach the configuration object to JQueryCustomFilterView\n\t            // so it will be available for the OnChange events.\n\t            this.JQueryXrmCustomFilterView.config = jsConfig;\n\t            // Fire the OnChange event for the mapped fields\n\t            // so that the lookup dialog are changed with the filtered view for the current values.\n\t            for (var customFilterView in this.JQueryXrmCustomFilterView.config) {\n\t                if (this.JQueryXrmCustomFilterView.config.hasOwnProperty(customFilterView)) {\n\t                    var target = this.JQueryXrmCustomFilterView.config[customFilterView].target;\n\t                    var entityName = this.JQueryXrmCustomFilterView.config[customFilterView].entityName;\n\t                    var viewName = this.JQueryXrmCustomFilterView.config[customFilterView].viewName;\n\t                    var dynamic = this.JQueryXrmCustomFilterView.config[customFilterView].dynamic;\n\t                    var fetchXml = this.JQueryXrmCustomFilterView.config[customFilterView].fetchXml;\n\t                    var layoutXml = this.JQueryXrmCustomFilterView.config[customFilterView].layoutXml;\n\t                    // TODO: Adding logics for various field and conditions. More tests required.\n\t                    if (dynamic != null) {\n\t                        for (var a = 0, alength = dynamic.length; a < alength; a++) {\n\t                            var dynamicControlType = Xrm.Page.getControl(jQuery(dynamic).attr(\"name\")).getControlType();\n\t                            var fieldValueType = jQuery(dynamic).attr(\"fieldvaluetype\"); // for optionset, name might be used to filter\n\t                            if (Xrm.Page.getAttribute(jQuery(dynamic).attr(\"name\")).getValue() === null) {\n\t                                Helper_1.alertMessage(jQuery(dynamic).attr(\"name\") + \" does not have a value. Please put validation logic on the field change to call this function. Only use XrmServiceToolkit.Extension.JQueryXrmCustomFilterView when the field has a value.\");\n\t                                return;\n\t                            }\n\t                            var dynamicValue = null;\n\t                            switch (dynamicControlType) {\n\t                                case \"standard\":\n\t                                    dynamicValue = Xrm.Page.getAttribute(jQuery(dynamic).attr(\"name\")).getValue();\n\t                                    break;\n\t                                case \"optionset\":\n\t                                    dynamicValue = (fieldValueType != null && fieldValueType === \"label\") ? Xrm.Page.getAttribute(jQuery(dynamic).attr(\"name\")).getSelectionOption().text : Xrm.Page.getAttribute(jQuery(dynamic).attr(\"name\")).getValue();\n\t                                    break;\n\t                                case \"lookup\":\n\t                                    dynamicValue = (fieldValueType != null && fieldValueType === \"name\") ? Xrm.Page.getAttribute(jQuery(dynamic).attr(\"name\")).getValue()[0].name : Xrm.Page.getAttribute(jQuery(dynamic).attr(\"name\")).getValue()[0].id;\n\t                                    break;\n\t                                default:\n\t                                    Helper_1.alertMessage(jQuery(dynamic).attr(\"name\") + \" is not supported for filter lookup view. Please change the configuration.\");\n\t                                    break;\n\t                            }\n\t                            var operator = jQuery(dynamic).attr(\"operator\");\n\t                            if (operator === null) {\n\t                                Helper_1.alertMessage(\"operator is missing in the configuration file. Please fix the issue\");\n\t                                return;\n\t                            }\n\t                            var dynamicString = jQuery(dynamic).attr(\"fetchnote\");\n\t                            switch (operator.toLowerCase()) {\n\t                                case \"contains\":\n\t                                case \"does not contain\":\n\t                                    dynamicValue = \"%\" + dynamicValue + \"%\";\n\t                                    break;\n\t                                case \"begins with\":\n\t                                case \"does not begin with\":\n\t                                    dynamicValue = dynamicValue + \"%\";\n\t                                    break;\n\t                                case \"ends with\":\n\t                                case \"does not end with\":\n\t                                    dynamicValue = \"%\" + dynamicValue;\n\t                                    break;\n\t                                default:\n\t                                    break;\n\t                            }\n\t                            fetchXml = fetchXml.replace(dynamicString, dynamicValue);\n\t                        }\n\t                    }\n\t                    // replace the values if required\n\t                    setCustomFilterView(target, entityName, viewName, fetchXml, layoutXml);\n\t                }\n\t            }\n\t        }\n\t        jQuery.support.cors = true;\n\t        jQuery.ajax({\n\t            type: \"GET\",\n\t            url: Helper_1.getClientUrl() + \"/WebResources/\" + filename,\n\t            dataType: \"xml\",\n\t            success: init,\n\t            // ReSharper disable UnusedParameter\n\t            error: function (xmlHttpRequest, textStatus, errorThrown) {\n\t                // ReSharper restore UnusedParameter\n\t                Helper_1.alertMessage(\"Something is wrong to setup the custom filter view. Please contact your administrator\");\n\t            }\n\t        }); // end Ajax\n\t    };\n\t    ;\n\t    // Disable or Enable to insert/edit note for entity. Unsupported because of DOM object edit\n\t    /**\n\t     * A generic configurable method to format the note control in crm 2011 instance\n\t     *\n\t     * @param {boolean} allowInsert A JavaScript boolean to format if the note control allow insert\n\t     * @param {boolean} allowEdit A JavaScript boolean to format if the note control allow edit\n\t     */\n\t    Extension.JQueryXrmFormatNotesControl = function (allowInsert, allowEdit) {\n\t        if (Xrm.Page.ui.setFormNotification !== undefined) {\n\t            Helper_1.alertMessage(\"XrmServiceToolkit.Extension.JQueryXrmFormatNotesControl is not supported in CRM2013\");\n\t            return;\n\t        }\n\t        if (typeof jQuery === \"undefined\") {\n\t            Helper_1.alertMessage(\"jQuery is not loaded.\\nPlease ensure that jQuery is included\\n as web resource in the form load.\");\n\t            return;\n\t        }\n\t        jQuery.support.cors = true;\n\t        var notescontrol = jQuery(\"#notescontrol\");\n\t        if (notescontrol === null || notescontrol === undefined)\n\t            return;\n\t        var url = notescontrol.attr(\"url\");\n\t        if (url != null) {\n\t            if (!allowInsert) {\n\t                url = url.replace(\"EnableInsert=true\", \"EnableInsert=false\");\n\t            }\n\t            else if (!allowEdit) {\n\t                url = url.replace(\"EnableInlineEdit=true\", \"EnableInlineEdit=false\");\n\t            }\n\t            notescontrol.attr(\"url\", url);\n\t        }\n\t        else {\n\t            var src = notescontrol.attr(\"src\");\n\t            if (src != null) {\n\t                if (!allowInsert) {\n\t                    src = src.replace(\"EnableInsert=true\", \"EnableInsert=false\");\n\t                }\n\t                else if (!allowEdit) {\n\t                    src = src.replace(\"EnableInlineEdit=true\", \"EnableInlineEdit=false\");\n\t                }\n\t                notescontrol.attr(\"src\", src);\n\t            }\n\t        }\n\t    };\n\t    return Extension;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Extension;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Helper_1 = __webpack_require__(1);\n\tvar ParameterCheck_1 = __webpack_require__(2);\n\t/**\n\t * Private function to return the path to the REST endpoint.\n\t *\n\t * @export\n\t * @returns String of the OrganizationData Service\n\t */\n\tfunction oDataPath() {\n\t    return Helper_1.getClientUrl() + \"/XRMServices/2011/OrganizationData.svc/\";\n\t}\n\texports.oDataPath = oDataPath;\n\t/**\n\t * Private function return an Error object to the errorCallback\n\t *\n\t * @export\n\t * @param {XMLHttpRequest} req The XMLHttpRequest response that returned an error.\n\t */\n\tfunction errorHandler(req) {\n\t    throw new Error(\"Error : \" +\n\t        req.status + \": \" +\n\t        req.statusText + \": \" +\n\t        JSON.parse(req.responseText).error.message.value);\n\t}\n\texports.errorHandler = errorHandler;\n\t/**\n\t * Private function to convert matching string values to Date objects.\n\t *\n\t * @export\n\t * @param {string} key The key used to identify the object property\n\t * @param {string} value The string value representing a date\n\t * @returns {(string | Date)}\n\t */\n\tfunction dateReviver(key, value) {\n\t    var a;\n\t    if (typeof value === \"string\") {\n\t        a = /Date\\(([-+]?\\d+)\\)/.exec(value);\n\t        if (a) {\n\t            return new Date(parseInt(value.replace(\"/Date(\", \"\").replace(\")/\", \"\"), 10));\n\t        }\n\t    }\n\t    return value;\n\t}\n\texports.dateReviver = dateReviver;\n\t/**\n\t * Get an instance of XMLHttpRequest for all browsers\n\t *\n\t * @export\n\t * @returns (description)\n\t */\n\tfunction getXhr() {\n\t    if (XMLHttpRequest) {\n\t        // Chrome, Firefox, IE7+, Opera, Safari\n\t        // ReSharper disable InconsistentNaming\n\t        return new XMLHttpRequest();\n\t    }\n\t    // IE6\n\t    try {\n\t        // The latest stable version. It has the best security, performance,\n\t        // reliability, and W3C conformance. Ships with Vista, and available\n\t        // with other OS's via downloads and updates.\n\t        return new ActiveXObject(\"MSXML2.XMLHTTP.6.0\");\n\t    }\n\t    catch (e) {\n\t        try {\n\t            // The fallback.\n\t            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n\t        }\n\t        catch (e) {\n\t            Helper_1.alertMessage(\"This browser is not AJAX enabled.\");\n\t            return null;\n\t        }\n\t    }\n\t}\n\texports.getXhr = getXhr;\n\t/**\n\t * Perform request with settings\n\t *\n\t * @export\n\t * @param {*} settings Settings for the request\n\t */\n\tfunction performRequest(settings) {\n\t    ParameterCheck_1.parameterCheck(settings, \"The value passed to the performRequest function settings parameter is null or undefined.\");\n\t    var request = getXhr();\n\t    request.open(settings.type, settings.url, settings.async);\n\t    request.setRequestHeader(\"Accept\", \"application/json\");\n\t    if (settings.action != null) {\n\t        request.setRequestHeader(\"X-HTTP-Method\", settings.action);\n\t    }\n\t    request.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t    if (settings.async) {\n\t        request.onreadystatechange = function () {\n\t            if (request.readyState === 4 /*Complete*/) {\n\t                // Status 201 is for create, status 204/1223 for link and delete.\n\t                // There appears to be an issue where IE maps the 204 status to 1223\n\t                // when no content is returned.\n\t                if (request.status === 204 || request.status === 1223 || request.status === 201) {\n\t                    settings.success(request);\n\t                }\n\t                else {\n\t                    // Failure\n\t                    if (settings.error) {\n\t                        settings.error(errorHandler(request));\n\t                    }\n\t                    else {\n\t                        errorHandler(request);\n\t                    }\n\t                }\n\t            }\n\t        };\n\t        if (typeof settings.data === \"undefined\") {\n\t            request.send();\n\t        }\n\t        else {\n\t            request.send(settings.data);\n\t        }\n\t    }\n\t    else {\n\t        if (typeof settings.data === \"undefined\") {\n\t            request.send();\n\t        }\n\t        else {\n\t            request.send(settings.data);\n\t        }\n\t        if (request.status === 204 || request.status === 1223 || request.status === 201) {\n\t            settings.success(request);\n\t        }\n\t        else {\n\t            // Failure\n\t            if (settings.error) {\n\t                settings.error(errorHandler(request));\n\t            }\n\t            else {\n\t                errorHandler(request);\n\t            }\n\t        }\n\t    }\n\t}\n\texports.performRequest = performRequest;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path=\"../typings/main.d.ts\" />\n\t\"use strict\";\n\tvar Helper_1 = __webpack_require__(1);\n\tfunction padNumber(s, len) {\n\t    len = len || 2;\n\t    var str = s.toString();\n\t    while (str.length < len) {\n\t        str = \"0\" + str;\n\t    }\n\t    return str;\n\t}\n\texports.padNumber = padNumber;\n\tfunction encodeDate(dateTime) {\n\t    return dateTime.getFullYear() + \"-\" +\n\t        padNumber(dateTime.getMonth() + 1) + \"-\" +\n\t        padNumber(dateTime.getDate()) + \"T\" +\n\t        padNumber(dateTime.getHours()) + \":\" +\n\t        padNumber(dateTime.getMinutes()) + \":\" +\n\t        padNumber(dateTime.getSeconds());\n\t}\n\texports.encodeDate = encodeDate;\n\tfunction encodeValue(value) {\n\t    // Handle GUIDs wrapped in braces\n\t    if (typeof value == typeof \"\" && value.slice(0, 1) === \"{\" && value.slice(-1) === \"}\") {\n\t        value = value.slice(1, -1);\n\t    }\n\t    // ReSharper disable QualifiedExpressionMaybeNull\n\t    return (typeof value === \"object\" && value.getTime)\n\t        ? encodeDate(value)\n\t        : Helper_1.crmXmlEncode(value);\n\t}\n\texports.encodeValue = encodeValue;\n\tvar xrmValue = (function () {\n\t    function xrmValue(sType, sValue) {\n\t        this.type = sType;\n\t        this.value = sValue;\n\t    }\n\t    return xrmValue;\n\t}());\n\texports.xrmValue = xrmValue;\n\tvar xrmEntityReference = (function () {\n\t    function xrmEntityReference(gId, sLogicalName, sName) {\n\t        this.id = gId;\n\t        this.logicalName = sLogicalName;\n\t        this.name = sName;\n\t        this.type = 'EntityReference';\n\t    }\n\t    return xrmEntityReference;\n\t}());\n\texports.xrmEntityReference = xrmEntityReference;\n\tvar xrmEntityCollection = (function () {\n\t    function xrmEntityCollection(items) {\n\t        this.value = items;\n\t        this.type = 'EntityCollection';\n\t    }\n\t    return xrmEntityCollection;\n\t}());\n\texports.xrmEntityCollection = xrmEntityCollection;\n\tvar xrmOptionSetValue = (function () {\n\t    function xrmOptionSetValue(iValue, sFormattedValue) {\n\t        this.value = iValue;\n\t        this.formattedValue = sFormattedValue;\n\t        this.type = \"OptionSetValue\";\n\t    }\n\t    return xrmOptionSetValue;\n\t}());\n\texports.xrmOptionSetValue = xrmOptionSetValue;\n\t/**\n\t * A object represents a business entity for CRM 2011\n\t *\n\t * @export\n\t * @param {string} logicalName A String represents the name of the entity.\n\t * For example, \"contact\" means the business entity will be a contact entity\n\t * @param {string} id A String represents the id of the entity. If not passed, it will be auto populated as a empty guid string\n\t */\n\tvar businessEntity = (function () {\n\t    function businessEntity(logicalName, id) {\n\t        this.id = (!id) ? \"00000000-0000-0000-0000-000000000000\" : id;\n\t        this.logicalName = logicalName;\n\t        this.attributes = Object.create(null);\n\t    }\n\t    /**\n\t    * Serialize a CRM Business Entity object to XML string in order to be passed to CRM Web Services.\n\t    * @return {String} The serialized XML string of CRM entity.\n\t    */\n\t    businessEntity.prototype.serialize = function () {\n\t        var xml = [\"<b:value i:type='a:Entity'>\"];\n\t        xml.push('<a:Attributes xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">');\n\t        var attributes = this.attributes;\n\t        for (var attributeName in attributes) {\n\t            if (attributes.hasOwnProperty(attributeName)) {\n\t                var attribute = attributes[attributeName];\n\t                xml.push(\"<a:KeyValuePairOfstringanyType>\");\n\t                xml.push(\"<b:key>\", attributeName, \"</b:key>\");\n\t                if (attribute === null || attribute.value === null) {\n\t                    xml.push(\"<b:value i:nil='true' />\");\n\t                }\n\t                else {\n\t                    var sType = (!attribute.type)\n\t                        ? typeof attribute\n\t                        : Helper_1.crmXmlEncode(attribute.type);\n\t                    var value = void 0;\n\t                    var encodedValue = void 0;\n\t                    var id = void 0;\n\t                    var encodedId = void 0;\n\t                    var logicalName = void 0;\n\t                    var encodedLogicalName = void 0;\n\t                    switch (sType) {\n\t                        case \"OptionSetValue\":\n\t                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n\t                            encodedValue = encodeValue(value);\n\t                            xml.push(\"<b:value i:type='a:OptionSetValue'>\");\n\t                            xml.push(\"<a:Value>\", encodedValue, \"</a:Value>\", \"</b:value>\");\n\t                            break;\n\t                        case \"EntityCollection\":\n\t                            xml.push(\"<b:value i:type='a:EntityCollection'>\");\n\t                            xml.push(\"<a:Entities>\");\n\t                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n\t                            var collections = isArray(value) ? value : [value];\n\t                            for (var i = 0, collectionLengh = collections.length; i < collectionLengh; i++) {\n\t                                var item = collections[i];\n\t                                id = (item.hasOwnProperty(\"id\")) ? item[\"id\"] : item;\n\t                                encodedId = encodeValue(id);\n\t                                logicalName = (item.hasOwnProperty(\"logicalName\")) ? item[\"logicalName\"] : item;\n\t                                encodedLogicalName = encodeValue(logicalName);\n\t                                xml.push(\"<a:Entity>\");\n\t                                xml.push(\"<a:Attributes>\");\n\t                                xml.push(\"<a:KeyValuePairOfstringanyType>\");\n\t                                xml.push(\"<b:key>partyid</b:key>\");\n\t                                xml.push(\"<b:value i:type='a:EntityReference'>\");\n\t                                xml.push(\"<a:Id>\", encodedId, \"</a:Id>\");\n\t                                if (Xrm.Utility.openQuickCreate !== undefined) {\n\t                                    xml.push(\"<a:KeyAttributes xmlns:c='http://schemas.microsoft.com/xrm/7.1/Contracts' />\");\n\t                                }\n\t                                xml.push(\"<a:LogicalName>\", encodedLogicalName, \"</a:LogicalName>\");\n\t                                xml.push(\"<a:Name i:nil='true' />\");\n\t                                if (Xrm.Utility.openQuickCreate !== undefined) {\n\t                                    xml.push(\"<a:RowVersion i:nil='true' />\");\n\t                                }\n\t                                xml.push(\"</b:value>\");\n\t                                xml.push(\"</a:KeyValuePairOfstringanyType>\");\n\t                                xml.push(\"</a:Attributes>\");\n\t                                xml.push(\"<a:EntityState i:nil='true' />\");\n\t                                xml.push(\"<a:FormattedValues />\");\n\t                                xml.push(\"<a:Id>00000000-0000-0000-0000-000000000000</a:Id>\");\n\t                                xml.push(\"<a:LogicalName>activityparty</a:LogicalName>\");\n\t                                xml.push(\"<a:RelatedEntities />\");\n\t                                xml.push(\"</a:Entity>\");\n\t                            }\n\t                            xml.push(\"</a:Entities>\");\n\t                            xml.push(\"<a:EntityName i:nil='true' />\");\n\t                            xml.push(\"<a:MinActiveRowVersion i:nil='true' />\");\n\t                            xml.push(\"<a:MoreRecords>false</a:MoreRecords>\");\n\t                            xml.push(\"<a:PagingCookie i:nil='true' />\");\n\t                            xml.push(\"<a:TotalRecordCount>0</a:TotalRecordCount>\");\n\t                            xml.push(\"<a:TotalRecordCountLimitExceeded>false</a:TotalRecordCountLimitExceeded>\");\n\t                            xml.push(\"</b:value>\");\n\t                            break;\n\t                        case \"EntityReference\":\n\t                            id = (attribute.hasOwnProperty(\"id\")) ? attribute[\"id\"] : attribute;\n\t                            encodedId = encodeValue(id);\n\t                            logicalName = (attribute.hasOwnProperty(\"logicalName\")) ? attribute[\"logicalName\"] : attribute;\n\t                            encodedLogicalName = encodeValue(logicalName);\n\t                            xml.push(\"<b:value i:type='a:EntityReference'>\");\n\t                            xml.push(\"<a:Id>\", encodedId, \"</a:Id>\");\n\t                            if (Xrm.Utility.openQuickCreate !== undefined) {\n\t                                xml.push(\"<a:KeyAttributes xmlns:c='http://schemas.microsoft.com/xrm/7.1/Contracts' />\");\n\t                            }\n\t                            xml.push(\"<a:LogicalName>\", encodedLogicalName, \"</a:LogicalName>\");\n\t                            xml.push(\"<a:Name i:nil='true' />\");\n\t                            if (Xrm.Utility.openQuickCreate !== undefined) {\n\t                                xml.push(\"<a:RowVersion i:nil='true' />\");\n\t                            }\n\t                            xml.push(\"</b:value>\");\n\t                            break;\n\t                        case \"Money\":\n\t                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n\t                            encodedValue = encodeValue(value);\n\t                            xml.push(\"<b:value i:type='a:Money'>\");\n\t                            xml.push(\"<a:Value>\", encodedValue, \"</a:Value>\", \"</b:value>\");\n\t                            break;\n\t                        case \"guid\":\n\t                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n\t                            encodedValue = encodeValue(value);\n\t                            xml.push(\"<b:value i:type='c:guid' xmlns:c='http://schemas.microsoft.com/2003/10/Serialization/'>\");\n\t                            xml.push(encodedValue, \"</b:value>\");\n\t                            break;\n\t                        case \"number\":\n\t                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n\t                            encodedValue = encodeValue(value);\n\t                            var oType = (parseInt(encodedValue) === encodedValue) ? \"c:int\" : \"c:decimal\";\n\t                            xml.push(\"<b:value i:type='\", oType, \"' xmlns:c='http://www.w3.org/2001/XMLSchema'>\");\n\t                            xml.push(encodedValue, '</b:value>');\n\t                            break;\n\t                        default:\n\t                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n\t                            encodedValue = encodeValue(value);\n\t                            sType = (typeof value === \"object\" && value.getTime) ? \"dateTime\" : sType;\n\t                            xml.push(\"<b:value i:type='c:\", sType, \"' xmlns:c='http://www.w3.org/2001/XMLSchema'>\", encodedValue, \"</b:value>\");\n\t                            break;\n\t                    }\n\t                }\n\t                xml.push(\"</a:KeyValuePairOfstringanyType>\");\n\t            }\n\t        }\n\t        xml.push(\"</a:Attributes><a:EntityState i:nil='true' />\");\n\t        xml.push(\"<a:FormattedValues xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic' />\");\n\t        xml.push(\"<a:Id>\", encodeValue(this.id), \"</a:Id>\");\n\t        xml.push(\"<a:LogicalName>\", this.logicalName, \"</a:LogicalName>\");\n\t        xml.push(\"<a:RelatedEntities xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic' />\");\n\t        xml.push(\"</b:value>\");\n\t        return xml.join(\"\");\n\t    };\n\t    /**\n\t    * Deserialize an XML node into a CRM Business Entity object. The XML node comes from CRM Web Service's response.\n\t    * @param {object} resultNode The XML node returned from CRM Web Service's Fetch, Retrieve, RetrieveMultiple messages.\n\t    */\n\t    businessEntity.prototype.deserialize = function (resultNode) {\n\t        var obj = Object.create(null);\n\t        var resultNodes = resultNode.childNodes;\n\t        for (var j = 0, lenj = resultNodes.length; j < lenj; j++) {\n\t            var sKey = void 0;\n\t            var parentNode = resultNodes[j];\n\t            switch (parentNode.nodeName) {\n\t                case \"a:Attributes\":\n\t                    var attr = parentNode;\n\t                    for (var k = 0, lenk = attr.childNodes.length; k < lenk; k++) {\n\t                        var tempParentNode = attr.childNodes[k];\n\t                        // Establish the Key for the Attribute\n\t                        var tempParentNodeChildNodes = tempParentNode.childNodes;\n\t                        sKey = getNodeText(tempParentNodeChildNodes[0]);\n\t                        var tempNode = tempParentNodeChildNodes[1];\n\t                        // Determine the Type of Attribute value we should expect\n\t                        var sType = tempNode.attributes.getNamedItem(\"i:type\").value;\n\t                        // check for AliasedValue\n\t                        if (sType.replace('c:', '').replace('a:', '') === \"AliasedValue\") {\n\t                            // reset the type to the actual attribute type\n\t                            var subNode = tempNode.childNodes[2];\n\t                            sType = subNode.attributes.getNamedItem(\"i:type\").value;\n\t                            //sKey = getNodeText(tempNode.childNodes[1]) + \".\" + getNodeText(tempNode.childNodes[0]);\n\t                            // reset the node to the AliasedValue value node\n\t                            tempNode = subNode;\n\t                        }\n\t                        var entRef = void 0;\n\t                        var entCv = void 0;\n\t                        switch (sType) {\n\t                            case \"a:OptionSetValue\":\n\t                                var entOsv = new xrmOptionSetValue();\n\t                                entOsv.type = sType.replace('a:', '');\n\t                                entOsv.value = parseInt(getNodeText(tempNode));\n\t                                obj[sKey] = entOsv;\n\t                                break;\n\t                            case \"a:EntityReference\":\n\t                                entRef = new xrmEntityReference();\n\t                                entRef.type = sType.replace('a:', '');\n\t                                var oChildNodes = tempNode.childNodes;\n\t                                for (var i = 0, leni = oChildNodes.length; i < leni; i++) {\n\t                                    var entityReferenceNode = oChildNodes[i];\n\t                                    switch (entityReferenceNode.nodeName) {\n\t                                        case \"a:Id\":\n\t                                            entRef.id = getNodeText(entityReferenceNode);\n\t                                            break;\n\t                                        case \"a:LogicalName\":\n\t                                            entRef.logicalName = getNodeText(entityReferenceNode);\n\t                                            break;\n\t                                        case \"a:Name\":\n\t                                            entRef.name = getNodeText(entityReferenceNode);\n\t                                            break;\n\t                                    }\n\t                                }\n\t                                obj[sKey] = entRef;\n\t                                break;\n\t                            case \"a:EntityCollection\":\n\t                                entRef = new xrmEntityCollection();\n\t                                entRef.type = sType.replace('a:', '');\n\t                                //get all party items....\n\t                                var items = [];\n\t                                var partyNodes = tempNode.childNodes;\n\t                                for (var y = 0, leny = partyNodes[0].childNodes.length; y < leny; y++) {\n\t                                    var itemNodes = tempParentNode.childNodes[1].childNodes[0].childNodes[y].childNodes[0].childNodes;\n\t                                    for (var z = 0, lenz = itemNodes.length; z < lenz; z++) {\n\t                                        var itemNodeChildNodes = itemNodes[z].childNodes;\n\t                                        var nodeText = getNodeText(itemNodeChildNodes[0]);\n\t                                        if (nodeText === \"partyid\") {\n\t                                            var itemRef = new xrmEntityReference();\n\t                                            var partyListNodes = itemNodeChildNodes[1].childNodes;\n\t                                            for (var pi = 0, lenpi = partyListNodes.length; pi < lenpi; pi++) {\n\t                                                var partyReferenceNode = partyListNodes[i];\n\t                                                switch (partyReferenceNode.nodeName) {\n\t                                                    case \"a:Id\":\n\t                                                        itemRef.id = getNodeText(partyReferenceNode);\n\t                                                        break;\n\t                                                    case \"a:LogicalName\":\n\t                                                        itemRef.logicalName = getNodeText(partyReferenceNode);\n\t                                                        break;\n\t                                                    case \"a:Name\":\n\t                                                        itemRef.name = getNodeText(partyReferenceNode);\n\t                                                        break;\n\t                                                }\n\t                                            }\n\t                                            items[y] = itemRef;\n\t                                        }\n\t                                    }\n\t                                }\n\t                                entRef.value = items;\n\t                                obj[sKey] = entRef;\n\t                                break;\n\t                            case \"a:Money\":\n\t                                entCv = new xrmValue();\n\t                                entCv.type = sType.replace('a:', '');\n\t                                entCv.value = parseFloat(getNodeText(tempNode));\n\t                                obj[sKey] = entCv;\n\t                                break;\n\t                            default:\n\t                                entCv = new xrmValue();\n\t                                entCv.type = sType.replace('c:', '').replace('a:', '');\n\t                                if (entCv.type === \"int\") {\n\t                                    entCv.value = parseInt(getNodeText(tempNode));\n\t                                }\n\t                                else if (entCv.type === \"decimal\" || entCv.type === \"double\") {\n\t                                    entCv.value = parseFloat(getNodeText(tempNode));\n\t                                }\n\t                                else if (entCv.type === \"dateTime\") {\n\t                                    entCv.value = stringToDate(getNodeText(tempNode));\n\t                                }\n\t                                else if (entCv.type === \"boolean\") {\n\t                                    entCv.value = (getNodeText(tempNode) === 'false') ? false : true;\n\t                                }\n\t                                else {\n\t                                    entCv.value = getNodeText(tempNode);\n\t                                }\n\t                                obj[sKey] = entCv;\n\t                                break;\n\t                        }\n\t                    }\n\t                    this.attributes = obj;\n\t                    break;\n\t                case \"a:Id\":\n\t                    this.id = getNodeText(parentNode);\n\t                    break;\n\t                case \"a:LogicalName\":\n\t                    this.logicalName = getNodeText(parentNode);\n\t                    break;\n\t                case \"a:FormattedValues\":\n\t                    var foVal = parentNode;\n\t                    for (var o = 0, leno = foVal.childNodes.length; o < leno; o++) {\n\t                        // Establish the Key, we are going to fill in the formatted value of the already found attribute\n\t                        var foNode = foVal.childNodes[o];\n\t                        sKey = getNodeText(foNode.childNodes[0]);\n\t                        this.attributes[sKey].formattedValue = getNodeText(foNode.childNodes[1]);\n\t                        if (isNaN(this.attributes[sKey].value) && this.attributes[sKey].type === \"dateTime\") {\n\t                            this.attributes[sKey].value = new Date(this.attributes[sKey].formattedValue);\n\t                        }\n\t                    }\n\t                    break;\n\t            }\n\t        }\n\t    };\n\t    return businessEntity;\n\t}());\n\texports.businessEntity = businessEntity;\n\tfunction stringToDate(s) {\n\t    var b = s.split(/\\D/);\n\t    return new Date(Date.UTC(Number(b[0]), Number(b[1]) - 1, Number(b[2]), Number(b[3]), Number(b[4]), Number(b[5])));\n\t}\n\texports.stringToDate = stringToDate;\n\tfunction nsResolver(prefix) {\n\t    var ns = new Map([\n\t        [\"s\", \"http://schemas.xmlsoap.org/soap/envelope/\"],\n\t        [\"a\", \"http://schemas.microsoft.com/xrm/2011/Contracts\"],\n\t        [\"i\", \"http://www.w3.org/2001/XMLSchema-instance\"],\n\t        [\"b\", \"http://schemas.datacontract.org/2004/07/System.Collections.Generic\"],\n\t        [\"c\", \"http://schemas.microsoft.com/xrm/2011/Metadata\"],\n\t        [\"ser\", \"http://schemas.microsoft.com/xrm/2011/Contracts/Services\"]\n\t    ]);\n\t    return ns.get(prefix) || null;\n\t}\n\texports.nsResolver = nsResolver;\n\t;\n\tfunction isNodeNull(node) {\n\t    if (node == null) {\n\t        return true;\n\t    }\n\t    if ((node.attributes.getNamedItem(\"i:nil\") != null) && (node.attributes.getNamedItem(\"i:nil\").value === \"true\")) {\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\texports.isNodeNull = isNodeNull;\n\tfunction selectNodes(node, xPathExpression) {\n\t    if (typeof (node.selectNodes) != \"undefined\") {\n\t        return node.selectNodes(xPathExpression);\n\t    }\n\t    else {\n\t        var output = [];\n\t        var xPathResults = node.evaluate(xPathExpression, node, nsResolver, XPathResult.ANY_TYPE, null);\n\t        var result = xPathResults.iterateNext();\n\t        while (result) {\n\t            output.push(result);\n\t            result = xPathResults.iterateNext();\n\t        }\n\t        return output;\n\t    }\n\t}\n\texports.selectNodes = selectNodes;\n\tfunction selectSingleNode(node, xpathExpr) {\n\t    if (typeof (node.selectSingleNode) != \"undefined\") {\n\t        return node.selectSingleNode(xpathExpr);\n\t    }\n\t    else {\n\t        var xpe = new XPathEvaluator();\n\t        var results = xpe.evaluate(xpathExpr, node, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n\t        return results.singleNodeValue;\n\t    }\n\t}\n\texports.selectSingleNode = selectSingleNode;\n\t;\n\tfunction selectSingleNodeText(node, xpathExpr) {\n\t    var x = selectSingleNode(node, xpathExpr);\n\t    if (isNodeNull(x)) {\n\t        return null;\n\t    }\n\t    if (typeof (x.text) != \"undefined\") {\n\t        return x.text;\n\t    }\n\t    else {\n\t        return x.textContent;\n\t    }\n\t}\n\texports.selectSingleNodeText = selectSingleNodeText;\n\tfunction getNodeText(node) {\n\t    if (typeof (node.text) != \"undefined\") {\n\t        return node.text;\n\t    }\n\t    else {\n\t        return node.textContent;\n\t    }\n\t}\n\texports.getNodeText = getNodeText;\n\tfunction setSelectionNamespaces(doc) {\n\t    var namespaces = [\n\t        \"xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'\",\n\t        \"xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'\",\n\t        \"xmlns:i='http://www.w3.org/2001/XMLSchema-instance'\",\n\t        \"xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic'\",\n\t        \"xmlns:c='http://schemas.microsoft.com/xrm/2011/Metadata'\",\n\t        \"xmlns:ser='http://schemas.microsoft.com/xrm/2011/Contracts/Services'\"\n\t    ];\n\t    doc.setProperty(\"SelectionNamespaces\", namespaces.join(\" \"));\n\t}\n\texports.setSelectionNamespaces = setSelectionNamespaces;\n\t/**\n\t * cross browser responseXml to return a XML object\n\t *\n\t * @export\n\t * @param {string} txt Source xml string\n\t * @returns {XMLDocument} Parsed XML Document\n\t */\n\tfunction xmlParser(txt) {\n\t    var xmlDoc = null;\n\t    try {\n\t        xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n\t        xmlDoc.async = false;\n\t        xmlDoc.loadXML(txt);\n\t    }\n\t    catch (e) {\n\t        if (DOMParser) {\n\t            // ReSharper disable InconsistentNaming\n\t            var parser = new DOMParser();\n\t            // ReSharper restore InconsistentNaming\n\t            xmlDoc = parser.parseFromString(txt, \"text/xml\");\n\t        }\n\t        else {\n\t            Helper_1.alertMessage(\"Cannot convert the XML string to a cross-browser XML object.\");\n\t        }\n\t    }\n\t    return xmlDoc;\n\t}\n\texports.xmlParser = xmlParser;\n\tfunction xmlToString(responseXml) {\n\t    var xmlString = \"\";\n\t    try {\n\t        if (responseXml != null) {\n\t            if (typeof XMLSerializer !== \"undefined\" && typeof responseXml.xml === \"undefined\") {\n\t                // ReSharper disable InconsistentNaming\n\t                xmlString = (new XMLSerializer()).serializeToString(responseXml);\n\t            }\n\t            else {\n\t                if (typeof responseXml.xml !== \"undefined\") {\n\t                    xmlString = responseXml.xml;\n\t                }\n\t                else if (typeof responseXml[0].xml !== \"undefined\") {\n\t                    xmlString = responseXml[0].xml;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    catch (e) {\n\t        Helper_1.alertMessage(\"Cannot convert the XML to a string.\");\n\t    }\n\t    return xmlString;\n\t}\n\texports.xmlToString = xmlToString;\n\tfunction isArray(input) {\n\t    return input.constructor.toString().indexOf(\"Array\") !== -1;\n\t}\n\texports.isArray = isArray;\n\tfunction getError(async, resp, internalCallback) {\n\t    //Error descriptions come from http://support.microsoft.com/kb/193625\n\t    if (resp.status === 12029) {\n\t        throw new Error(\"The attempt to connect to the server failed.\");\n\t    }\n\t    if (resp.status === 12007) {\n\t        throw new Error(\"The server name could not be resolved.\");\n\t    }\n\t    var faultXml = resp.responseXML;\n\t    var faultstring = null;\n\t    var errorCode = null;\n\t    var errorMessage = \"Unknown (unable to parse the fault)\";\n\t    if (faultXml !== null && typeof faultXml == \"object\") {\n\t        var bodyNode = faultXml.firstChild.firstChild;\n\t        //Retrieve the fault node\n\t        for (var i = 0; i < bodyNode.childNodes.length; i++) {\n\t            var node = bodyNode.childNodes[i];\n\t            //NOTE: This comparison does not handle the case where the XML namespace changes\n\t            if (\"s:Fault\" === node.nodeName) {\n\t                for (var j = 0; j < node.childNodes.length; j++) {\n\t                    var testNode = node.childNodes[j];\n\t                    if (\"faultstring\" === testNode.nodeName) {\n\t                        faultstring = getNodeText(testNode);\n\t                    }\n\t                    if (\"detail\" === testNode.nodeName) {\n\t                        for (var k = 0; k < testNode.childNodes.length; k++) {\n\t                            var orgServiceFault = testNode.childNodes[k];\n\t                            if (\"OrganizationServiceFault\" === orgServiceFault.nodeName) {\n\t                                for (var l = 0; l < orgServiceFault.childNodes.length; l++) {\n\t                                    var errorCodeNode = orgServiceFault.childNodes[l];\n\t                                    if (\"ErrorCode\" === errorCodeNode.nodeName) {\n\t                                        errorCode = getNodeText(errorCodeNode);\n\t                                        break;\n\t                                    }\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    if (errorCode != null && faultstring != null) {\n\t        errorMessage = \"Error Code:\" + errorCode + \" Message: \" + faultstring;\n\t    }\n\t    else {\n\t        if (faultstring != null) {\n\t            errorMessage = faultstring;\n\t        }\n\t    }\n\t    if (async) {\n\t        return new Error(errorMessage);\n\t    }\n\t    else {\n\t        throw new Error(errorMessage);\n\t    }\n\t}\n\texports.getError = getError;\n\tfunction doRequest(soapBody, requestType, async, internalCallback) {\n\t    async = async || false;\n\t    // Wrap the Soap Body in a soap:Envelope.\n\t    var soapXml = \"\\n    <soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n        <soap:Body>\\n            <\" + requestType + \" xmlns=\\\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\\\" xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\" + soapBody + \"</\" + requestType + \">\\n        </soap:Body>\\n    </soap:Envelope>\\n    \";\n\t    var req = new XMLHttpRequest();\n\t    req.open(\"POST\", orgServicePath(), async);\n\t    req.setRequestHeader(\"Accept\", \"application/xml, text/xml, */*\");\n\t    req.setRequestHeader(\"Content-Type\", \"text/xml; charset=utf-8\");\n\t    req.setRequestHeader(\"SOAPAction\", \"http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/\" + requestType);\n\t    //IE10\n\t    try {\n\t        req.responseType = 'msxml-document';\n\t    }\n\t    catch (e) {\n\t    }\n\t    if (async) {\n\t        req.onreadystatechange = function () {\n\t            if (req.readyState === 4 /* complete */) {\n\t                req.onreadystatechange = null; //Addresses potential memory leak issue with IE\n\t                if (req.status === 200) {\n\t                    var doc = req.responseXML;\n\t                    try {\n\t                        setSelectionNamespaces(doc);\n\t                    }\n\t                    catch (e) {\n\t                    }\n\t                    internalCallback(doc);\n\t                }\n\t                else {\n\t                    getError(true, req);\n\t                }\n\t            }\n\t        };\n\t        req.send(soapXml);\n\t    }\n\t    else {\n\t        req.send(soapXml);\n\t        if (req.status === 200) {\n\t            var doc = req.responseXML;\n\t            try {\n\t                setSelectionNamespaces(doc);\n\t            }\n\t            catch (e) {\n\t            }\n\t            var result = doc;\n\t            return !!internalCallback ? internalCallback(result) : result;\n\t        }\n\t        else {\n\t            getError(false, req);\n\t        }\n\t    }\n\t    // ReSharper disable NotAllPathsReturnValue\n\t}\n\texports.doRequest = doRequest;\n\t// ReSharper restore NotAllPathsReturnValue\n\t/**\n\t * Private function to return the path to the organization service\n\t *\n\t * @returns {string}\n\t */\n\tfunction orgServicePath() {\n\t    return Helper_1.getClientUrl() + \"/XRMServices/2011/Organization.svc/web\";\n\t}\n\tfunction fetchMore(fetchCoreXml, pageNumber, pageCookie, fetchResults) {\n\t    //Build new query\n\t    var moreFetchXml = \"\\n        <fetch mapping=\\\"logical\\\" page=\\\"\" + pageNumber + \"\\\" count=\\\"5000\\\" paging-cookie=\\\"\" + pageCookie + \"\\\">\\n            \" + fetchCoreXml.replace(/\\\"/g, \"'\") + \"\\n        </fetch>\\n    \";\n\t    var moreMsgBody = \"\\n        <request i:type=\\\"a:RetrieveMultipleRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n            <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                <a:KeyValuePairOfstringanyType>\\n                    <b:key>Query</b:key>\\n                    <b:value i:type=\\\"a:FetchExpression\\\">\\n                        <a:Query>\" + Helper_1.crmXmlEncode(moreFetchXml) + \"</a:Query>\\n                    </b:value>\\n                </a:KeyValuePairOfstringanyType>\\n            </a:Parameters>\\n            <a:RequestId i:nil=\\\"true\\\"/>\\n            <a:RequestName>RetrieveMultiple</a:RequestName>\\n        </request>\\n    \";\n\t    return doRequest(moreMsgBody, \"Execute\", false, function (moreResultXml) {\n\t        var newFetchResult = selectSingleNode(moreResultXml, \"//a:Entities\");\n\t        var newMoreRecords = (selectSingleNodeText(moreResultXml, \"//a:MoreRecords\") === \"true\");\n\t        for (var iii = 0, nLength = newFetchResult.childNodes.length; iii < nLength; iii++) {\n\t            var entity = new businessEntity();\n\t            entity.deserialize(newFetchResult.childNodes[iii]);\n\t            fetchResults.push(entity);\n\t        }\n\t        if (newMoreRecords) {\n\t            pageNumber += 1;\n\t            var newPageCookie = selectSingleNodeText(moreResultXml, \"//a:PagingCookie\").replace(/\\\"/g, '\\'').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&quot;');\n\t            fetchMore(fetchCoreXml, pageNumber, newPageCookie, fetchResults);\n\t        }\n\t        else {\n\t            return fetchResults;\n\t        }\n\t    });\n\t}\n\texports.fetchMore = fetchMore;\n\tfunction joinArray(prefix, array, suffix) {\n\t    var output = [];\n\t    for (var i = 0, ilength = array.length; i < ilength; i++) {\n\t        if (array[i] !== \"\" && array[i] != undefined) {\n\t            output.push(prefix, array[i], suffix);\n\t        }\n\t    }\n\t    return output.join(\"\");\n\t}\n\texports.joinArray = joinArray;\n\tfunction joinConditionPair(attributes, values) {\n\t    var output = [];\n\t    for (var i = 0, ilength = attributes.length; i < ilength; i++) {\n\t        if (attributes[i] !== \"\") {\n\t            var value1 = values[i];\n\t            if (typeof value1 == typeof []) {\n\t                output.push(\"<condition attribute='\", attributes[i], \"' operator='in' >\");\n\t                for (var valueIndex in value1) {\n\t                    if (value1.hasOwnProperty(valueIndex)) {\n\t                        var value = encodeValue(value1[valueIndex]);\n\t                        output.push(\"<value>\" + value + \"</value>\");\n\t                    }\n\t                }\n\t                output.push(\"</condition>\");\n\t            }\n\t            else if (typeof value1 == typeof \"\") {\n\t                output.push(\"<condition attribute='\", attributes[i], \"' operator='eq' value='\", encodeValue(value1), \"' />\");\n\t            }\n\t        }\n\t    }\n\t    return output.join(\"\");\n\t}\n\texports.joinConditionPair = joinConditionPair;\n\t// Added in 1.4.1 for metadata retrieval\n\t// Inspired From Microsoft SDK code to retrieve Metadata using JavaScript\n\t// Copyright (C) Microsoft Corporation.  All rights reserved.\n\tvar arrayElements = [\n\t    \"Attributes\",\n\t    \"ManyToManyRelationships\",\n\t    \"ManyToOneRelationships\",\n\t    \"OneToManyRelationships\",\n\t    \"Privileges\",\n\t    \"LocalizedLabels\",\n\t    \"Options\",\n\t    \"Targets\"\n\t];\n\tfunction isMetadataArray(elementName) {\n\t    for (var i = 0, ilength = arrayElements.length; i < ilength; i++) {\n\t        if (elementName === arrayElements[i]) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t}\n\texports.isMetadataArray = isMetadataArray;\n\tfunction getNodeName(node) {\n\t    if (typeof (node.baseName) !== \"undefined\") {\n\t        return node.baseName;\n\t    }\n\t    else {\n\t        return node.localName;\n\t    }\n\t}\n\texports.getNodeName = getNodeName;\n\tfunction objectifyNode(node) {\n\t    //Check for null\n\t    if (node.attributes != null && node.attributes.length === 1) {\n\t        if (node.attributes.getNamedItem(\"i:nil\") != null && node.attributes.getNamedItem(\"i:nil\").nodeValue === \"true\") {\n\t            return null;\n\t        }\n\t    }\n\t    //Check if it is a value\n\t    if ((node.firstChild != null) && (node.firstChild.nodeType === 3)) {\n\t        var nodeName = getNodeName(node);\n\t        switch (nodeName) {\n\t            //Integer Values\n\t            case \"ActivityTypeMask\":\n\t            case \"ObjectTypeCode\":\n\t            case \"ColumnNumber\":\n\t            case \"DefaultFormValue\":\n\t            case \"MaxValue\":\n\t            case \"MinValue\":\n\t            case \"MaxLength\":\n\t            case \"Order\":\n\t            case \"Precision\":\n\t            case \"PrecisionSource\":\n\t            case \"LanguageCode\":\n\t                return parseInt(node.firstChild.nodeValue, 10);\n\t            // Boolean values\n\t            case \"AutoRouteToOwnerQueue\":\n\t            case \"CanBeChanged\":\n\t            case \"CanTriggerWorkflow\":\n\t            case \"IsActivity\":\n\t            case \"IsActivityParty\":\n\t            case \"IsAvailableOffline\":\n\t            case \"IsChildEntity\":\n\t            case \"IsCustomEntity\":\n\t            case \"IsCustomOptionSet\":\n\t            case \"IsDocumentManagementEnabled\":\n\t            case \"IsEnabledForCharts\":\n\t            case \"IsGlobal\":\n\t            case \"IsImportable\":\n\t            case \"IsIntersect\":\n\t            case \"IsManaged\":\n\t            case \"IsReadingPaneEnabled\":\n\t            case \"IsValidForAdvancedFind\":\n\t            case \"CanBeSecuredForCreate\":\n\t            case \"CanBeSecuredForRead\":\n\t            case \"CanBeSecuredForUpdate\":\n\t            case \"IsCustomAttribute\":\n\t            case \"IsPrimaryId\":\n\t            case \"IsPrimaryName\":\n\t            case \"IsSecured\":\n\t            case \"IsValidForCreate\":\n\t            case \"IsValidForRead\":\n\t            case \"IsValidForUpdate\":\n\t            case \"IsCustomRelationship\":\n\t            case \"CanBeBasic\":\n\t            case \"CanBeDeep\":\n\t            case \"CanBeGlobal\":\n\t            case \"CanBeLocal\":\n\t                return (node.firstChild.nodeValue === \"true\") ? true : false;\n\t            //OptionMetadata.Value and BooleanManagedProperty.Value and AttributeRequiredLevelManagedProperty.Value\n\t            case \"Value\":\n\t                //BooleanManagedProperty.Value\n\t                if ((node.firstChild.nodeValue === \"true\") || (node.firstChild.nodeValue === \"false\")) {\n\t                    return (node.firstChild.nodeValue === \"true\") ? true : false;\n\t                }\n\t                //AttributeRequiredLevelManagedProperty.Value\n\t                if ((node.firstChild.nodeValue === \"ApplicationRequired\") ||\n\t                    (node.firstChild.nodeValue === \"None\") ||\n\t                    (node.firstChild.nodeValue === \"Recommended\") ||\n\t                    (node.firstChild.nodeValue === \"SystemRequired\")) {\n\t                    return node.firstChild.nodeValue;\n\t                }\n\t                else {\n\t                    //OptionMetadata.Value\n\t                    return parseInt(node.firstChild.nodeValue, 10);\n\t                }\n\t            //String values\n\t            default:\n\t                return node.firstChild.nodeValue;\n\t        }\n\t    }\n\t    //Check if it is a known array\n\t    if (isMetadataArray(getNodeName(node))) {\n\t        var arrayValue = [];\n\t        for (var iii = 0, tempLength = node.childNodes.length; iii < tempLength; iii++) {\n\t            var objectTypeName = void 0;\n\t            if ((node.childNodes[iii].attributes != null) && (node.childNodes[iii].attributes.getNamedItem(\"i:type\") != null)) {\n\t                objectTypeName = node.childNodes[iii].attributes.getNamedItem(\"i:type\").nodeValue.split(\":\")[1];\n\t            }\n\t            else {\n\t                objectTypeName = getNodeName(node.childNodes[iii]);\n\t            }\n\t            var b = objectifyNode(node.childNodes[iii]);\n\t            b._type = objectTypeName;\n\t            arrayValue.push(b);\n\t        }\n\t        return arrayValue;\n\t    }\n\t    //Null entity description labels are returned as <label/> - not using i:nil = true;\n\t    if (node.childNodes.length === 0) {\n\t        return null;\n\t    }\n\t    //Otherwise return an object\n\t    var c = {};\n\t    if (node.attributes.getNamedItem(\"i:type\") != null) {\n\t        c._type = node.attributes.getNamedItem(\"i:type\").nodeValue.split(\":\")[1];\n\t    }\n\t    for (var i = 0, ilength = node.childNodes.length; i < ilength; i++) {\n\t        if (node.childNodes[i].nodeType === 3) {\n\t            c[getNodeName(node.childNodes[i])] = node.childNodes[i].nodeValue;\n\t        }\n\t        else {\n\t            c[getNodeName(node.childNodes[i])] = objectifyNode(node.childNodes[i]);\n\t        }\n\t    }\n\t    return c;\n\t}\n\texports.objectifyNode = objectifyNode;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path=\"../typings/main.d.ts\" />\n\t\"use strict\";\n\tvar HelperRest_1 = __webpack_require__(4);\n\tvar ParameterCheck_1 = __webpack_require__(2);\n\t// RetrieveMultiple: retrieveMultipleRecords,\n\t// Associate: associateRecord,\n\t// Disassociate: disassociateRecord\n\tvar Rest = (function () {\n\t    function Rest() {\n\t    }\n\t    /**\n\t     * Sends synchronous/asynchronous request to create a new record\n\t     *\n\t     * @param {Object} object A JavaScript object with properties corresponding to the Schema name of\n\t     * entity attributes that are valid for create operations\n\t     * @param {string} type A String representing the name of the entity\n\t     * @param {Function} successCallback The function that will be passed through and be called by a successful * * response.\n\t     * This function can accept the returned record as a parameter.\n\t     * @param {Function} errorCallback The function that will be passed through and be called by a failed\n\t     * response.\n\t     * This function must accept an Error object as a parameter.\n\t     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n\t     * true means asynchronously. false means synchronously\n\t     */\n\t    Rest.Create = function (object, type, successCallback, errorCallback, async) {\n\t        ParameterCheck_1.parameterCheck(object, \"XrmServiceToolkit.REST.createRecord requires the object parameter.\");\n\t        ParameterCheck_1.stringParameterCheck(type, \"XrmServiceToolkit.REST.createRecord requires the type parameter is a string.\");\n\t        ParameterCheck_1.callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.createRecord requires the successCallback is a function.\");\n\t        ParameterCheck_1.callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.createRecord requires the errorCallback is a function.\");\n\t        ParameterCheck_1.booleanParameterCheck(async, \"XrmServiceToolkit.REST.createRecord requires the async is a boolean.\");\n\t        var req = HelperRest_1.getXhr();\n\t        req.open(\"POST\", HelperRest_1.oDataPath() + type, async);\n\t        req.setRequestHeader(\"Accept\", \"application/json\");\n\t        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t        if (async) {\n\t            req.onreadystatechange = function () {\n\t                if (req.readyState === 4 /* complete */) {\n\t                    req.onreadystatechange = null;\n\t                    if (req.status === 201) {\n\t                        successCallback(JSON.parse(req.responseText, HelperRest_1.dateReviver).d);\n\t                    }\n\t                    else {\n\t                        errorCallback(HelperRest_1.errorHandler(req));\n\t                    }\n\t                }\n\t            };\n\t            req.send(JSON.stringify(object));\n\t        }\n\t        else {\n\t            req.send(JSON.stringify(object));\n\t            if (req.status === 201) {\n\t                successCallback(JSON.parse(req.responseText, HelperRest_1.dateReviver).d);\n\t            }\n\t            else {\n\t                errorCallback(HelperRest_1.errorHandler(req));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to retrieve a record\n\t     *\n\t     * @param {string} id A String representing the GUID value for the record to retrieve\n\t     * @param {string} type A String representing the name of the entity\n\t     * @param {string} select A String representing the $select OData System Query Option to control which\n\t     * attributes will be returned. This is a comma separated list of Attribute names that are valid for retrieve.\n\t     * If null all properties for the record will be returned\n\t     * @param {string} expand  String representing the $expand OData System Query Option value to control which\n\t     * related records are also returned. This is a comma separated list of of up to 6 entity relationship names\n\t     * If null no expanded related records will be returned.\n\t     * @param {Function} successCallback The function that will be passed through and be called by a successful response.\n\t     * This function must accept the returned record as a parameter.\n\t     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n\t     * This function must accept an Error object as a parameter.\n\t     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n\t     * true means asynchronously. false means synchronously\n\t     */\n\t    Rest.Retrieve = function (id, type, select, expand, successCallback, errorCallback, async) {\n\t        ParameterCheck_1.stringParameterCheck(id, \"XrmServiceToolkit.REST.retrieveRecord requires the id parameter is a string.\");\n\t        ParameterCheck_1.stringParameterCheck(type, \"XrmServiceToolkit.REST.retrieveRecord requires the type parameter is a string.\");\n\t        if (select != null)\n\t            ParameterCheck_1.stringParameterCheck(select, \"XrmServiceToolkit.REST.retrieveRecord requires the select parameter is a string.\");\n\t        if (expand != null)\n\t            ParameterCheck_1.stringParameterCheck(expand, \"XrmServiceToolkit.REST.retrieveRecord requires the expand parameter is a string.\");\n\t        ParameterCheck_1.callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.retrieveRecord requires the successCallback parameter is a function.\");\n\t        ParameterCheck_1.callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.retrieveRecord requires the errorCallback parameter is a function.\");\n\t        ParameterCheck_1.booleanParameterCheck(async, \"XrmServiceToolkit.REST.retrieveRecord requires the async parameter is a boolean.\");\n\t        var systemQueryOptions = \"\";\n\t        if (select != null || expand != null) {\n\t            systemQueryOptions = \"?\";\n\t            if (select != null) {\n\t                var selectString = \"$select=\" + select;\n\t                if (expand != null) {\n\t                    selectString = selectString + \",\" + expand;\n\t                }\n\t                systemQueryOptions = systemQueryOptions + selectString;\n\t            }\n\t            if (expand != null) {\n\t                systemQueryOptions = systemQueryOptions + \"&$expand=\" + expand;\n\t            }\n\t        }\n\t        var req = HelperRest_1.getXhr();\n\t        req.open(\"GET\", HelperRest_1.oDataPath() + type + \"(guid'\" + id + \"')\" + systemQueryOptions, async);\n\t        req.setRequestHeader(\"Accept\", \"application/json\");\n\t        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t        if (async) {\n\t            req.onreadystatechange = function () {\n\t                if (req.readyState === 4 /* complete */) {\n\t                    if (req.status === 200) {\n\t                        successCallback(JSON.parse(req.responseText, HelperRest_1.dateReviver).d);\n\t                    }\n\t                    else {\n\t                        errorCallback(HelperRest_1.errorHandler(req));\n\t                    }\n\t                }\n\t            };\n\t            req.send();\n\t        }\n\t        else {\n\t            req.send();\n\t            if (req.status === 200) {\n\t                successCallback(JSON.parse(req.responseText, HelperRest_1.dateReviver).d);\n\t            }\n\t            else {\n\t                errorCallback(HelperRest_1.errorHandler(req));\n\t            }\n\t        }\n\t    };\n\t    ;\n\t    /**\n\t     * Sends synchronous/asynchronous request to update a record\n\t     *\n\t     * @param {string} id A String representing the GUID value for the record to update\n\t     * @param {Object} object A JavaScript object with properties corresponding to the Schema name of\n\t     * entity attributes that are valid for create operations\n\t     * @param {string} type A String representing the name of the entity\n\t     * @param {Function} successCallback The function that will be passed through and be called by a successful response.\n\t     * Nothing will be returned to this function\n\t     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n\t     * This function must accept an Error object as a parameter\n\t     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n\t     * true means asynchronously. false means synchronously\n\t     */\n\t    Rest.Update = function (id, object, type, successCallback, errorCallback, async) {\n\t        ParameterCheck_1.stringParameterCheck(id, \"XrmServiceToolkit.REST.updateRecord requires the id parameter.\");\n\t        ParameterCheck_1.parameterCheck(object, \"XrmServiceToolkit.REST.updateRecord requires the object parameter.\");\n\t        ParameterCheck_1.stringParameterCheck(type, \"XrmServiceToolkit.REST.updateRecord requires the type parameter.\");\n\t        ParameterCheck_1.callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.updateRecord requires the successCallback is a function.\");\n\t        ParameterCheck_1.callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.updateRecord requires the errorCallback is a function.\");\n\t        ParameterCheck_1.booleanParameterCheck(async, \"XrmServiceToolkit.REST.updateRecord requires the async parameter is a boolean.\");\n\t        var req = HelperRest_1.getXhr();\n\t        req.open(\"POST\", HelperRest_1.oDataPath() + type + \"(guid'\" + id + \"')\", async);\n\t        req.setRequestHeader(\"Accept\", \"application/json\");\n\t        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t        req.setRequestHeader(\"X-HTTP-Method\", \"MERGE\");\n\t        if (async) {\n\t            req.onreadystatechange = function () {\n\t                if (req.readyState === 4 /* complete */) {\n\t                    if (req.status === 204 || req.status === 1223) {\n\t                        successCallback();\n\t                    }\n\t                    else {\n\t                        errorCallback(HelperRest_1.errorHandler(req));\n\t                    }\n\t                }\n\t            };\n\t            req.send(JSON.stringify(object));\n\t        }\n\t        else {\n\t            req.send(JSON.stringify(object));\n\t            if (req.status === 204 || req.status === 1223) {\n\t                successCallback();\n\t            }\n\t            else {\n\t                errorCallback(HelperRest_1.errorHandler(req));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to delete a record\n\t     *\n\t     * @param {string} id A String representing the GUID value for the record to delete\n\t     * @param {string} type A String representing the name of the entity\n\t     * @param {Function} successCallback The function that will be passed through and be called by a successful response.\n\t     * Nothing will be returned to this function\n\t     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n\t     * This function must accept an Error object as a parameter\n\t     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n\t     * true means asynchronously. false means synchronously\n\t     */\n\t    Rest.Delete = function (id, type, successCallback, errorCallback, async) {\n\t        ParameterCheck_1.stringParameterCheck(id, \"XrmServiceToolkit.REST.deleteRecord requires the id parameter.\");\n\t        ParameterCheck_1.stringParameterCheck(type, \"XrmServiceToolkit.REST.deleteRecord requires the type parameter.\");\n\t        ParameterCheck_1.callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.deleteRecord requires the successCallback is a function.\");\n\t        ParameterCheck_1.callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.deleteRecord requires the errorCallback is a function.\");\n\t        ParameterCheck_1.booleanParameterCheck(async, \"XrmServiceToolkit.REST.deleteRecord requires the async parameter is a boolean.\");\n\t        var req = HelperRest_1.getXhr();\n\t        req.open(\"POST\", HelperRest_1.oDataPath() + type + \"(guid'\" + id + \"')\", async);\n\t        req.setRequestHeader(\"Accept\", \"application/json\");\n\t        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t        req.setRequestHeader(\"X-HTTP-Method\", \"DELETE\");\n\t        if (async) {\n\t            req.onreadystatechange = function () {\n\t                if (req.readyState === 4 /* complete */) {\n\t                    if (req.status === 204 || req.status === 1223) {\n\t                        successCallback();\n\t                    }\n\t                    else {\n\t                        errorCallback(HelperRest_1.errorHandler(req));\n\t                    }\n\t                }\n\t            };\n\t            req.send();\n\t        }\n\t        else {\n\t            req.send();\n\t            if (req.status === 204 || req.status === 1223) {\n\t                successCallback();\n\t            }\n\t            else {\n\t                errorCallback(HelperRest_1.errorHandler(req));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to retrieve records\n\t     *\n\t     * @param {string} type The Schema Name of the Entity type record to retrieve.\n\t     * For an Account record, use \"Account\"\n\t     * @param {string} options A String representing the OData System Query Options to control the data returned\n\t     * @param {Function} successCallback The function that will be passed through and be called for each page of records returned.\n\t     * Each page is 50 records. If you expect that more than one page of records will be returned,\n\t     * this function should loop through the results and push the records into an array outside of the function.\n\t     * Use the OnComplete event handler to know when all the records have been processed\n\t     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n\t     * This function must accept an Error object as a parameter\n\t     * @param {Function} onComplete The function that will be called when all the requested records have been returned.\n\t     * No parameters are passed to this function\n\t     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n\t     * true means asynchronously. false means synchronously\n\t     */\n\t    Rest.RetrieveMultiple = function (type, options, successCallback, errorCallback, onComplete, async) {\n\t        var _this = this;\n\t        ParameterCheck_1.stringParameterCheck(type, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the type parameter is a string.\");\n\t        if (options != null)\n\t            ParameterCheck_1.stringParameterCheck(options, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the options parameter is a string.\");\n\t        ParameterCheck_1.callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the successCallback parameter is a function.\");\n\t        ParameterCheck_1.callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the errorCallback parameter is a function.\");\n\t        ParameterCheck_1.callbackParameterCheck(onComplete, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the OnComplete parameter is a function.\");\n\t        ParameterCheck_1.booleanParameterCheck(async, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the async parameter is a boolean.\");\n\t        var optionsString = \"\";\n\t        if (options != null) {\n\t            if (options.charAt(0) !== \"?\") {\n\t                optionsString = \"?\" + options;\n\t            }\n\t            else {\n\t                optionsString = options;\n\t            }\n\t        }\n\t        var req = HelperRest_1.getXhr();\n\t        req.open(\"GET\", HelperRest_1.oDataPath() + type + optionsString, async);\n\t        req.setRequestHeader(\"Accept\", \"application/json\");\n\t        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t        if (async) {\n\t            req.onreadystatechange = function () {\n\t                if (req.readyState === 4 /* complete */) {\n\t                    if (req.status === 200) {\n\t                        var returned = JSON.parse(req.responseText, HelperRest_1.dateReviver).d;\n\t                        successCallback(returned.results);\n\t                        if (returned.__next == null) {\n\t                            onComplete();\n\t                        }\n\t                        else {\n\t                            var queryOptions = returned.__next.substring((HelperRest_1.oDataPath() + type).length);\n\t                            _this.RetrieveMultiple(type, queryOptions, successCallback, errorCallback, onComplete, async);\n\t                        }\n\t                    }\n\t                    else {\n\t                        errorCallback(HelperRest_1.errorHandler(req));\n\t                    }\n\t                }\n\t            };\n\t            req.send();\n\t        }\n\t        else {\n\t            req.send();\n\t            if (req.status === 200) {\n\t                var returned = JSON.parse(req.responseText, HelperRest_1.dateReviver).d;\n\t                successCallback(returned.results);\n\t                if (returned.__next == null) {\n\t                    onComplete();\n\t                }\n\t                else {\n\t                    var queryOptions = returned.__next.substring((HelperRest_1.oDataPath() + type).length);\n\t                    this.RetrieveMultiple(type, queryOptions, successCallback, errorCallback, onComplete, async);\n\t                }\n\t            }\n\t            else {\n\t                errorCallback(HelperRest_1.errorHandler(req));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to associate a record\n\t     *\n\t     * @param {string} entityid1 A String representing the GUID value for the record to associate\n\t     * @param {string} odataSetName1 A String representing the odataset name for entityid1\n\t     * @param {string} entityid2 A String representing the GUID value for the record to be associated\n\t     * @param {string} odataSetName2 A String representing the odataset name for entityid2\n\t     * @param {string} relationship A String representing the name of the relationship for association\n\t     * @param {Function} successCallback The function that will be passed through and be called by a successful response.\n\t     * Nothing will be returned to this function\n\t     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n\t     * This function must accept an Error object as a parameter\n\t     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n\t     * true means asynchronously. false means synchronously\n\t     */\n\t    Rest.Associate = function (entityid1, odataSetName1, entityid2, odataSetName2, relationship, successCallback, errorCallback, async) {\n\t        ParameterCheck_1.parameterCheck(entityid1, \"XrmServiceToolkit.REST.associateRecord requires the entityid1 parameter.\");\n\t        ParameterCheck_1.parameterCheck(odataSetName1, \"XrmServiceToolkit.REST.associateRecord requires the odataSetName1 parameter.\");\n\t        ParameterCheck_1.parameterCheck(entityid2, \"XrmServiceToolkit.REST.associateRecord requires the entityid2 parameter.\");\n\t        ParameterCheck_1.parameterCheck(odataSetName2, \"XrmServiceToolkit.REST.associateRecord requires the odataSetName2 parameter.\");\n\t        ParameterCheck_1.parameterCheck(relationship, \"XrmServiceToolkit.REST.associateRecord requires the relationship parameter.\");\n\t        ParameterCheck_1.callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.associateRecord requires the successCallback is a function.\");\n\t        ParameterCheck_1.callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.associateRecord requires the errorCallback is a function.\");\n\t        ParameterCheck_1.booleanParameterCheck(async, \"XrmServiceToolkit.REST.associateRecord requires the async parameter is a boolean\");\n\t        var entity2 = {};\n\t        entity2.uri = HelperRest_1.oDataPath() + \"/\" + odataSetName2 + \"(guid'\" + entityid2 + \"')\";\n\t        var jsonEntity = JSON.stringify(entity2);\n\t        HelperRest_1.performRequest({\n\t            type: \"POST\",\n\t            url: HelperRest_1.oDataPath() + \"/\" + odataSetName1 + \"(guid'\" + entityid1 + \"')/$links/\" + relationship,\n\t            data: jsonEntity,\n\t            success: successCallback,\n\t            error: errorCallback,\n\t            async: async\n\t        });\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to disassociate a record\n\t     *\n\t     * @param {string} entityid1 A String representing the GUID value for the record to disassociate\n\t     * @param {string} odataSetName A String representing the odataset name for entityid1\n\t     * @param {string} entityid2 A String representing the GUID value for the record to be disassociated\n\t     * @param {string} relationship A String representing the name of the relationship for disassociation\n\t     * @param {Function} successCallback The function that will be passed through and be called by a successful response.\n\t     * Nothing will be returned to this function\n\t     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n\t     * This function must accept an Error object as a parameter\n\t     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n\t     * true means asynchronously. false means synchronously\n\t     */\n\t    Rest.Disassociate = function (entityid1, odataSetName, entityid2, relationship, successCallback, errorCallback, async) {\n\t        ParameterCheck_1.parameterCheck(entityid1, \"XrmServiceToolkit.REST.disassociateRecord requires the entityid1 parameter.\");\n\t        ParameterCheck_1.parameterCheck(odataSetName, \"XrmServiceToolkit.REST.disassociateRecord requires the odataSetName parameter.\");\n\t        ParameterCheck_1.parameterCheck(entityid2, \"XrmServiceToolkit.REST.disassociateRecord requires the entityid2 parameter.\");\n\t        ParameterCheck_1.parameterCheck(relationship, \"XrmServiceToolkit.REST.disassociateRecord requires the relationship parameter.\");\n\t        ParameterCheck_1.callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.disassociateRecord requires the successCallback is a function.\");\n\t        ParameterCheck_1.callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.disassociateRecord requires the errorCallback is a function.\");\n\t        ParameterCheck_1.booleanParameterCheck(async, \"XrmServiceToolkit.REST.disassociateRecord requires the async parameter is a boolean.\");\n\t        var url = HelperRest_1.oDataPath() + \"/\" + odataSetName + \"(guid'\" + entityid1 + \"')/$links/\" + relationship + \"(guid'\" + entityid2 + \"')\";\n\t        HelperRest_1.performRequest({\n\t            url: url,\n\t            type: \"POST\",\n\t            action: \"DELETE\",\n\t            error: errorCallback,\n\t            success: successCallback,\n\t            async: async\n\t        });\n\t    };\n\t    return Rest;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Rest;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../typings/main.d.ts\" />\n\tvar Helper_1 = __webpack_require__(1);\n\tvar HelperSoap_1 = __webpack_require__(5);\n\tvar Soap = (function () {\n\t    function Soap() {\n\t    }\n\t    /**\n\t     * Sends synchronous/asynchronous request to create a new record\n\t     *\n\t     * @param {Object} be A JavaScript object with properties corresponding to the Schema name of\n\t     * entity attributes that are valid for create operations.\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     * @returns {(void | any)} If sync -> results\n\t     */\n\t    Soap.Create = function (be, callback) {\n\t        var request = be.serialize();\n\t        var async = !!callback;\n\t        var mBody = \"\\n            <request i:type=\\\"a:CreateRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                <a:KeyValuePairOfstringanyType>\\n                    <b:key>Target</b:key>\\n                    \" + request + \"\\n                </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>Create</a:RequestName>\\n            </request>\\n        \";\n\t        return HelperSoap_1.doRequest(mBody, \"Execute\", async, function (resultXml) {\n\t            var responseText = HelperSoap_1.selectSingleNodeText(resultXml, \"//b:value\");\n\t            var result = Helper_1.crmXmlDecode(responseText);\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to update an existing record\n\t     *\n\t     * @param {businessEntity} be A JavaScript object with properties corresponding to the Schema name of\n\t     * entity attributes that are valid for update operations\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     * @returns {(void | any)} If sync -> results\n\t     */\n\t    Soap.Update = function (be, callback) {\n\t        var request = be.serialize();\n\t        var async = !!callback;\n\t        var mBody = \"\\n            <request i:type=\\\"a:UpdateRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>Target</b:key>\\n                        \" + request + \"\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>Update</a:RequestName>\\n            </request>\\n        \";\n\t        return HelperSoap_1.doRequest(mBody, \"Execute\", async, function (resultXml) {\n\t            var responseText = HelperSoap_1.selectSingleNodeText(resultXml, \"//a:Results\");\n\t            var result = Helper_1.crmXmlDecode(responseText);\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to delete a record\n\t     *\n\t     * @param {string} entityName A JavaScript String corresponding to the Schema name of\n\t     * entity that is used for delete operations\n\t     * @param {string} id A JavaScript String corresponding to the GUID of\n\t     * entity that is used for delete operations\n\t     * @param {Function} [callback] A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     * @returns {(void | any)} If sync -> results\n\t     */\n\t    Soap.Delete = function (entityName, id, callback) {\n\t        var request = \"\\n            <request i:type=\\\"a:DeleteRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>Target</b:key>\\n                        <b:value i:type=\\\"a:EntityReference\\\">\\n                            <a:Id>\\\"\\n                                \" + id + \"\\n                            </a:Id>\\n                            <a:LogicalName>\\n                                \" + entityName + \"\\n                            </a:LogicalName>\\n                            <a:Name i:nil=\\\"true\\\" />\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>Delete</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var responseText = HelperSoap_1.selectSingleNodeText(resultXml, \"//a:Results\");\n\t            var result = Helper_1.crmXmlDecode(responseText);\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to execute a soap request\n\t     *\n\t     * @param {string} request A JavaScript string corresponding to the soap request\n\t     * that are valid for execute operations\n\t     * @param {Function} [callback] A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     * @returns {(void | any)} If sync -> results\n\t     */\n\t    Soap.Execute = function (request, callback) {\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            if (!async) {\n\t                return resultXml;\n\t            }\n\t            else {\n\t                callback(resultXml);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to do a fetch request)\n\t     *\n\t     * @param {string} fetchCore A JavaScript String containing serialized XML using the FetchXML schema.\n\t     * For efficiency, start with the \"entity\" node\n\t     * @param {boolean} fetchAll Switch to enable paging\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     * @returns {(void | any)} If sync -> results\n\t     */\n\t    Soap.Fetch = function (fetchCore, fetchAll, callback) {\n\t        var fetchXml = fetchCore;\n\t        if (fetchCore.slice(0, 7) === \"<entity\") {\n\t            fetchXml = \"\\n                <fetch mapping=\\\"logical\\\">\\n                    \" + fetchCore.replace(/\\\"/g, \"'\") + \"\\n                </fetch>\\n            \";\n\t        }\n\t        else {\n\t            var isAggregate = (fetchCore.indexOf(\"aggregate=\") !== -1);\n\t            var isLimitedReturn = (fetchCore.indexOf(\"page='1'\") !== -1 && fetchCore.indexOf(\"count='\") !== -1);\n\t            var distinctPos = fetchCore.indexOf(\"distinct=\");\n\t            var isDistinct = (distinctPos !== -1);\n\t            var valQuotes = fetchCore.substring(distinctPos + 9, distinctPos + 10);\n\t            var distinctValue = isDistinct\n\t                ? fetchCore.substring(fetchCore.indexOf(\"distinct=\") + 10, fetchCore.indexOf(valQuotes, fetchCore.indexOf(\"distinct=\") + 10))\n\t                : \"false\";\n\t            var xmlDoc = HelperSoap_1.xmlParser(fetchCore);\n\t            var fetchEntity = HelperSoap_1.selectSingleNode(xmlDoc, \"//entity\");\n\t            if (fetchEntity === null) {\n\t                throw new Error(\"XrmServiceToolkit.Fetch: No 'entity' node in the provided FetchXML.\");\n\t            }\n\t            var fetchCoreDom = fetchEntity;\n\t            try {\n\t                fetchCore = HelperSoap_1.xmlToString(fetchCoreDom).replace(/\\\"/g, \"'\");\n\t            }\n\t            catch (error) {\n\t                if (fetchCoreDom !== undefined && fetchCoreDom.xml) {\n\t                    fetchCore = fetchCoreDom.xml.replace(/\\\"/g, \"'\");\n\t                }\n\t                else {\n\t                    throw new Error(\"XrmServiceToolkit.Fetch: This client does not provide the necessary XML features to continue.\");\n\t                }\n\t            }\n\t            if (!isAggregate && !isLimitedReturn) {\n\t                fetchXml = \"\\n                    <fetch mapping=\\\"logical\\\" distinct=\\\"\" + (isDistinct ? distinctValue : \"false\") + \"\\\"'\\\" >\\n                        \" + fetchCore + \"\\n                    </fetch>\\n                \";\n\t            }\n\t        }\n\t        var request = \"\\n            <request i:type=\\\"a:RetrieveMultipleRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>Query</b:key>\\n                        <b:value i:type=\\\"a:FetchExpression\\\">\\n                            <a:Query>\" + Helper_1.crmXmlEncode(fetchXml) + \"</a:Query>\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\"/>\\n                <a:RequestName>RetrieveMultiple</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var fetchResult = HelperSoap_1.selectSingleNode(resultXml, \"//a:Entities\");\n\t            var moreRecords = (HelperSoap_1.selectSingleNodeText(resultXml, \"//a:MoreRecords\") === \"true\");\n\t            var fetchResults = [];\n\t            if (fetchResult != null) {\n\t                for (var ii = 0, olength = fetchResult.childNodes.length; ii < olength; ii++) {\n\t                    var entity = new HelperSoap_1.businessEntity();\n\t                    entity.deserialize(fetchResult.childNodes[ii]);\n\t                    fetchResults.push(entity);\n\t                }\n\t                if (fetchAll && moreRecords) {\n\t                    var pageCookie = HelperSoap_1.selectSingleNodeText(resultXml, \"//a:PagingCookie\").replace(/\\\"/g, '\\'').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&quot;');\n\t                    HelperSoap_1.fetchMore(fetchCore, 2, pageCookie, fetchResults);\n\t                }\n\t                if (!async) {\n\t                    return fetchResults;\n\t                }\n\t                else {\n\t                    callback(fetchResults);\n\t                }\n\t            }\n\t            // ReSharper disable once NotAllPathsReturnValue\n\t        });\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to retrieve a record\n\t     *\n\t     * @param {string} entityName A JavaScript String corresponding to the Schema name of\n\t     * entity that is used for retrieve operations\n\t     * @param {string} id A JavaScript String corresponding to the GUID of\n\t     * entity that is used for retrieve operations\n\t     * @param {Array} columnSet  A JavaScript Array corresponding to the attributes of\n\t     * entity that is used for retrieve operations\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     * @returns {(void | any)} If sync -> results\n\t     */\n\t    Soap.Retrieve = function (entityName, id, columnSet, callback) {\n\t        var attributes = \"\";\n\t        // ReSharper disable AssignedValueIsNeverUsed\n\t        var query = \"\";\n\t        // ReSharper restore AssignedValueIsNeverUsed\n\t        if (columnSet != null) {\n\t            for (var i = 0, ilength = columnSet.length; i < ilength; i++) {\n\t                attributes += \"<c:string>\" + columnSet[i] + \"</c:string>\";\n\t            }\n\t            query = \"<a:AllColumns>false</a:AllColumns>\" +\n\t                \"<a:Columns xmlns:c='http://schemas.microsoft.com/2003/10/Serialization/Arrays'>\" +\n\t                attributes +\n\t                \"</a:Columns>\";\n\t        }\n\t        else {\n\t            query = \"<a:AllColumns>true</a:AllColumns><a:Columns xmlns:b='http://schemas.microsoft.com/2003/10/Serialization/Arrays' />\";\n\t        }\n\t        var msgBody = \"\\n            <request i:type=\\\"a:RetrieveRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>Target</b:key>\\n                        <b:value i:type=\\\"a:EntityReference\\\">\\n                            <a:Id>\" + HelperSoap_1.encodeValue(id) + \"</a:Id>\\n                            <a:LogicalName>\" + entityName + \"</a:LogicalName>\\n                            <a:Name i:nil=\\\"true\\\" />\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>ColumnSet</b:key>\\n                        <b:value i:type=\\\"a:ColumnSet\\\">\\n                            \" + query + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>Retrieve</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(msgBody, \"Execute\", !!callback, function (resultXml) {\n\t            var retrieveResult = HelperSoap_1.selectSingleNode(resultXml, \"//b:value\");\n\t            var entity = new HelperSoap_1.businessEntity();\n\t            entity.deserialize(retrieveResult);\n\t            if (!async) {\n\t                return entity;\n\t            }\n\t            else {\n\t                callback(entity);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to do a retrieveMultiple request\n\t     *\n\t     * @param {string} query A JavaScript String with properties corresponding to the retrievemultiple request\n\t     * that are valid for retrievemultiple operations\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     * @returns {(void | any)} If sync -> results\n\t     */\n\t    Soap.RetrieveMultiple = function (query, callback) {\n\t        var request = \"\\n            <request i:type=\\\"a:RetrieveMultipleRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>Query</b:key>\\n                        <b:value i:type=\\\"a:QueryExpression\\\">\\n                            \" + query + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\"/>\\n                <a:RequestName>RetrieveMultiple</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var resultNodes = HelperSoap_1.selectSingleNode(resultXml, \"//a:Entities\");\n\t            var retriveMultipleResults = [];\n\t            for (var i = 0, ilength = resultNodes.childNodes.length; i < ilength; i++) {\n\t                var entity = new HelperSoap_1.businessEntity();\n\t                entity.deserialize(resultNodes.childNodes[i]);\n\t                retriveMultipleResults[i] = entity;\n\t            }\n\t            if (!async) {\n\t                return retriveMultipleResults;\n\t            }\n\t            else {\n\t                callback(retriveMultipleResults);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to do a queryByAttribute request\n\t     *\n\t     * @static\n\t     * @param {*} queryOptions A JavaScript Object with properties corresponding to the queryByAttribute Criteria\n\t     * that are valid for queryByAttribute operations.\n\t     * queryOptions.entityName is a string represents the name of the entity\n\t     * queryOptions.attributes is a array represents the attributes of the entity to query\n\t     * queryOptions.values is a array represents the values of the attributes to query\n\t     * queryOptions.columnSet is a array represents the attributes of the entity to return\n\t     * queryOptions.orderBy is a array represents the order conditions of the results\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     */\n\t    Soap.QueryByAttribute = function (queryOptions, callback) {\n\t        var entityName = queryOptions.entityName;\n\t        var attributes = queryOptions.attributes;\n\t        var values = queryOptions.values;\n\t        var columnSet = queryOptions.columnSet;\n\t        var orderBy = queryOptions.orderBy || \"\";\n\t        attributes = HelperSoap_1.isArray(attributes) ? attributes : [attributes];\n\t        values = HelperSoap_1.isArray(values) ? values : [values];\n\t        orderBy = (!!orderBy && HelperSoap_1.isArray(orderBy)) ? orderBy : [orderBy];\n\t        columnSet = (!!columnSet && HelperSoap_1.isArray(columnSet)) ? columnSet : [columnSet];\n\t        var xml = \"\\n            <entity name=\\\"\" + entityName + \"\\\">\\n                    \" + HelperSoap_1.joinArray(\"<attribute name='\", columnSet, \"' />\") + \"\\n                    \" + HelperSoap_1.joinArray(\"<order attribute='\", orderBy, \"' />\") + \"\\n                <filter>\\n                    \" + HelperSoap_1.joinConditionPair(attributes, values) + \"\\n                </filter>\\n            </entity>\\n        \";\n\t        return this.Fetch(xml, false, callback);\n\t    };\n\t    ;\n\t    /**\n\t     * Sends synchronous/asynchronous request to do a queryAll request. This is to return all records (>5k+).\n\t     * Consider Performance impact when using this method.\n\t     *\n\t     * @static\n\t     * @param {*} queryOptions A JavaScript Object with properties corresponding to the queryByAttribute Criteria\n\t     * that are valid for queryByAttribute operations.\n\t     * queryOptions.entityName is a string represents the name of the entity\n\t     * queryOptions.attributes is a array represents the attributes of the entity to query\n\t     * queryOptions.values is a array represents the values of the attributes to query\n\t     * queryOptions.columnSet is a array represents the attributes of the entity to return\n\t     * queryOptions.orderBy is a array represents the order conditions of the results\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     */\n\t    Soap.QueryAll = function (queryOptions, callback) {\n\t        var entityName = queryOptions.entityName;\n\t        var attributes = queryOptions.attributes;\n\t        var values = queryOptions.values;\n\t        var columnSet = queryOptions.columnSet;\n\t        var orderBy = queryOptions.orderBy || '';\n\t        attributes = HelperSoap_1.isArray(attributes) ? attributes : [attributes];\n\t        values = HelperSoap_1.isArray(values) ? values : [values];\n\t        orderBy = (!!orderBy && HelperSoap_1.isArray(orderBy)) ? orderBy : [orderBy];\n\t        columnSet = (!!columnSet && HelperSoap_1.isArray(columnSet)) ? columnSet : [columnSet];\n\t        var fetchCore = \"\\n            <entity name=\\\"\" + entityName + \"\\\">\\n                    \" + HelperSoap_1.joinArray(\"<attribute name='\", columnSet, \"' />\") + \"\\n                    \" + HelperSoap_1.joinArray(\"<order attribute='\", orderBy, \"' />\") + \"\\n                <filter>\\n                        \" + HelperSoap_1.joinConditionPair(attributes, values) + \"\\n                </filter>\\n            </entity>\\n        \";\n\t        return this.Fetch(fetchCore, true, callback);\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to setState of a record\n\t     *\n\t     * @static\n\t     * @param {string} entityName A JavaScript String corresponding to the Schema name of\n\t     * entity that is used for setState operations.\n\t     * @param {string} id A JavaScript String corresponding to the GUID of\n\t     * entity that is used for setState operations\n\t     * @param {number} stateCode A JavaScript Integer corresponding to the value of\n\t     * entity state that is used for setState operations\n\t     * @param {number} statusCode A JavaScript Integer corresponding to the value of\n\t     * entity status that is used for setState operations\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     */\n\t    Soap.SetState = function (entityName, id, stateCode, statusCode, callback) {\n\t        var request = \"\\n            <request i:type=\\\"b:SetStateRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\" xmlns:b=\\\"http://schemas.microsoft.com/crm/2011/Contracts\\\">\\n                <a:Parameters xmlns:c=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <c:key>EntityMoniker</c:key>\\n                        <c:value i:type=\\\"a:EntityReference\\\">\\n                            <a:Id>\" + HelperSoap_1.encodeValue(id) + \"</a:Id>\\n                            <a:LogicalName>\" + entityName + \"</a:LogicalName>\\n                            <a:Name i:nil=\\\"true\\\" />\\n                        </c:value>\\n                        </a:KeyValuePairOfstringanyType>\\n                        <a:KeyValuePairOfstringanyType>\\n                            <c:key>State</c:key>\\n                            <c:value i:type=\\\"a:OptionSetValue\\\">\\n                             <a:Value>\" + stateCode.toString() + \"</a:Value>\\n                            </c:value>\\n                        </a:KeyValuePairOfstringanyType>\\n                        <a:KeyValuePairOfstringanyType>\\n                            <c:key>Status</c:key>\\n                            <c:value i:type=\\\"a:OptionSetValue\\\">\\n                             <a:Value>\" + statusCode.toString() + \"</a:Value>\\n                            </c:value>\\n                        </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>SetState</a:RequestName>\\n            </request>\\n       \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var responseText = HelperSoap_1.selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n\t            var result = Helper_1.crmXmlDecode(responseText);\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to associate records\n\t     *\n\t     * @static\n\t     * @param {string} relationshipName A JavaScript String corresponding to the relationship name\n\t     * that is used for associate operations\n\t     * @param {string} targetEntityName A JavaScript String corresponding to the relationship name\n\t     * that is used for associate operations\n\t     * @param {string} targetId A JavaScript String corresponding to the GUID of the target entity\n\t     * that is used for associate operations\n\t     * @param {string} relatedEntityName A JavaScript String corresponding to the schema name of the related entity\n\t     * that is used for associate operations\n\t     * @param {Array<businessEntity>} relatedBusinessEntities A JavaScript Array corresponding to the collection of the related entities as BusinessEntity\n\t     * that is used for associate operations\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     * @returns {(void | any)} If sync -> results\n\t     */\n\t    Soap.Associate = function (relationshipName, targetEntityName, targetId, relatedEntityName, relatedBusinessEntities, callback) {\n\t        var relatedEntities = relatedBusinessEntities;\n\t        relatedEntities = HelperSoap_1.isArray(relatedEntities) ? relatedEntities : [relatedEntities];\n\t        var output = [];\n\t        for (var i = 0, ilength = relatedEntities.length; i < ilength; i++) {\n\t            if (relatedEntities[i].id !== \"\") {\n\t                output.push(\"<a:EntityReference>\", \"<a:Id>\", relatedEntities[i].id, \"</a:Id>\", \"<a:LogicalName>\", relatedEntityName, \"</a:LogicalName>\", \"<a:Name i:nil='true' />\", \"</a:EntityReference>\");\n\t            }\n\t        }\n\t        var relatedXml = output.join(\"\");\n\t        var request = \"\\n            <request i:type=\\\"a:AssociateRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>Target</b:key>\\n                        <b:value i:type=\\\"a:EntityReference\\\">\\n                            <a:Id>\" + HelperSoap_1.encodeValue(targetId) + \"</a:Id>\\n                            <a:LogicalName>\" + targetEntityName + \"</a:LogicalName>\\n                            <a:Name i:nil=\\\"true\\\" />\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>Relationship</b:key>\\n                        <b:value i:type=\\\"a:Relationship\\\">\\n                            <a:PrimaryEntityRole>Referenced</a:PrimaryEntityRole>\\n                            <a:SchemaName>\" + relationshipName + \"</a:SchemaName>\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                    <b:key>RelatedEntities</b:key>\\n                    <b:value i:type=\\\"a:EntityReferenceCollection\\\">\\n                        \" + relatedXml + \"\\n                    </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>Associate</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var responseText = HelperSoap_1.selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n\t            var result = Helper_1.crmXmlDecode(responseText);\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to disassociate records\n\t     *\n\t     * @static\n\t     * @param {string} relationshipName A JavaScript String corresponding to the relationship name\n\t     * that is used for associate operations\n\t     * @param {string} targetEntityName A JavaScript String corresponding to the relationship name\n\t     * that is used for associate operations\n\t     * @param {string} targetId A JavaScript String corresponding to the GUID of the target entity\n\t     * that is used for associate operations\n\t     * @param {string} relatedEntityName A JavaScript String corresponding to the schema name of the related entity\n\t     * that is used for associate operations\n\t     * @param {Array<businessEntity>} relatedBusinessEntities A JavaScript Array corresponding to the collection of the related entities as BusinessEntity\n\t     * that is used for associate operations\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     * @returns {(void | any)} If sync -> results\n\t     */\n\t    Soap.Disassociate = function (relationshipName, targetEntityName, targetId, relatedEntityName, relatedBusinessEntities, callback) {\n\t        var relatedEntities = relatedBusinessEntities;\n\t        relatedEntities = HelperSoap_1.isArray(relatedEntities) ? relatedEntities : [relatedEntities];\n\t        var output = [];\n\t        for (var i = 0, ilength = relatedEntities.length; i < ilength; i++) {\n\t            if (relatedEntities[i].id !== \"\") {\n\t                output.push(\"<a:EntityReference>\", \"<a:Id>\", relatedEntities[i].id, \"</a:Id>\", \"<a:LogicalName>\", relatedEntityName, \"</a:LogicalName>\", \"<a:Name i:nil='true' />\", \"</a:EntityReference>\");\n\t            }\n\t        }\n\t        var relatedXml = output.join(\"\");\n\t        var request = \"\\n            <request i:type=\\\"a:DisassociateRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>Target</b:key>\\n                        <b:value i:type=\\\"a:EntityReference\\\">\\n                            <a:Id>\" + HelperSoap_1.encodeValue(targetId) + \"</a:Id>\\n                            <a:LogicalName>\" + targetEntityName + \"</a:LogicalName>\\n                            <a:Name i:nil=\\\"true\\\" />\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>Relationship</b:key>\\n                        <b:value i:type=\\\"a:Relationship\\\">\\n                            <a:PrimaryEntityRole i:nil=\\\"true\\\" />\\n                            <a:SchemaName>\" + relationshipName + \"</a:SchemaName>\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                    <b:key>RelatedEntities</b:key>\\n                    <b:value i:type=\\\"a:EntityReferenceCollection\\\">\\n                        \" + relatedXml + \"\\n                    </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>Disassociate</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var responseText = HelperSoap_1.selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n\t            var result = Helper_1.crmXmlDecode(responseText);\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous request to retrieve the GUID of the current user\n\t     *\n\t     * @static\n\t     * @returns {string} (description)\n\t     */\n\t    Soap.GetCurrentUserId = function () {\n\t        var request = \"\\n            <request i:type=\\\"b:WhoAmIRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\" xmlns:b=\\\"http://schemas.microsoft.com/crm/2011/Contracts\\\">\\n                <a:Parameters xmlns:c=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\" />\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>WhoAmI</a:RequestName>\\n            </request>\\n        \";\n\t        var xmlDoc = HelperSoap_1.doRequest(request, \"Execute\");\n\t        return HelperSoap_1.getNodeText(HelperSoap_1.selectNodes(xmlDoc, \"//b:value\")[0]);\n\t    };\n\t    /**\n\t     * Sends synchronous request to retrieve the GUID of the current user's business unit\n\t     *\n\t     * @static\n\t     * @returns {string}\n\t     */\n\t    Soap.GetCurrentUserBusinessUnitId = function () {\n\t        var request = \"\\n            <request i:type=\\\"b:WhoAmIRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\" xmlns:b=\\\"http://schemas.microsoft.com/crm/2011/Contracts\\\">\\n                <a:Parameters xmlns:c=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\" />\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>WhoAmI</a:RequestName>\\n            </request>\\n        \";\n\t        var xmlDoc = HelperSoap_1.doRequest(request, \"Execute\");\n\t        return HelperSoap_1.getNodeText(HelperSoap_1.selectNodes(xmlDoc, \"//b:value\")[1]);\n\t    };\n\t    /**\n\t     * Sends synchronous request to retrieve the list of the current user's roles\n\t     *\n\t     * @static\n\t     * @returns {Array<string>} All roles of the current user\n\t     */\n\t    Soap.GetCurrentUserRoles = function () {\n\t        var xml = \"\\n            <fetch version=\\\"1.0\\\" output-format=\\\"xml-platform\\\" mapping=\\\"logical\\\" distinct=\\\"true\\\">\\n                <entity name=\\\"role\\\">\\n                <attribute name=\\\"name\\\" />\\n                <attribute name=\\\"businessunitid\\\" />\\n                <attribute name=\\\"roleid\\\" />\\n                <order attribute=\\\"name\\\" descending=\\\"false\\\" /> +\\n                <link-entity name=\\\"systemuserroles\\\" from=\\\"roleid\\\" to=\\\"roleid\\\" visible=\\\"false\\\" intersect=\\\"true\\\">\\n                    <link-entity name=\\\"systemuser\\\" from=\\\"systemuserid\\\" to=\\\"systemuserid\\\" alias=\\\"aa\\\">\\n                    <filter type=\\\"and\\\">\\n                        <condition attribute=\\\"systemuserid\\\" operator=\\\"eq-userid\\\" />\\n                    </filter>\\n                    </link-entity>\\n                </link-entity>\\n                </entity>\\n            </fetch>\\n        \";\n\t        var fetchResult = this.Fetch(xml);\n\t        var roles = [];\n\t        if (fetchResult !== null && typeof fetchResult != \"undefined\") {\n\t            for (var i = 0, ilength = fetchResult.length; i < ilength; i++) {\n\t                roles[i] = fetchResult[i].attributes[\"name\"].value;\n\t            }\n\t        }\n\t        return roles;\n\t    };\n\t    /**\n\t     * Sends synchronous request to check if the current user has certain roles\n\t     * Passes name of role as arguments. For example, IsCurrentUserInRole('System Administrator')\n\t     * Returns true or false\n\t     *\n\t     * @static\n\t     * @returns {boolean}\n\t     */\n\t    Soap.IsCurrentUserInRole = function () {\n\t        var roles = this.GetCurrentUserRoles();\n\t        for (var i = 0, ilength = roles.length; i < ilength; i++) {\n\t            for (var j = 0, jlength = arguments.length; j < jlength; j++) {\n\t                if (roles[i] === arguments[j]) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t        return false;\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to assign an existing record to a user / a team\n\t     *\n\t     * @static\n\t     * @param {string} targetEntityName A JavaScript String corresponding to the schema name of the target entity\n\t     * that is used for assign operations\n\t     * @param {string} targetId A JavaScript String corresponding to the GUID of the target entity\n\t     * that is used for assign operations\n\t     * @param {string} assigneeEntityName A JavaScript String corresponding to the schema name of the assignee entity\n\t     * that is used for assign operations\n\t     * @param {string} assigneeId A JavaScript String corresponding to the GUID of the assignee entity\n\t     * that is used for assign operations\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     */\n\t    Soap.Assign = function (targetEntityName, targetId, assigneeEntityName, assigneeId, callback) {\n\t        var request = \"\\n            <request i:type=\\\"b:AssignRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\" xmlns:b=\\\"http://schemas.microsoft.com/crm/2011/Contracts\\\">\\n                <a:Parameters xmlns:c=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                    <c:key>Target</c:key>\\n                    <c:value i:type=\\\"a:EntityReference\\\">\\n                        <a:Id>\" + HelperSoap_1.encodeValue(targetId) + \"</a:Id>\\n                        <a:LogicalName>\" + targetEntityName + \"</a:LogicalName>\\n                        <a:Name i:nil=\\\"true\\\" />\\n                    </c:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                    <c:key>Assignee</c:key>\\n                    <c:value i:type=\\\"a:EntityReference\\\">\\n                        <a:Id>\" + HelperSoap_1.encodeValue(assigneeId) + \"</a:Id>\\n                        <a:LogicalName>\" + assigneeEntityName + \"</a:LogicalName>\\n                        <a:Name i:nil=\\\"true\\\" />\\n                    </c:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>Assign</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var responseText = HelperSoap_1.selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n\t            var result = Helper_1.crmXmlDecode(responseText);\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to do a grantAccess request.\n\t     * Levels of Access Options are: AppendAccess, AppendToAccess, AssignAccess, CreateAccess, DeleteAccess, None, ReadAccess, ShareAccess, and * WriteAccess\n\t     *\n\t     * @static\n\t     * @param {*} accessOptions A JavaScript Object with properties corresponding to the grantAccess Criteria\n\t     * that are valid for grantAccess operations.\n\t     * accessOptions.targetEntityName is a string represents the name of the target entity\n\t     * accessOptions.targetEntityId is a string represents the GUID of the target entity\n\t     * accessOptions.principalEntityName is a string represents the name of the principal entity\n\t     * accessOptions.principalEntityId is a string represents the GUID of the principal entity\n\t     * accessOptions.accessRights is a array represents the access conditions of the results\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     */\n\t    Soap.GrantAccess = function (accessOptions, callback) {\n\t        var targetEntityName = accessOptions.targetEntityName;\n\t        var targetEntityId = accessOptions.targetEntityId;\n\t        var principalEntityName = accessOptions.principalEntityName;\n\t        var principalEntityId = accessOptions.principalEntityId;\n\t        var accessRights = accessOptions.accessRights;\n\t        accessRights = HelperSoap_1.isArray(accessRights) ? accessRights : [accessRights];\n\t        var accessRightString = \"\";\n\t        for (var i = 0, ilength = accessRights.length; i < ilength; i++) {\n\t            accessRightString += HelperSoap_1.encodeValue(accessRights[i]) + \" \";\n\t        }\n\t        var request = \"\\n            <request i:type=\\\"b:GrantAccessRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\" xmlns:b=\\\"http://schemas.microsoft.com/crm/2011/Contracts\\\">\\n                <a:Parameters xmlns:c=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                    <c:key>Target</c:key>\\n                    <c:value i:type=\\\"a:EntityReference\\\">\\n                        <a:Id>\" + HelperSoap_1.encodeValue(targetEntityId) + \"</a:Id>\\n                        <a:LogicalName>\" + targetEntityName + \"</a:LogicalName>\\n                        <a:Name i:nil=\\\"true\\\" />\\n                    </c:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                    <c:key>PrincipalAccess</c:key>\\n                    <c:value i:type=\\\"b:PrincipalAccess\\\">\\n                        <b:AccessMask>\" + accessRightString + \"</b:AccessMask>\\n                        <b:Principal>\\n                        <a:Id>\" + HelperSoap_1.encodeValue(principalEntityId) + \"</a:Id>\\n                        <a:LogicalName>\" + principalEntityName + \"</a:LogicalName>\\n                        <a:Name i:nil=\\\"true\\\" />\\n                        </b:Principal>\\n                    </c:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>GrantAccess</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var responseText = HelperSoap_1.selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n\t            var result = Helper_1.crmXmlDecode(responseText);\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to do a modifyAccess request.\n\t     * Levels of Access Options are: AppendAccess, AppendToAccess, AssignAccess, CreateAccess, DeleteAccess, None, ReadAccess, ShareAccess, and * WriteAccess\n\t     *\n\t     * @static\n\t     * @param {*} accessOptions A JavaScript Object with properties corresponding to the modifyAccess Criteria\n\t     * that are valid for modifyAccess operations.\n\t     * accessOptions.targetEntityName is a string represents the name of the target entity\n\t     * accessOptions.targetEntityId is a string represents the GUID of the target entity\n\t     * accessOptions.principalEntityName is a string represents the name of the principal entity\n\t     * accessOptions.principalEntityId is a string represents the GUID of the principal entity\n\t     * accessOptions.accessRights is a array represents the access conditions of the results\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     */\n\t    Soap.ModifyAccess = function (accessOptions, callback) {\n\t        var targetEntityName = accessOptions.targetEntityName;\n\t        var targetEntityId = accessOptions.targetEntityId;\n\t        var principalEntityName = accessOptions.principalEntityName;\n\t        var principalEntityId = accessOptions.principalEntityId;\n\t        var accessRights = accessOptions.accessRights;\n\t        accessRights = HelperSoap_1.isArray(accessRights) ? accessRights : [accessRights];\n\t        var accessRightString = \"\";\n\t        for (var i = 0, ilength = accessRights.length; i < ilength; i++) {\n\t            accessRightString += HelperSoap_1.encodeValue(accessRights[i]) + \" \";\n\t        }\n\t        var request = \"\\n            <request i:type=\\\"b:ModifyAccessRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\" xmlns:b=\\\"http://schemas.microsoft.com/crm/2011/Contracts\\\">\\n                <a:Parameters xmlns:c=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                    <c:key>Target</c:key>\\n                    <c:value i:type=\\\"a:EntityReference\\\">\\n                        <a:Id>\" + HelperSoap_1.encodeValue(targetEntityId) + \"</a:Id>\\n                        <a:LogicalName>\" + targetEntityName + \"</a:LogicalName>\\n                        <a:Name i:nil=\\\"true\\\" />\\n                    </c:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                    <c:key>PrincipalAccess</c:key>\\n                    <c:value i:type=\\\"b:PrincipalAccess\\\">\\n                        <b:AccessMask>\" + accessRightString + \"</b:AccessMask>\\n                        <b:Principal>\\n                        <a:Id>\" + HelperSoap_1.encodeValue(principalEntityId) + \"</a:Id>\\n                        <a:LogicalName>\" + principalEntityName + \"</a:LogicalName>\\n                        <a:Name i:nil=\\\"true\\\" />\\n                        </b:Principal>\\n                    </c:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>ModifyAccess</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var responseText = HelperSoap_1.selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n\t            var result = Helper_1.crmXmlDecode(responseText);\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to do a revokeAccess request\n\t     *\n\t     * @static\n\t     * @param {*} accessOptions A JavaScript Object with properties corresponding to the revokeAccess Criteria\n\t     * that are valid for revokeAccess operations.\n\t     * accessOptions.targetEntityName is a string represents the name of the target entity\n\t     * accessOptions.targetEntityId is a string represents the GUID of the target entity\n\t     * accessOptions.revokeeEntityName is a string represents the name of the revokee entity\n\t     * accessOptions.revokeeEntityId is a string represents the GUID of the revokee entity\n\t     * @param {Function} callback Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     */\n\t    Soap.RevokeAccess = function (accessOptions, callback) {\n\t        var targetEntityName = accessOptions.targetEntityName;\n\t        var targetEntityId = accessOptions.targetEntityId;\n\t        var revokeeEntityName = accessOptions.revokeeEntityName;\n\t        var revokeeEntityId = accessOptions.revokeeEntityId;\n\t        var request = \"\\n            <request i:type=\\\"b:RevokeAccessRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\" xmlns:b=\\\"http://schemas.microsoft.com/crm/2011/Contracts\\\">\\n                <a:Parameters xmlns:c=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                    <c:key>Target</c:key>\\n                    <c:value i:type=\\\"a:EntityReference\\\">\\n                        <a:Id>\" + HelperSoap_1.encodeValue(targetEntityId) + \"</a:Id>\\n                        <a:LogicalName>\" + targetEntityName + \"</a:LogicalName>\\n                        <a:Name i:nil=\\\"true\\\" />\\n                    </c:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                    <c:key>Revokee</c:key>\\n                    <c:value i:type=\\\"a:EntityReference\\\">\\n                        <a:Id>\" + HelperSoap_1.encodeValue(revokeeEntityId) + \"</a:Id>\\n                        <a:LogicalName>\" + revokeeEntityName + \"</a:LogicalName>\\n                        <a:Name i:nil=\\\"true\\\" />\\n                    </c:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>RevokeAccess</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var responseText = HelperSoap_1.selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n\t            var result = Helper_1.crmXmlDecode(responseText);\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends synchronous/asynchronous request to do a retrievePrincipalAccess request\n\t     *\n\t     * @static\n\t     * @param {*} accessOptions A JavaScript Object with properties corresponding to the retrievePrincipalAccess Criteria\n\t     * that are valid for retrievePrincipalAccess operations.\n\t     * accessOptions.targetEntityName is a string represents the name of the target entity\n\t     * accessOptions.targetEntityId is a string represents the GUID of the target entity\n\t     * accessOptions.principalEntityName is a string represents the name of the principal entity\n\t     * accessOptions.principalEntityId is a string represents the GUID of the principal entity\n\t     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n\t     */\n\t    Soap.RetrievePrincipalAccess = function (accessOptions, callback) {\n\t        var targetEntityName = accessOptions.targetEntityName;\n\t        var targetEntityId = accessOptions.targetEntityId;\n\t        var principalEntityName = accessOptions.principalEntityName;\n\t        var principalEntityId = accessOptions.principalEntityId;\n\t        var request = \"\\n            <request i:type='b:RetrievePrincipalAccessRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts' xmlns:b='http://schemas.microsoft.com/crm/2011/Contracts'>\\n                <a:Parameters xmlns:c='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>\\n                    <a:KeyValuePairOfstringanyType>\\n                    <c:key>Target</c:key>\\n                    <c:value i:type='a:EntityReference'>\\n                        <a:Id>\" + HelperSoap_1.encodeValue(targetEntityId) + \"</a:Id>\\n                        <a:LogicalName>\" + targetEntityName + \"</a:LogicalName>\\n                        <a:Name i:nil='true' />\\n                    </c:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                    <c:key>Principal</c:key>\\n                    <c:value i:type='a:EntityReference'>\\n                        <a:Id>\" + HelperSoap_1.encodeValue(principalEntityId) + \"</a:Id>\\n                        <a:LogicalName>\" + principalEntityName + \"</a:LogicalName>\\n                        <a:Name i:nil='true' />\\n                    </c:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil='true' />\\n                <a:RequestName>RetrievePrincipalAccess</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var result = HelperSoap_1.selectSingleNodeText(resultXml, \"//b:value\");\n\t            if (!async) {\n\t                return result;\n\t            }\n\t            else {\n\t                callback(result);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends an synchronous/asynchronous RetrieveAllEntitieMetadata Request to retrieve all entities metadata in the system\n\t     *\n\t     * @static\n\t     * @param {Array<string>} entityFilters The filter array available to filter which data is retrieved. Case Sensitive filters [Entity,Attributes,Privileges,Relationships]\n\t     * Include only those elements of the entity you want to retrieve in the array. Retrieving all parts of all entities may take significant time.\n\t     * @param {boolean} retrieveIfPublished Sets whether to retrieve the metadata that has not been published\n\t     * @param {Function} callback The function that will be passed through and be called by a successful response.\n\t     * This function also used as an indicator if the function is synchronous/asynchronous\n\t     * @returns {(void | any)} Entity Metadata Collection\n\t     */\n\t    Soap.RetrieveAllEntitiesMetadata = function (entityFilters, retrieveIfPublished, callback) {\n\t        entityFilters = HelperSoap_1.isArray(entityFilters) ? entityFilters : [entityFilters];\n\t        var entityFiltersString = \"\";\n\t        for (var iii = 0, templength = entityFilters.length; iii < templength; iii++) {\n\t            entityFiltersString += HelperSoap_1.encodeValue(entityFilters[iii]) + \" \";\n\t        }\n\t        var request = \"\\n            <request i:type=\\\"a:RetrieveAllEntitiesRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>EntityFilters</b:key>\\n                        <b:value i:type=\\\"c:EntityFilters\\\" xmlns:c=\\\"http://schemas.microsoft.com/xrm/2011/Metadata\\\">\\n                        \" + HelperSoap_1.encodeValue(entityFiltersString) + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>RetrieveAsIfPublished</b:key>\\n                        <b:value i:type=\\\"c:boolean\\\" xmlns:c=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n                        \" + HelperSoap_1.encodeValue(retrieveIfPublished.toString()) + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>RetrieveAllEntities</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var response = HelperSoap_1.selectNodes(resultXml, \"//c:EntityMetadata\");\n\t            var results = [];\n\t            for (var i = 0, ilength = response.length; i < ilength; i++) {\n\t                var a = HelperSoap_1.objectifyNode(response[i]);\n\t                a._type = \"EntityMetadata\";\n\t                results.push(a);\n\t            }\n\t            if (!async) {\n\t                return results;\n\t            }\n\t            else {\n\t                callback(results);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends an synchronous/asynchronous RetreiveEntityMetadata Request to retrieve a particular entity metadata in the system\n\t     *\n\t     * @static\n\t     * @param {string} entityFilters The filter string available to filter which data is retrieved. Case Sensitive filters [Entity,Attributes,Privileges,Relationships]\n\t     * Include only those elements of the entity you want to retrieve in the array. Retrieving all parts of all entities may take significant time\n\t     * @param {string} logicalName The string of the entity logical name\n\t     * @param {boolean} retrieveIfPublished Sets whether to retrieve the metadata that has not been published\n\t     * @param {Function} callback The function that will be passed through and be called by a successful response.\n\t     * This function also used as an indicator if the function is synchronous/asynchronous\n\t     * @returns {(void | any)} Entity Metadata\n\t     */\n\t    Soap.RetrieveEntityMetadata = function (entityFilters, logicalName, retrieveIfPublished, callback) {\n\t        entityFilters = HelperSoap_1.isArray(entityFilters) ? entityFilters : [entityFilters];\n\t        var entityFiltersString = \"\";\n\t        for (var iii = 0, templength = entityFilters.length; iii < templength; iii++) {\n\t            entityFiltersString += HelperSoap_1.encodeValue(entityFilters[iii]) + \" \";\n\t        }\n\t        var request = \"\\n            <request i:type=\\\"a:RetrieveEntityRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>EntityFilters</b:key>\\n                        <b:value i:type=\\\"c:EntityFilters\\\" xmlns:c=\\\"http://schemas.microsoft.com/xrm/2011/Metadata\\\">\\n                        \" + HelperSoap_1.encodeValue(entityFiltersString) + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>MetadataId</b:key>\\n                        <b:value i:type=\\\"c:guid\\\"  xmlns:c=\\\"http://schemas.microsoft.com/2003/10/Serialization/\\\">\\n                        \" + HelperSoap_1.encodeValue(\"00000000-0000-0000-0000-000000000000\") + \"\\n                        </b:value>\\\"\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>RetrieveAsIfPublished</b:key>\\n                        <b:value i:type=\\\"c:boolean\\\" xmlns:c=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n                        \" + HelperSoap_1.encodeValue(retrieveIfPublished.toString()) + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>LogicalName</b:key>\\n                        <b:value i:type=\\\"c:string\\\" xmlns:c=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n                        \" + HelperSoap_1.encodeValue(logicalName) + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>RetrieveEntity</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var response = HelperSoap_1.selectNodes(resultXml, \"//b:value\");\n\t            var results = [];\n\t            for (var i = 0, ilength = response.length; i < ilength; i++) {\n\t                var a = HelperSoap_1.objectifyNode(response[i]);\n\t                a._type = \"EntityMetadata\";\n\t                results.push(a);\n\t            }\n\t            if (!async) {\n\t                return results;\n\t            }\n\t            else {\n\t                callback(results);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    /**\n\t     * Sends an synchronous/asynchronous RetrieveAttributeMetadata Request to retrieve a particular entity's attribute metadata in the system\n\t     *\n\t     * @static\n\t     * @param {string} entityLogicalName The string of the entity logical name\n\t     * @param {string} attributeLogicalName The string of the entity's attribute logical name\n\t     * @param {boolean} retrieveIfPublished Sets whether to retrieve the metadata that has not been published\n\t     * @param {Function} callback The function that will be passed through and be called by a successful response.\n\t     * This function also used as an indicator if the function is synchronous/asynchronous\n\t     * @returns {(void | any)} Entity Metadata\n\t     */\n\t    Soap.RetrieveAttributeMetadata = function (entityLogicalName, attributeLogicalName, retrieveIfPublished, callback) {\n\t        var request = \"\\n            <request i:type=\\\"a:RetrieveAttributeRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\">\\n                <a:Parameters xmlns:b=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>EntityLogicalName</b:key>\\n                        <b:value i:type=\\\"c:string\\\" xmlns:c=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n                        \" + HelperSoap_1.encodeValue(entityLogicalName) + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>MetadataId</b:key>\\n                        <b:value i:type=\\\"ser:guid\\\"  xmlns:ser=\\\"http://schemas.microsoft.com/2003/10/Serialization/\\\">\\n                        \" + HelperSoap_1.encodeValue(\"00000000-0000-0000-0000-000000000000\") + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>RetrieveAsIfPublished</b:key>\\n                        <b:value i:type=\\\"c:boolean\\\" xmlns:c=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n                        \" + HelperSoap_1.encodeValue(retrieveIfPublished.toString()) + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                    <a:KeyValuePairOfstringanyType>\\n                        <b:key>LogicalName</b:key>\\n                        <b:value i:type=\\\"c:string\\\"   xmlns:c=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n                        \" + HelperSoap_1.encodeValue(attributeLogicalName) + \"\\n                        </b:value>\\n                    </a:KeyValuePairOfstringanyType>\\n                </a:Parameters>\\n                <a:RequestId i:nil=\\\"true\\\" />\\n                <a:RequestName>RetrieveAttribute</a:RequestName>\\n            </request>\\n        \";\n\t        var async = !!callback;\n\t        return HelperSoap_1.doRequest(request, \"Execute\", async, function (resultXml) {\n\t            var response = HelperSoap_1.selectNodes(resultXml, \"//b:value\");\n\t            var results = [];\n\t            for (var i = 0, ilength = response.length; i < ilength; i++) {\n\t                var a = HelperSoap_1.objectifyNode(response[i]);\n\t                results.push(a);\n\t            }\n\t            if (!async) {\n\t                return results;\n\t            }\n\t            else {\n\t                callback(results);\n\t            }\n\t            // ReSharper disable NotAllPathsReturnValue\n\t        });\n\t        // ReSharper restore NotAllPathsReturnValue\n\t    };\n\t    return Soap;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Soap;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** XrmServiceToolkit.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap fb5a5e18bd0403863ec3\n **/","/// <reference path=\"../typings/main.d.ts\" />\n\n/**\n* MSCRM 2015, 2013, 2011 Web Service Toolkit for JavaScript\n* @author Jaimie Ji\n* @author David Berry\n* @current version : 2.2.1\n\n* Credits:\n*   The idea of this library was inspired by Daniel Cai's CrmWebServiceToolkit.\n*   The idea of BusinessEntity was inspired by Daniel Cai && Ascentium CrmService JavaScript Library.\n*   The REST Endpoint functions were inspired by MSCRM 2011 SDK JavaScript code and various resources from CRM websites and forums. Some of them were just copies with minor modification.\n*   The Soap functions were inspired by Daniel Cai && Jamie Miley && Paul Way && Customer Effective.\n*   Additional thanks to all contributors of MSCRM and i have learned a lot from you all.\n* Date: February, 2012\n*\n* Special Thanks:\n*   JetBrains ReSharper Open License\n* Date: July, 2012\n*\n* What's new:\n**********************************************************************************************************\n*   Version: 1.1\n*   Date: April, 2012\n*       Dependency: JSON2\n*       New Function - XrmServiceToolkit.Soap.Assign\n*       New Function - XrmServiceToolkit.Soap.GrantAccess\n*       New Function - XrmServiceToolkit.Soap.ModifyAccess\n*       New Function - XrmServiceToolkit.Soap.GrantAccess\n*       New Function - XrmServiceToolkit.Soap.RetrievePrincipalAccess\n**********************************************************************************************************\n*   Version: 1.2\n*   Date: April, 2012\n*       Dependency: JSON2\n*       New Fix - Fix soaps functions to create/update/retrieve activities with Party List fields.\n**********************************************************************************************************\n*   Version: 1.3\n*   Date: July, 2012\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       New Feature: cross browser support. jQuery Integration.\n*       New Extension: A new category of functions to extend some functions:\n*          1. JQueryXrmDependentOptionSet: Create Configurable Dependent Option Set to utilize CRM 2011 web resource.\n*          2. JQueryXrmFieldTooltip: Create configurable tooltip for fields on CRM 2011 form\n*          3. JQueryXrmCustomFilterView: Create configurable ability to add custom filter view to crm 2011 lookup field on the form\n*          4. JQueryXrmFormatNotesControl: Format the notes control to allow insert, allow edit\n**********************************************************************************************************\n*   Version: 1.3.1\n*   Date: November, 2012\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       New Feature - A change of logic to increase performance when returning large number of records\n*       New Function - XrmServiceToolkit.Soap.QueryAll: Return all available records by query options (>5k+)\n*       New Fix - XrmServiceToolkit.Rest.RetrieveMultiple not returning records more than 50\n*       New Fix - XrmServiceToolkit.Soap.Business error when referring number fields like (int, double, float)\n*       New Fix - XrmServiceToolkit.Soap not handling error message properly\n**********************************************************************************************************\n*   Version: 1.3.2\n*   Date: January, 2013\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       New Fix - XrmServiceToolkit.Soap cross browser support to initialize soap service\n**********************************************************************************************************\n*   Version: 1.4.0\n*   Date: January, 2013\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       Feature: Add Cross Browser Support for RU12\n*       Tested Platform: IE9, IE10, Chrome Version 24.0.1312.56 m, Firefox 18.0.1\n**********************************************************************************************************\n*   Version: 1.4.1\n*   Date: April, 2013\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       Tested Platform: IE9, IE10, Chrome Version 26.0.1410.64 m, Firefox 20.0.1\n*       Feature: Add Cross Browser Support for RU12, RU13\n*       New Fix - XrmServiceToolkit.Common.AddNotification method updated for RU12, RU13, still compatible for RU11 below\n*       New Fix - XrmServiceToolkit.Soap.Fetch method did not format linked record correctly\n*       New Fix - XrmServiceToolkit.Soap.Retrieve method did not return partylist data for activity\n*       New Fix - Added manual conversion from String to Date conversion for cross browser\n*       New Fix - getServerUrl method is updated as getClientUrl to align with RU12 SDK method getClientUrl(), still compatible to support RU11 below\n*       New Function - getServerUrl private method is updated as getClientUrl to align with RU12 SDK method getClientUrl(), still compatible to support RU11 below\n*       New Function - XrmServiceToolkit.Soap.RetrieveAllEntitiesMetadata method is a method to return all metadata for all entities by the specified entity filters\n*       New Function - XrmServiceToolkit.Soap.RetrieveEntityMetadata method is a method to return the metadata for a certain entity by the specified entity filters\n*       New Function - XrmServiceToolkit.Soap.RetrieveAttributeMetadata method is a method to return the metadata for a certain entity's attribute\n**********************************************************************************************************\n*   Version: 1.4.2 (beta)\n*   Date: May, 2013\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       Tested Platform: IE10\n*       New Fix - XrmServiceToolkit.Soap.Fetch now takes an additional parameter, 'fetchAll', that when set to true will retrieve all pages of results\n*       New Behaviour - XrmServiceToolkit.Soap.Fetch works best when providing a FetchXML string starting with the \"entity\" node, because of the way paging works;\n*           It will still function with the traditional \"fetch\" node to start, but then the XML has to be parsed to select just the \"entity\" node, which adds some overhead.\n*       New Behaviour - XrmServiceToolkit fetch and queryall methods use a unified model, and some redundant code has been removed.  This allows better paging operations.\n*\n**********************************************************************************************************\n*   Version: 2.0.0 (beta)\n*   Date: October, 2013\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       ---NOTE---Due to the changes for CRM 2013, please use the attached version of JSON2 and jQuery\n*       Tested Platform: IE10, latest Chrome, latest FireFox\n*    Changes:\n*       New Behaviour - XrmServiceTookit.Soap.Fetch parameters change to work with asynchronous callback compared to 1.4.2 beta: XrmServiceToolkit.Soap.Fetch(fetchXml, fetchAll, callback)\n*       New Behaviour - XrmServiceTookit.Soap.AddNotification is working with CRM 2013 using the out-of-box functionality. Still support CRM 2011\n*       New Fix - XrmServiceToolkit.Common.GetObjectCodeType is now using metadata retrieval as a supported method\n*       New Fix - The included jQuery has a line changed at the bottom <window.jQuery = jQuery;> $ is removed to work with CRM 2013 form\n*   Beta Release for CRM 2013\n**********************************************************************************************************\n*   Version: 2.0.1 (beta)\n*   Date: April, 2014\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       ---NOTE---Due to the changes for CRM 2013, please use the attached version of JSON2 and jQuery\n*       Tested Platform: IE11, IE10, latest Chrome, latest FireFox\n*    Changes:\n*       New Behaviour - XrmServiceTookit.Soap.Fetch method will allow 'page' and 'count' parameter to limit the returned records.\n*       New Fix - XrmServiceToolkit.Soap.Fetch fix an error when passing difference formats of Fetch XML with/without '<fetch>..' statements\n*       New Fix - XrmServiceToolkit.Extension methods error when retrieving web resources\n*   Beta Release for CRM 2013\n**********************************************************************************************************\n*   Version: 2.1\n*   Date: September, 2014\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       ---NOTE---Due to the changes for CRM 2013, please use the attached version of JSON2 and jQuery\n*       Tested Platform: IE11, IE10, latest Chrome, latest FireFox\n*    Changes:\n*       Performance Refactor\n*       New Fix - XrmServiceToolkit.Common.DisableAllControlsInTab to support CRM2013 changes\n*   Beta Release for CRM 2013\n**********************************************************************************************************\n*   Version: 2.2\n*   Date: April, 2015\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       ---NOTE---Due to the changes for CRM 2013, please use the attached version of JSON2 and jQuery\n*       Tested Platform: IE11, IE10, latest Chrome, latest FireFox\n*    Changes:\n*       CRM 2015 release\n*       New Fix - Error Handling\n*       New Fix - XrmServiceToolkit.Soap.Fetch aggregate fix\n*       New Fix - XrmServiceToolkit.Soap.Fetch distinct support\n*       New Fix - Aliased Values Handling\n*   Stable Release for CRM 2013, CRM 2015\n**********************************************************************************************************\n*   Version: 2.2.1\n*   Date: May, 2015\n*       Dependency: JSON2, jQuery (latest or 1.7.2 above)\n*       ---NOTE---Due to the changes for CRM 2013, please use the attached version of JSON2 and jQuery\n*       Tested Platform: IE11, IE10, latest Chrome, latest FireFox\n*    Changes:\n*       CRM 2015 7.1 release\n*       New Fix - Added logic for EntityReference in SOAP for 7.1 changes\n*   Beta Release for CRM 2015 online Update 1\n**********************************************************************************************************\n*/\n\nexport {default as Rest} from \"./Rest\";\nexport {default as Soap} from \"./Soap\";\nexport {default as Extension} from \"./Extension\";\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/Index.ts\n **/","/**\n * Prompt an alert message\n *\n * @param {string} message Alert message text\n */\nexport function alertMessage(message: string): void{\n    (Xrm.Utility !== undefined && Xrm.Utility.alertDialog !== undefined) ? (<any>Xrm).Utility.alertDialog(message) : alert(message);\n}\n\n/**\n * Check if two guids are equal\n *\n * @export\n * @param {string} guid1 A string represents a guid\n * @param {string} guid2 A string represents a guid\n * @returns {boolean}\n */\nexport function guidsAreEqual(guid1: string, guid2: string): boolean{\n    let isEqual: boolean;\n    if (guid1 === null || guid2 === null || guid1 === undefined || guid2 === undefined) {\n        isEqual = false;\n    } else {\n        isEqual = guid1.replace(/[{}]/g, \"\").toLowerCase() === guid2.replace(/[{}]/g, \"\").toLowerCase();\n    }\n\n    return isEqual;\n}\n\n/**\n * Private function to the context object.\n *\n * @export\n * @returns {Xrm.Context}\n */\nexport function context(): Xrm.Context {\n    let oContext: Xrm.Context;\n    if (typeof window.GetGlobalContext !== \"undefined\") {\n        oContext = window.GetGlobalContext();\n    } else if (typeof GetGlobalContext !== \"undefined\") {\n        oContext = GetGlobalContext();\n    } else {\n        if (typeof Xrm !== \"undefined\") {\n            oContext = Xrm.Page.context;\n        } else if (typeof window.parent.Xrm !== \"undefined\") {\n            oContext = window.parent.Xrm.Page.context;\n        } else {\n            throw new Error(\"Context is not available.\");\n        }\n    }\n    return oContext;\n}\n\n /**\n  * Private function to return the server URL from the context\n  *\n  * @export\n  * @returns {string} Url of the organization\n  */\n export function getClientUrl() {\n    let serverUrl = typeof context().getClientUrl !== \"undefined\" ? context().getClientUrl() : (<any>context()).getServerUrl();\n    if (serverUrl.match(/\\/$/)) {\n        serverUrl = serverUrl.substring(0, serverUrl.length - 1);\n    }\n    return serverUrl;\n}\n\nexport function htmlEncode(s: string): string {\n    let buffer: string = \"\";\n    let hEncode: string = \"\";\n    if (s === null || s === \"\" || s === undefined) return s;\n    for (let count = 0, cnt = 0, slength = s.length; cnt < slength; cnt++) {\n        let c = s.charCodeAt(cnt);\n        if (c > 96 && c < 123 || c > 64 && c < 91 || c === 32 || c > 47 && c < 58 || c === 46 || c === 44 || c === 45 || c === 95){\n            buffer += String.fromCharCode(c);\n        } else {\n            buffer += \"&#\" + c + \";\";\n        }\n        if (++count === 500) {\n            hEncode += buffer; buffer = \"\"; count = 0;\n        }\n    }\n    if (buffer.length) hEncode += buffer;\n    return hEncode;\n }\n\nexport function innerSurrogateAmpersandWorkaround(s: string): string {\n    let buffer: string = \"\";\n    let c0: number;\n    let cnt: number = 0;\n    let slength: number = s.length;\n    for ( ; cnt < slength; cnt++) {\n        c0 = s.charCodeAt(cnt);\n        if (c0 >= 55296 && c0 <= 57343) {\n            if (cnt + 1 < s.length) {\n                let c1 = s.charCodeAt(cnt + 1);\n                if (c1 >= 56320 && c1 <= 57343) {\n                    buffer += \"CRMEntityReferenceOpen\" + ((c0 - 55296) * 1024 + (c1 & 1023) + 65536).toString(16) + \"CRMEntityReferenceClose\"; cnt++;\n                } else {\n                    buffer += String.fromCharCode(c0);\n                }\n            } else {\n                buffer += String.fromCharCode(c0);\n            }\n        } else {\n            buffer += String.fromCharCode(c0);\n        }\n    }\n    s = buffer;\n    buffer = \"\";\n    for (cnt = 0, slength = s.length; cnt < slength; cnt++) {\n        c0 = s.charCodeAt(cnt);\n        if (c0 >= 55296 && c0 <= 57343){\n            buffer += String.fromCharCode(65533);\n        } else {\n            buffer += String.fromCharCode(c0);\n        }\n    }\n    s = buffer;\n    s = htmlEncode(s);\n    s = s.replace(/CRMEntityReferenceOpen/g, \"&#x\");\n    s = s.replace(/CRMEntityReferenceClose/g, \";\");\n    return s;\n}\n\nexport function crmXmlEncode(s: string): string {\n    if (\"undefined\" === typeof s || \"unknown\" === typeof s || null === s){\n         return s;\n    } else if (typeof s !== \"string\") {\n         s = s.toString();\n        }\n    return innerSurrogateAmpersandWorkaround(s);\n}\n\nexport function crmXmlDecode(s: string): string {\n    if (typeof s !== \"string\") {\n        s = s.toString();\n    }\n    return s;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/Helper.ts\n **/","/**\n * Private function used to check whether required parameters are null or undefined\n *\n * @export\n * @param parameter The parameter to check\n * @param message The error message text to include when the error is thrown\n */\nexport function parameterCheck(parameter: any, message: string): void | Error {\n    if ((typeof parameter === \"undefined\") || parameter === null) {\n        throw new Error(message);\n    }\n}\n\n/**\n * Private function used to check whether required parameters are null or undefined\n *\n * @export\n * @param {*} parameter The string parameter to check\n * @param {string} message The error message text to include when the error is thrown\n */\nexport function stringParameterCheck(parameter: any, message: string): void | Error {\n    if (typeof parameter !== \"string\") {\n        throw new Error(message);\n    }\n}\n\n/**\n * Private function used to check whether required callback parameters are functions\n *\n * @export\n * @param {*} callbackParameter The callback parameter to check\n * @param {string} message The error message text to include when the error is thrown.\n */\nexport function callbackParameterCheck(callbackParameter: any, message: string): void | Error {\n    if (typeof callbackParameter !== \"function\") {\n        throw new Error(message);\n    }\n}\n\n/**\n * Private function used to check whether required parameters are null or undefined\n *\n * @export\n * @param {*} parameter The boolean parameter to check\n * @param {string} message The error message text to include when the error is thrown\n */\nexport function booleanParameterCheck(parameter: any, message: string): void | Error {\n    if (typeof parameter !== \"boolean\") {\n        throw new Error(message);\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/ParameterCheck.ts\n **/","/// <reference path=\"../typings/main.d.ts\" />\nimport {alertMessage, getClientUrl} from \"./Helper\";\n        // JQueryXrmFieldTooltip: jQueryXrmFieldTooltip,\n        // JQueryXrmDependentOptionSet: jQueryXrmDependentOptionSet,\n        // JQueryXrmCustomFilterView: jQueryXrmCustomFilterView,\n        // JQueryXrmFormatNotesControl: jQueryXrmFormatNotesControl\n\nexport default class Extension {\n    // jQuery Load Help function to add tooltip for attribute in CRM 2011. Unsupported because of the usage of DOM object edit.\n    //****************************************************\n\n    /**\n     * A generic configurable method to add tooltip to crm 2011 field.\n     *\n     * @param {string} filename A JavaScript String corresponding the name of the configuration web resource name in CRM 2011 instance\n     * @param {boolean} bDisplayImg A JavaScript boolean corresponding if display a help image for the tooltip\n     * @example\n     * JQueryLoadHelp('cm_xmlhelpfile', true);\n     */\n    static JQueryXrmFieldTooltip(filename: string, bDisplayImg: boolean): void {\n        /*\n        This function is used add tooltips to any field in CRM2011.\n\n        This function requires the following parameters:\n        filename :   name of the XML web resource\n        bDisplayImg: boolean to show/hide the help image (true/false)\n        Returns: nothing\n        Example:  jQueryLoadHelp('cm_xmlhelpfile', true);\n        Designed by: http://lambrite.com/?p=221\n        Adapted by Geron Profet (www.crmxpg.nl), Jaimie Ji\n        Modified by Jaimie Ji with jQuery and cross browser\n        */\n\n        if (Xrm.Page.ui.setFormNotification !== undefined) {\n            alertMessage(\"XrmServiceToolkit.Extension.JQueryXrmFieldTooltip is not supported in CRM2013.\\nPlease use the out of box functionality\");\n            return;\n        }\n\n        if (typeof jQuery === \"undefined\") {\n            let errorMessage = (\"jQuery is not loaded.\\nPlease ensure that jQuery is included\\n as web resource in the form load.\");\n            alertMessage(errorMessage);\n            return;\n        }\n\n        /**\n         * Appends a help tooltip to an attribute\n         *\n         * @param {string} entity Entityname\n         * @param {string} attr Attributename\n         * @param {string} txt Help description\n         */\n        function registerHelp(entity: string, attr: string, txt:string): void {\n            let obj = jQuery(\"#\" + attr + \"_c\").children(\":first\");\n            if (obj != null) {\n                let html = `\n                    <img id=\"img_${attr}\" src=\"/_imgs/ico/16_help.gif\" alt=\"${txt}\" width=\"16\" height=\"16\" /><div id=\"help_${attr}\" style=\"visibility: hidden; position: absolute;\">: ${txt}</div>\n                `;\n                jQuery(obj).append(html);\n                // 20110909 GP: added line to hide/show help image\n                jQuery(\"#img_\" + attr).css(\"display\", (bDisplayImg) ? \"inline\" : \"none\");\n            }\n        }\n\n        // ****************************************************\n        function parseHelpXml(data: any): void {\n            let entity = Xrm.Page.data.entity.getEntityName().toString().toLowerCase();\n            let entXml = jQuery(\"entity[name=\" + entity + \"]\", data);\n            jQuery(entXml).children().each(() => {\n                let attr = jQuery(this).attr(\"name\");\n                let txt = jQuery(this).find(\"shorthelp\").text();\n                registerHelp(entity, attr, txt);\n            });\n        }\n\n        jQuery.support.cors = true;\n\n        jQuery.ajax({\n            type: \"GET\",\n            url: getClientUrl() + \"/WebResources/\" + filename,\n            dataType: \"xml\",\n            success: parseHelpXml,\n            // ReSharper disable UnusedParameter\n            error: (xmlHttpRequest, textStatus, errorThrown) => {\n                // ReSharper restore UnusedParameter\n                alertMessage(\"Something is wrong to setup the tooltip for the fields. Please contact your administrator\");\n            }\n        }); // end Ajax\n    }\n\n    // Generic Dependent Option Set Function. Changed from CRM 2011 SDK example\n    /**\n     * A generic configurable method to configure dependent optionset for CRM 2011 instance\n     *\n     * @param {string} filename A JavaScript String corresponding the name of the configuration web resource name in CRM 2011 instance\n     */\n    static JQueryXrmDependentOptionSet(filename: string): void {\n        if (typeof jQuery === \"undefined\") {\n            alertMessage(\"jQuery is not loaded.\\nPlease ensure that jQuery is included\\n as web resource in the form load.\");\n            return;\n        }\n\n        // This is the function set on the OnChange event for\n        // parent fields.\n        // ReSharper disable DuplicatingLocalDeclaration\n        function filterDependentField(parentField: string, childField: string, jQueryXrmDependentOptionSet: Xrm.Page.OptionSetAttribute) {\n            // ReSharper restore DuplicatingLocalDeclaration\n            for (let depOptionSet in this.JQueryXrmDependentOptionSet.config) {\n                if (this.JQueryXrmDependentOptionSet.config.hasOwnProperty(depOptionSet)) {\n                    let dependentOptionSet = this.JQueryXrmDependentOptionSet.config[depOptionSet];\n                    /* Match the parameters to the correct dependent optionset mapping*/\n                    if ((dependentOptionSet.parent === parentField) && (dependentOptionSet.dependent === childField)) {\n                        /* Get references to the related fields*/\n                        let parent: Xrm.Page.OptionSetAttribute = <Xrm.Page.OptionSetAttribute>Xrm.Page.data.entity.attributes.get(parentField);\n                        let child: Xrm.Page.OptionSetAttribute = <Xrm.Page.OptionSetAttribute>Xrm.Page.data.entity.attributes.get(childField);\n\n                        let parentControl = Xrm.Page.getControl(parentField);\n                        let childControl = Xrm.Page.getControl(childField);\n                        /* Capture the current value of the child field*/\n                        let currentChildFieldValue = (<Xrm.Page.OptionSetAttribute>child).getValue();\n\n                        /* If the parent field is null the Child field can be set to null */\n                        let controls: Array<Xrm.Page.Control>;\n                        let ctrl: string;\n                        if (parent.getValue() === null) {\n                            child.setValue(null);\n                            child.setSubmitMode(\"always\");\n                            child.fireOnChange();\n\n                            // Any attribute may have any number of controls,\n                            // so disable each instance.\n                            controls = child.controls.get();\n                            for (ctrl in controls) {\n                                if (controls.hasOwnProperty(ctrl)) {\n                                    controls[ctrl].setDisabled(true);\n                                }\n                            }\n                            return;\n                        }\n\n                        for (let os in dependentOptionSet.options) {\n                            if (dependentOptionSet.options.hasOwnProperty(os)) {\n                                let options = dependentOptionSet.options[os];\n                                let optionsToShow = options.showOptions;\n                                /* Find the Options that corresponds to the value of the parent field. */\n                                if (parent.getValue().toString() === options.value.toString()) {\n                                    controls = child.controls.get(); /*Enable the field and set the options*/\n                                    for (ctrl in controls) {\n                                        if (controls.hasOwnProperty(ctrl)) {\n                                            controls[ctrl].setDisabled(false);\n                                            (<Xrm.Page.OptionSetControl>controls[ctrl]).clearOptions();\n\n                                            for (let option in optionsToShow) {\n                                                if (optionsToShow.hasOwnProperty(option)) {\n                                                    (<Xrm.Page.OptionSetControl>controls[ctrl]).addOption(optionsToShow[option]);\n                                                }\n                                            }\n                                        }\n                                    }\n                                    /*Check whether the current value is valid*/\n                                    let bCurrentValueIsValid = false;\n                                    let childFieldOptions = optionsToShow;\n\n                                    for (let validOptionIndex in childFieldOptions) {\n                                        if (childFieldOptions.hasOwnProperty(validOptionIndex)) {\n                                            let optionDataValue = childFieldOptions[validOptionIndex].value;\n\n                                            if (currentChildFieldValue === parseInt(optionDataValue)) {\n                                                bCurrentValueIsValid = true;\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    /*\n                            If the value is valid, set it.\n                            If not, set the child field to null\n                            */\n                                    if (bCurrentValueIsValid) {\n                                        child.setValue(currentChildFieldValue);\n                                    } else {\n                                        child.setValue(null);\n                                    }\n                                    child.setSubmitMode(\"always\");\n                                    child.fireOnChange();\n\n                                    if (parentControl.getDisabled() === true) {\n                                        childControl.setDisabled(true);\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /**\n         * Initialize optionsets\n         *\n         * @param {*} data (description)\n         */\n        function init(data: any): void {\n            let entity: string = Xrm.Page.data.entity.getEntityName().toString().toLowerCase();\n            let configWr: JQuery = jQuery(\"entity[name=\" + entity + \"]\", data);\n\n            // Convert the XML Data into a JScript object.\n            let parentFields: JQuery = configWr.children(\"ParentField\");\n            let jsConfig: Array<any> = [];\n            for (let i = 0, ilength = parentFields.length; i < ilength; i++) {\n                let node = parentFields[i];\n                let mapping: any = {};\n                mapping.parent = jQuery(node).attr(\"id\");\n                mapping.dependent = jQuery(node).children(\"DependentField:first\").attr(\"id\");\n                mapping.options = [];\n                let options = jQuery(node).children(\"Option\");\n                for (let a = 0, alength = options.length; a < alength; a++) {\n                    let option: any = {};\n                    option.value = jQuery(options[a]).attr(\"value\");\n                    option.showOptions = [];\n                    let optionsToShow = jQuery(options[a]).children(\"ShowOption\");\n                    for (let b = 0, blength = optionsToShow.length; b < blength; b++) {\n                        let optionToShow: any = {};\n                        optionToShow.value = jQuery(optionsToShow[b]).attr(\"value\");\n                        optionToShow.text = jQuery(optionsToShow[b]).attr(\"label\"); // Label is not used in the code.\n\n                        option.showOptions.push(optionToShow);\n                    }\n                    mapping.options.push(option);\n                }\n                jsConfig.push(mapping);\n            }\n            // Attach the configuration object to jQueryXrmDependentOptionSet\n            // so it will be available for the OnChange events.\n            this.JQueryXrmDependentOptionSet.config = jsConfig;\n\n            // Fire the OnChange event for the mapped optionset fields\n            // so that the dependent fields are filtered for the current values.\n            for (let depOptionSet in this.JQueryXrmDependentOptionSet.config) {\n                if (this.JQueryXrmDependentOptionSet.config.hasOwnProperty(depOptionSet)) {\n                    let parent = this.JQueryXrmDependentOptionSet.config[depOptionSet].parent;\n                    let child = this.JQueryXrmDependentOptionSet.config[depOptionSet].dependent;\n                    filterDependentField(parent, child, this.JQueryXrmDependentOptionSet);\n                }\n            }\n        }\n\n        jQuery.support.cors = true;\n\n        jQuery.ajax({\n            type: \"GET\",\n            url: getClientUrl() + \"/WebResources/\" + filename,\n            dataType: \"xml\",\n            success: init,\n            // ReSharper disable UnusedParameter\n            error: (xmlHttpRequest, textStatus, errorThrown) => {\n                // ReSharper restore UnusedParameter\n                alertMessage(\"Something is wrong to setup the dependent picklist. Please contact your administrator\");\n            }\n        }); // end Ajax\n    };\n\n    /**\n     * (A generic configurable method to add custom filter view to lookup field in crm 2011 instance\n     *\n     * @param {string} filename A JavaScript String corresponding the name of the configuration web resource name in CRM 2011 instance\n     */\n    static JQueryXrmCustomFilterView(filename: string): void {\n        if (typeof jQuery === \"undefined\") {\n            alertMessage(\"jQuery is not loaded.\\nPlease ensure that jQuery is included\\n as web resource in the form load.\");\n            return;\n        }\n\n        function setCustomFilterView(target: string, entityName: string, viewName: string, fetchXml: string, layoutXml: string): void {\n            // use randomly generated GUID Id for our new view\n            let viewId: string = \"{1DFB2B35-B07C-44D1-868D-258DEEAB88E2}\";\n\n            // add the Custom View to the indicated [lookupFieldName] Control\n            Xrm.Page.getControl<Xrm.Page.LookupControl>(target).addCustomView(viewId, entityName, viewName, fetchXml, layoutXml, true);\n        }\n\n        function xmlToString(responseXml: Node): string {\n            let xmlString = \"\";\n            try {\n                if (responseXml != null) {\n                    if (typeof XMLSerializer !== \"undefined\" && typeof (<any>responseXml).xml === \"undefined\") {\n                        // ReSharper disable InconsistentNaming\n                        xmlString = (new XMLSerializer()).serializeToString(responseXml);\n                        // ReSharper restore InconsistentNaming\n                    } else {\n                        if (typeof (<any>responseXml).xml !== \"undefined\") {\n                            xmlString = responseXml.xml;\n                        }\n                        else if (typeof (<any>responseXml)[0].xml !== \"undefined\") {\n                            xmlString = (<any>responseXml)[0].xml;\n                        }\n\n                    }\n                }\n            } catch (e) {\n                alertMessage(\"Cannot convert the XML to a string.\");\n            }\n            return xmlString;\n        }\n\n        function init(data: any): void {\n            let entity: string = Xrm.Page.data.entity.getEntityName().toString().toLowerCase();\n            let configWr: JQuery = jQuery(\"entity[name=\" + entity + \"]\", data);\n\n            // Convert the XML Data into a JScript object.\n            let targetFields = configWr.children(\"TargetField\");\n            let jsConfig: Array<any> = [];\n            for (let i = 0, ilength = targetFields.length; i < ilength; i++) {\n                let node: JQuery = targetFields[i];\n                let mapping: any = {};\n                mapping.target = jQuery(node).attr(\"id\");\n                mapping.entityName = jQuery(node).attr(\"viewentity\");\n                mapping.viewName = jQuery(node).attr(\"viewname\");\n                mapping.dynamic = jQuery(node).children(\"dynamic\").children();\n                mapping.fetchXml = xmlToString(jQuery(node).children(\"fetch\"));\n                mapping.layoutXml = xmlToString(jQuery(node).children(\"grid\"));\n\n                jsConfig.push(mapping);\n            }\n            // Attach the configuration object to JQueryCustomFilterView\n            // so it will be available for the OnChange events.\n            this.JQueryXrmCustomFilterView.config = jsConfig;\n\n            // Fire the OnChange event for the mapped fields\n            // so that the lookup dialog are changed with the filtered view for the current values.\n            for (let customFilterView in this.JQueryXrmCustomFilterView.config) {\n                if (this.JQueryXrmCustomFilterView.config.hasOwnProperty(customFilterView)) {\n                    let target = this.JQueryXrmCustomFilterView.config[customFilterView].target;\n                    let entityName = this.JQueryXrmCustomFilterView.config[customFilterView].entityName;\n                    let viewName = this.JQueryXrmCustomFilterView.config[customFilterView].viewName;\n                    let dynamic = this.JQueryXrmCustomFilterView.config[customFilterView].dynamic;\n                    let fetchXml = this.JQueryXrmCustomFilterView.config[customFilterView].fetchXml;\n                    let layoutXml = this.JQueryXrmCustomFilterView.config[customFilterView].layoutXml;\n\n                    // TODO: Adding logics for various field and conditions. More tests required.\n                    if (dynamic != null) {\n                        for (let a = 0, alength = dynamic.length; a < alength; a++) {\n                            let dynamicControlType = Xrm.Page.getControl(jQuery(dynamic).attr(\"name\")).getControlType();\n                            let fieldValueType = jQuery(dynamic).attr(\"fieldvaluetype\"); // for optionset, name might be used to filter\n                            if ((<any>Xrm).Page.getAttribute(jQuery(dynamic).attr(\"name\")).getValue() === null) {\n                                alertMessage(jQuery(dynamic).attr(\"name\") + \" does not have a value. Please put validation logic on the field change to call this function. Only use XrmServiceToolkit.Extension.JQueryXrmCustomFilterView when the field has a value.\");\n                                return;\n                            }\n                            let dynamicValue: any = null;\n                            switch (dynamicControlType) {\n                            case \"standard\":\n                                dynamicValue = (<any>Xrm).Page.getAttribute(jQuery(dynamic).attr(\"name\")).getValue();\n                                break;\n                            case \"optionset\":\n                                dynamicValue = (fieldValueType != null && fieldValueType === \"label\") ? (<any>Xrm).Page.getAttribute(jQuery(dynamic).attr(\"name\")).getSelectionOption().text : (<any>Xrm).Page.getAttribute(jQuery(dynamic).attr(\"name\")).getValue();\n                                break;\n                            case \"lookup\":\n                                dynamicValue = (fieldValueType != null && fieldValueType === \"name\") ? (<any>Xrm).Page.getAttribute(jQuery(dynamic).attr(\"name\")).getValue()[0].name : (<any>Xrm).Page.getAttribute(jQuery(dynamic).attr(\"name\")).getValue()[0].id;\n                                break;\n                            default:\n                                alertMessage(jQuery(dynamic).attr(\"name\") + \" is not supported for filter lookup view. Please change the configuration.\");\n                                break;\n                            }\n\n                            let operator = jQuery(dynamic).attr(\"operator\");\n                            if (operator === null) {\n                                alertMessage(\"operator is missing in the configuration file. Please fix the issue\");\n                                return;\n                            }\n                            let dynamicString = jQuery(dynamic).attr(\"fetchnote\");\n                            switch (operator.toLowerCase()) {\n                            case \"contains\":\n                            case \"does not contain\":\n                                dynamicValue = \"%\" + dynamicValue + \"%\";\n                                break;\n                            case \"begins with\":\n                            case \"does not begin with\":\n                                dynamicValue = dynamicValue + \"%\";\n                                break;\n                            case \"ends with\":\n                            case \"does not end with\":\n                                dynamicValue = \"%\" + dynamicValue;\n                                break;\n                            default:\n                                break;\n                            }\n\n                            fetchXml = fetchXml.replace(dynamicString, dynamicValue);\n                        }\n                    }\n\n                    // replace the values if required\n                    setCustomFilterView(target, entityName, viewName, fetchXml, layoutXml);\n                }\n            }\n        }\n\n        jQuery.support.cors = true;\n\n        jQuery.ajax({\n            type: \"GET\",\n            url: getClientUrl() + \"/WebResources/\" + filename,\n            dataType: \"xml\",\n            success: init,\n            // ReSharper disable UnusedParameter\n            error: (xmlHttpRequest, textStatus, errorThrown) => {\n                // ReSharper restore UnusedParameter\n                alertMessage(\"Something is wrong to setup the custom filter view. Please contact your administrator\");\n            }\n        }); // end Ajax\n\n    };\n\n    // Disable or Enable to insert/edit note for entity. Unsupported because of DOM object edit\n    /**\n     * A generic configurable method to format the note control in crm 2011 instance\n     *\n     * @param {boolean} allowInsert A JavaScript boolean to format if the note control allow insert\n     * @param {boolean} allowEdit A JavaScript boolean to format if the note control allow edit\n     */\n    static JQueryXrmFormatNotesControl(allowInsert: boolean, allowEdit: boolean): void {\n        if (Xrm.Page.ui.setFormNotification !== undefined) {\n            alertMessage(\"XrmServiceToolkit.Extension.JQueryXrmFormatNotesControl is not supported in CRM2013\");\n            return;\n        }\n\n        if (typeof jQuery === \"undefined\") {\n            alertMessage(\"jQuery is not loaded.\\nPlease ensure that jQuery is included\\n as web resource in the form load.\");\n            return;\n        }\n\n        jQuery.support.cors = true;\n\n        let notescontrol = jQuery(\"#notescontrol\");\n        if (notescontrol === null || notescontrol === undefined) return;\n        let url = notescontrol.attr(\"url\");\n        if (url != null) {\n            if (!allowInsert) {\n                url = url.replace(\"EnableInsert=true\", \"EnableInsert=false\");\n            } else if (!allowEdit) {\n                url = url.replace(\"EnableInlineEdit=true\", \"EnableInlineEdit=false\");\n            }\n            notescontrol.attr(\"url\", url);\n        } else {\n            let src = notescontrol.attr(\"src\");\n            if (src != null) {\n                if (!allowInsert) {\n                    src = src.replace(\"EnableInsert=true\", \"EnableInsert=false\");\n                } else if (!allowEdit) {\n                    src = src.replace(\"EnableInlineEdit=true\", \"EnableInlineEdit=false\");\n                }\n                notescontrol.attr(\"src\", src);\n            }\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/Extension.ts\n **/","import {getClientUrl, alertMessage, htmlEncode} from \"./Helper\";\nimport {parameterCheck} from \"./ParameterCheck\";\n\n/**\n * Private function to return the path to the REST endpoint.\n *\n * @export\n * @returns String of the OrganizationData Service\n */\nexport function oDataPath() {\n    return getClientUrl() + \"/XRMServices/2011/OrganizationData.svc/\";\n}\n\n/**\n * Private function return an Error object to the errorCallback\n *\n * @export\n * @param {XMLHttpRequest} req The XMLHttpRequest response that returned an error.\n */\nexport function errorHandler(req: XMLHttpRequest) {\n    throw new Error(\"Error : \" +\n    req.status + \": \" +\n    req.statusText + \": \" +\n    JSON.parse(req.responseText).error.message.value);\n}\n\n/**\n * Private function to convert matching string values to Date objects.\n *\n * @export\n * @param {string} key The key used to identify the object property\n * @param {string} value The string value representing a date\n * @returns {(string | Date)}\n */\nexport function dateReviver(key: string, value: string): string | Date {\n    let a: RegExpExecArray;\n    if (typeof value === \"string\") {\n        a = /Date\\(([-+]?\\d+)\\)/.exec(value);\n        if (a) {\n            return new Date(parseInt(value.replace(\"/Date(\", \"\").replace(\")/\", \"\"), 10));\n        }\n    }\n    return value;\n}\n\n/**\n * Get an instance of XMLHttpRequest for all browsers\n *\n * @export\n * @returns (description)\n */\nexport function getXhr(): XMLHttpRequest | ActiveXObject {\n    if (XMLHttpRequest) {\n        // Chrome, Firefox, IE7+, Opera, Safari\n        // ReSharper disable InconsistentNaming\n        return new XMLHttpRequest();\n        // ReSharper     restore InconsistentNaming\n    }\n    // IE6\n    try {\n        // The latest stable version. It has the best security, performance,\n        // reliability, and W3C conformance. Ships with Vista, and available\n        // with other OS's via downloads and updates.\n        return new ActiveXObject(\"MSXML2.XMLHTTP.6.0\");\n    } catch (e) {\n        try {\n            // The fallback.\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        } catch (e) {\n            alertMessage(\"This browser is not AJAX enabled.\");\n            return null;\n        }\n    }\n}\n\n/**\n * Perform request with settings\n *\n * @export\n * @param {*} settings Settings for the request\n */\nexport function performRequest(settings: any): void {\n    parameterCheck(settings, \"The value passed to the performRequest function settings parameter is null or undefined.\");\n    let request: XMLHttpRequest = <XMLHttpRequest>getXhr();\n    request.open(settings.type, settings.url, settings.async);\n    request.setRequestHeader(\"Accept\", \"application/json\");\n    if (settings.action != null) {\n        request.setRequestHeader(\"X-HTTP-Method\", settings.action);\n    }\n    request.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n    if (settings.async) {\n        request.onreadystatechange = () => {\n            if (request.readyState === 4 /*Complete*/) {\n                // Status 201 is for create, status 204/1223 for link and delete.\n                // There appears to be an issue where IE maps the 204 status to 1223\n                // when no content is returned.\n                if (request.status === 204 || request.status === 1223 || request.status === 201) {\n                    settings.success(request);\n                } else {\n                    // Failure\n                    if (settings.error) {\n                        settings.error(errorHandler(request));\n                    } else {\n                        errorHandler(request);\n                    }\n                }\n            }\n        };\n\n        if (typeof settings.data === \"undefined\") {\n            request.send();\n        } else {\n            request.send(settings.data);\n        }\n    } else {\n        if (typeof settings.data === \"undefined\") {\n            request.send();\n        } else {\n            request.send(settings.data);\n        }\n\n        if (request.status === 204 || request.status === 1223 || request.status === 201) {\n            settings.success(request);\n        } else {\n            // Failure\n            if (settings.error) {\n                settings.error(errorHandler(request));\n            } else {\n                errorHandler(request);\n            }\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/HelperRest.ts\n **/","/// <reference path=\"../typings/main.d.ts\" />\n\nimport {crmXmlEncode, alertMessage, getClientUrl} from \"./Helper\";\n\nexport function padNumber(s: number, len?: number): string {\n    len = len || 2;\n\n    let str = s.toString();\n    while (str.length < len) {\n        str = \"0\" + str;\n    }\n    return str;\n}\n\nexport function encodeDate(dateTime: Date): string {\n    return dateTime.getFullYear() + \"-\" +\n        padNumber(dateTime.getMonth() + 1) + \"-\" +\n        padNumber(dateTime.getDate()) + \"T\" +\n        padNumber(dateTime.getHours()) + \":\" +\n        padNumber(dateTime.getMinutes()) + \":\" +\n        padNumber(dateTime.getSeconds());\n}\n\nexport function encodeValue(value: any): any {\n    // Handle GUIDs wrapped in braces\n    if (typeof value == typeof \"\" && value.slice(0, 1) === \"{\" && value.slice(-1) === \"}\") {\n        value = value.slice(1, -1);\n    }\n\n    // ReSharper disable QualifiedExpressionMaybeNull\n    return (typeof value === \"object\" && value.getTime)\n    // ReSharper restore QualifiedExpressionMaybeNull\n            ? encodeDate(value)\n            : crmXmlEncode(value);\n}\n\nexport class xrmValue {\n    type: string;\n    value: string;\n\n    constructor(sType?: string, sValue?: any){\n        this.type = sType;\n        this.value = sValue;\n    }\n}\n\nexport class xrmEntityReference {\n    id: string;\n    logicalName: string;\n    name: string;\n    type: string;\n\n    constructor(gId?: string, sLogicalName?: string, sName?: string){\n        this.id = gId;\n        this.logicalName = sLogicalName;\n        this.name = sName;\n        this.type = 'EntityReference';\n    }\n}\n\nexport class xrmEntityCollection {\n    value: Array<any>;\n    type: string;\n\n    constructor(items?: Array<any>) {\n        this.value = items;\n        this.type = 'EntityCollection';\n    }\n}\n\nexport class xrmOptionSetValue {\n    value: number;\n    formattedValue: string;\n    type: string;\n\n    constructor(iValue?: number, sFormattedValue?: string ){\n        this.value = iValue;\n        this.formattedValue = sFormattedValue;\n        this.type = \"OptionSetValue\";\n    }\n}\n\n/**\n * A object represents a business entity for CRM 2011\n *\n * @export\n * @param {string} logicalName A String represents the name of the entity.\n * For example, \"contact\" means the business entity will be a contact entity\n * @param {string} id A String represents the id of the entity. If not passed, it will be auto populated as a empty guid string\n */\nexport class businessEntity {\n    id: string;\n    logicalName:string;\n    attributes: any;\n\n    constructor(logicalName?: string, id?: string){\n        this.id = (!id) ? \"00000000-0000-0000-0000-000000000000\" : id;\n        this.logicalName = logicalName;\n        this.attributes = Object.create(null);\n    }\n\n    /**\n    * Serialize a CRM Business Entity object to XML string in order to be passed to CRM Web Services.\n    * @return {String} The serialized XML string of CRM entity.\n    */\n    serialize() {\n        let xml: Array<string> = [\"<b:value i:type='a:Entity'>\"];\n        xml.push('<a:Attributes xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">');\n        let attributes = this.attributes;\n        for (let attributeName in attributes) {\n            if (attributes.hasOwnProperty(attributeName)) {\n                let attribute = attributes[attributeName];\n\n                xml.push(\"<a:KeyValuePairOfstringanyType>\");\n                xml.push(\"<b:key>\", attributeName, \"</b:key>\");\n\n                if (attribute === null || attribute.value === null) {\n                    xml.push(\"<b:value i:nil='true' />\");\n                } else {\n                    let sType = (!attribute.type)\n                        ? typeof attribute\n                        : crmXmlEncode(attribute.type);\n                    let value: any;\n                    let encodedValue: any;\n                    let id: string;\n                    let encodedId: string;\n                    let logicalName: string;\n                    let encodedLogicalName: string;\n                    switch (sType) {\n                    case \"OptionSetValue\":\n                        value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                        encodedValue = encodeValue(value);\n                        xml.push(\"<b:value i:type='a:OptionSetValue'>\");\n                        xml.push(\"<a:Value>\", <string>encodedValue, \"</a:Value>\", \"</b:value>\");\n                        break;\n\n                    case \"EntityCollection\":\n                        xml.push(\"<b:value i:type='a:EntityCollection'>\");\n                        xml.push(\"<a:Entities>\");\n                        value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                        let collections: any = isArray(value) ? value : [value];\n\n                        for (let i = 0, collectionLengh = collections.length; i < collectionLengh; i++) {\n                            let item = collections[i];\n                            id = (item.hasOwnProperty(\"id\")) ? item[\"id\"] : item;\n                            encodedId = encodeValue(id);\n                            logicalName = (item.hasOwnProperty(\"logicalName\")) ? item[\"logicalName\"] : item;\n                            encodedLogicalName = encodeValue(logicalName);\n                            xml.push(\"<a:Entity>\");\n                            xml.push(\"<a:Attributes>\");\n                            xml.push(\"<a:KeyValuePairOfstringanyType>\");\n                            xml.push(\"<b:key>partyid</b:key>\");\n                            xml.push(\"<b:value i:type='a:EntityReference'>\");\n                            xml.push(\"<a:Id>\", encodedId, \"</a:Id>\");\n                            if (Xrm.Utility.openQuickCreate !== undefined) {\n                                xml.push(\"<a:KeyAttributes xmlns:c='http://schemas.microsoft.com/xrm/7.1/Contracts' />\");\n                            }\n                            xml.push(\"<a:LogicalName>\", encodedLogicalName, \"</a:LogicalName>\");\n                            xml.push(\"<a:Name i:nil='true' />\");\n                            if (Xrm.Utility.openQuickCreate !== undefined) {\n                                xml.push(\"<a:RowVersion i:nil='true' />\");\n                            }\n                            xml.push(\"</b:value>\");\n                            xml.push(\"</a:KeyValuePairOfstringanyType>\");\n                            xml.push(\"</a:Attributes>\");\n                            xml.push(\"<a:EntityState i:nil='true' />\");\n                            xml.push(\"<a:FormattedValues />\");\n                            xml.push(\"<a:Id>00000000-0000-0000-0000-000000000000</a:Id>\");\n                            xml.push(\"<a:LogicalName>activityparty</a:LogicalName>\");\n                            xml.push(\"<a:RelatedEntities />\");\n                            xml.push(\"</a:Entity>\");\n                        }\n                        xml.push(\"</a:Entities>\");\n                        xml.push(\"<a:EntityName i:nil='true' />\");\n                        xml.push(\"<a:MinActiveRowVersion i:nil='true' />\");\n                        xml.push(\"<a:MoreRecords>false</a:MoreRecords>\");\n                        xml.push(\"<a:PagingCookie i:nil='true' />\");\n                        xml.push(\"<a:TotalRecordCount>0</a:TotalRecordCount>\");\n                        xml.push(\"<a:TotalRecordCountLimitExceeded>false</a:TotalRecordCountLimitExceeded>\");\n                        xml.push(\"</b:value>\");\n                        break;\n\n                    case \"EntityReference\":\n                        id = (attribute.hasOwnProperty(\"id\")) ? attribute[\"id\"] : attribute;\n                        encodedId = encodeValue(id);\n                        logicalName = (attribute.hasOwnProperty(\"logicalName\")) ? attribute[\"logicalName\"] : attribute;\n                        encodedLogicalName = encodeValue(logicalName);\n                        xml.push(\"<b:value i:type='a:EntityReference'>\");\n                        xml.push(\"<a:Id>\", encodedId, \"</a:Id>\");\n                        if (Xrm.Utility.openQuickCreate !== undefined) {\n                            xml.push(\"<a:KeyAttributes xmlns:c='http://schemas.microsoft.com/xrm/7.1/Contracts' />\");\n                        }\n                        xml.push(\"<a:LogicalName>\", encodedLogicalName, \"</a:LogicalName>\");\n                        xml.push(\"<a:Name i:nil='true' />\");\n                        if (Xrm.Utility.openQuickCreate !== undefined) {\n                            xml.push(\"<a:RowVersion i:nil='true' />\");\n                        }\n                        xml.push(\"</b:value>\");\n                        break;\n\n                    case \"Money\":\n                        value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                        encodedValue = encodeValue(value);\n                        xml.push(\"<b:value i:type='a:Money'>\");\n                        xml.push(\"<a:Value>\", <string>encodedValue, \"</a:Value>\", \"</b:value>\");\n                        break;\n\n                    case \"guid\":\n                        value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                        encodedValue = encodeValue(value);\n                        xml.push(\"<b:value i:type='c:guid' xmlns:c='http://schemas.microsoft.com/2003/10/Serialization/'>\");\n                        xml.push(<string>encodedValue, \"</b:value>\");\n                        break;\n\n                    case \"number\":\n                        value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                        encodedValue = encodeValue(value);\n                        let oType: string = (parseInt(encodedValue) === encodedValue) ? \"c:int\" : \"c:decimal\";\n                        xml.push(\"<b:value i:type='\", oType, \"' xmlns:c='http://www.w3.org/2001/XMLSchema'>\");\n                        xml.push(<string>encodedValue, '</b:value>');\n                        break;\n\n                    default:\n                        value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                        encodedValue = encodeValue(value);\n                        sType = (typeof value === \"object\" && value.getTime) ? \"dateTime\" : sType;\n                        xml.push(\"<b:value i:type='c:\", sType, \"' xmlns:c='http://www.w3.org/2001/XMLSchema'>\", <string>encodedValue, \"</b:value>\");\n                        break;\n                    }\n                }\n                xml.push(\"</a:KeyValuePairOfstringanyType>\");\n            }\n        }\n\n        xml.push(\"</a:Attributes><a:EntityState i:nil='true' />\");\n        xml.push(\"<a:FormattedValues xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic' />\");\n        xml.push(\"<a:Id>\", encodeValue(this.id), \"</a:Id>\");\n        xml.push(\"<a:LogicalName>\", this.logicalName, \"</a:LogicalName>\");\n        xml.push(\"<a:RelatedEntities xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic' />\");\n        xml.push(\"</b:value>\");\n        return xml.join(\"\");\n    }\n\n    /**\n    * Deserialize an XML node into a CRM Business Entity object. The XML node comes from CRM Web Service's response.\n    * @param {object} resultNode The XML node returned from CRM Web Service's Fetch, Retrieve, RetrieveMultiple messages.\n    */\n    deserialize(resultNode: Node) {\n        let obj = Object.create(null);\n        let resultNodes: NodeList = resultNode.childNodes;\n\n        for (let j = 0, lenj = resultNodes.length; j < lenj; j++) {\n            let sKey: string;\n            let parentNode: Node = resultNodes[j];\n            switch (parentNode.nodeName) {\n                case \"a:Attributes\":\n                    let attr: Node = parentNode;\n                    for (let k: number = 0, lenk: number = attr.childNodes.length; k < lenk; k++) {\n                        let tempParentNode: Node = attr.childNodes[k];\n                        // Establish the Key for the Attribute\n                        let tempParentNodeChildNodes: NodeList = tempParentNode.childNodes;\n                        sKey = getNodeText(tempParentNodeChildNodes[0]);\n\n                        let tempNode: Node = tempParentNodeChildNodes[1];\n                        // Determine the Type of Attribute value we should expect\n                        let sType = tempNode.attributes.getNamedItem(\"i:type\").value;\n\n                        // check for AliasedValue\n                        if (sType.replace('c:', '').replace('a:', '') === \"AliasedValue\") {\n                            // reset the type to the actual attribute type\n                            let subNode: Node = tempNode.childNodes[2];\n                            sType = subNode.attributes.getNamedItem(\"i:type\").value;\n\n                            //sKey = getNodeText(tempNode.childNodes[1]) + \".\" + getNodeText(tempNode.childNodes[0]);\n                            // reset the node to the AliasedValue value node\n                            tempNode = subNode;\n                        }\n\n                        let entRef: any;\n                        let entCv: any;\n                        switch (sType) {\n                            case \"a:OptionSetValue\":\n                                let entOsv: xrmOptionSetValue = new xrmOptionSetValue();\n                                entOsv.type = sType.replace('a:', '');\n                                entOsv.value = parseInt(getNodeText(tempNode));\n                                obj[sKey] = entOsv;\n                                break;\n\n                            case \"a:EntityReference\":\n                                entRef = new xrmEntityReference();\n                                entRef.type = sType.replace('a:', '');\n                                let oChildNodes = tempNode.childNodes;\n                                for (let i = 0, leni = oChildNodes.length; i < leni; i++) {\n                                    let entityReferenceNode = oChildNodes[i];\n\n                                    switch (entityReferenceNode.nodeName) {\n                                        case \"a:Id\":\n                                            entRef.id = getNodeText(entityReferenceNode);\n                                            break;\n                                        case \"a:LogicalName\":\n                                            entRef.logicalName = getNodeText(entityReferenceNode);\n                                            break;\n                                        case \"a:Name\":\n                                            entRef.name = getNodeText(entityReferenceNode);\n                                            break;\n                                    }\n                                }\n                                obj[sKey] = entRef;\n                                break;\n\n                            case \"a:EntityCollection\":\n                                entRef = new xrmEntityCollection();\n                                entRef.type = sType.replace('a:', '');\n\n                                //get all party items....\n                                let items: Array<xrmEntityReference> = [];\n                                let partyNodes = tempNode.childNodes;\n                                for (let y = 0, leny = partyNodes[0].childNodes.length; y < leny; y++) {\n                                    let itemNodes = tempParentNode.childNodes[1].childNodes[0].childNodes[y].childNodes[0].childNodes;\n                                    for (let z = 0, lenz = itemNodes.length; z < lenz; z++) {\n                                        let itemNodeChildNodes = itemNodes[z].childNodes;\n                                        let nodeText = getNodeText(itemNodeChildNodes[0]);\n                                        if (nodeText === \"partyid\") {\n                                            let itemRef = new xrmEntityReference();\n                                            let partyListNodes = itemNodeChildNodes[1].childNodes;\n                                            for (let pi = 0, lenpi = partyListNodes.length; pi < lenpi; pi++) {\n                                                let partyReferenceNode = partyListNodes[i];\n\n                                                switch (partyReferenceNode.nodeName) {\n                                                    case \"a:Id\":\n                                                        itemRef.id = getNodeText(partyReferenceNode);\n                                                        break;\n                                                    case \"a:LogicalName\":\n                                                        itemRef.logicalName = getNodeText(partyReferenceNode);\n                                                        break;\n                                                    case \"a:Name\":\n                                                        itemRef.name = getNodeText(partyReferenceNode);\n                                                        break;\n                                                }\n                                            }\n                                            items[y] = itemRef;\n                                        }\n                                    }\n                                }\n                                entRef.value = items;\n                                obj[sKey] = entRef;\n                                break;\n\n                            case \"a:Money\":\n                                entCv = new xrmValue();\n                                entCv.type = sType.replace('a:', '');\n                                entCv.value = parseFloat(getNodeText(tempNode));\n                                obj[sKey] = entCv;\n                                break;\n\n                            default:\n                                entCv = new xrmValue();\n                                entCv.type = sType.replace('c:', '').replace('a:', '');\n                                if (entCv.type === \"int\") {\n                                    entCv.value = parseInt(getNodeText(tempNode));\n                                }\n                                else if (entCv.type === \"decimal\" || entCv.type === \"double\") {\n                                    entCv.value = parseFloat(getNodeText(tempNode));\n                                }\n                                else if (entCv.type === \"dateTime\") {\n                                    entCv.value = stringToDate(getNodeText(tempNode));\n                                }\n                                else if (entCv.type === \"boolean\") {\n                                    entCv.value = (getNodeText(tempNode) === 'false') ? false : true;\n                                }\n                                else {\n                                    entCv.value = getNodeText(tempNode);\n                                }\n                                obj[sKey] = entCv;\n                                break;\n                        }\n                    }\n                    this.attributes = obj;\n                    break;\n\n                case \"a:Id\":\n                    this.id = getNodeText(parentNode);\n                    break;\n\n                case \"a:LogicalName\":\n                    this.logicalName = getNodeText(parentNode);\n                    break;\n\n                case \"a:FormattedValues\":\n                    let foVal = parentNode;\n\n                    for (let o = 0, leno = foVal.childNodes.length; o < leno; o++) {\n                        // Establish the Key, we are going to fill in the formatted value of the already found attribute\n                        let foNode = foVal.childNodes[o];\n                        sKey = getNodeText(foNode.childNodes[0]);\n                        this.attributes[sKey].formattedValue = getNodeText(foNode.childNodes[1]);\n                        if (isNaN(this.attributes[sKey].value) && this.attributes[sKey].type === \"dateTime\") {\n                            this.attributes[sKey].value = new Date(this.attributes[sKey].formattedValue);\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nexport function stringToDate(s: string): Date {\n    let b = s.split(/\\D/);\n    return new Date(Date.UTC(Number(b[0]), Number(b[1]) - 1, Number(b[2]), Number(b[3]), Number(b[4]), Number(b[5])));\n}\n\nexport function nsResolver(prefix: string): string {\n    const ns = new Map([\n        [\"s\", \"http://schemas.xmlsoap.org/soap/envelope/\"],\n        [\"a\", \"http://schemas.microsoft.com/xrm/2011/Contracts\"],\n        [\"i\", \"http://www.w3.org/2001/XMLSchema-instance\"],\n        [\"b\", \"http://schemas.datacontract.org/2004/07/System.Collections.Generic\"],\n        [\"c\", \"http://schemas.microsoft.com/xrm/2011/Metadata\"],\n        [\"ser\", \"http://schemas.microsoft.com/xrm/2011/Contracts/Services\"]\n    ]);\n\n    return ns.get(prefix) || null;\n};\n\nexport function isNodeNull(node: Node): boolean {\n    if (node == null){\n        return true;\n    }\n\n    if ((node.attributes.getNamedItem(\"i:nil\") != null) && (node.attributes.getNamedItem(\"i:nil\").value === \"true\")){\n        return true;\n    }\n\n    return false;\n}\n\nexport function selectNodes(node: any, xPathExpression: string): Array<string> {\n    if (typeof (node.selectNodes) != \"undefined\") {\n        return node.selectNodes(xPathExpression);\n    } else {\n        let output: Array<string> = [];\n        let xPathResults = node.evaluate(xPathExpression, node, nsResolver, XPathResult.ANY_TYPE, null);\n        let result = xPathResults.iterateNext();\n        while (result) {\n            output.push(result);\n            result = xPathResults.iterateNext();\n        }\n        return output;\n    }\n}\n\nexport function selectSingleNode(node: any, xpathExpr: string) {\n    if (typeof (node.selectSingleNode) != \"undefined\") {\n        return node.selectSingleNode(xpathExpr);\n    } else {\n        let xpe: XPathEvaluator = new XPathEvaluator();\n        let results = xpe.evaluate(xpathExpr, node, <any>nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n        return results.singleNodeValue;\n    }\n};\n\nexport function selectSingleNodeText(node: any, xpathExpr: string): string {\n    let x = selectSingleNode(node, xpathExpr);\n    if (isNodeNull(x)) {\n        return null;\n    }\n    if (typeof (x.text) != \"undefined\") {\n        return x.text;\n    } else {\n        return x.textContent;\n    }\n}\n\nexport function getNodeText(node: any): string {\n    if (typeof (node.text) != \"undefined\") {\n        return node.text;\n    } else {\n        return node.textContent;\n    }\n}\n\nexport function setSelectionNamespaces(doc: any): void {\n    const namespaces = [\n        \"xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'\",\n        \"xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'\",\n        \"xmlns:i='http://www.w3.org/2001/XMLSchema-instance'\",\n        \"xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic'\",\n        \"xmlns:c='http://schemas.microsoft.com/xrm/2011/Metadata'\",\n        \"xmlns:ser='http://schemas.microsoft.com/xrm/2011/Contracts/Services'\"\n    ];\n\n    doc.setProperty(\"SelectionNamespaces\", namespaces.join(\" \"));\n}\n\n/**\n * cross browser responseXml to return a XML object\n *\n * @export\n * @param {string} txt Source xml string\n * @returns {XMLDocument} Parsed XML Document\n */\nexport function xmlParser(txt: string): XMLDocument {\n    let xmlDoc: DOMParser | any = null;\n    try {\n        xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n        xmlDoc.async = false;\n        xmlDoc.loadXML(txt);\n    } catch (e) {\n        if (DOMParser) {\n            // ReSharper disable InconsistentNaming\n            let parser = new DOMParser();\n            // ReSharper restore InconsistentNaming\n            xmlDoc = parser.parseFromString(txt, \"text/xml\");\n        } else {\n            alertMessage(\"Cannot convert the XML string to a cross-browser XML object.\");\n        }\n    }\n\n    return xmlDoc;\n}\n\nexport function xmlToString(responseXml: Node): string {\n    var xmlString = \"\";\n    try {\n        if (responseXml != null) {\n            if (typeof XMLSerializer !== \"undefined\" && typeof (<any>responseXml).xml === \"undefined\") {\n                // ReSharper disable InconsistentNaming\n                xmlString = (new XMLSerializer()).serializeToString(responseXml);\n                // ReSharper restore InconsistentNaming\n            } else {\n                if (typeof (<any>responseXml).xml !== \"undefined\") {\n                    xmlString = (<any>responseXml).xml;\n                } else if (typeof (<any>responseXml)[0].xml !== \"undefined\") {\n                    xmlString = (<any>responseXml)[0].xml;\n                }\n            }\n        }\n    } catch (e) {\n        alertMessage(\"Cannot convert the XML to a string.\");\n    }\n    return xmlString;\n}\n\nexport function isArray (input: any): boolean {\n    return input.constructor.toString().indexOf(\"Array\") !== -1;\n}\n\nexport function getError(async: boolean, resp: any, internalCallback?: Function): Error {\n    //Error descriptions come from http://support.microsoft.com/kb/193625\n\n    if (resp.status === 12029) {\n        throw new Error(\"The attempt to connect to the server failed.\");\n    }\n\n    if (resp.status === 12007) {\n        throw new Error(\"The server name could not be resolved.\");\n    }\n\n    let faultXml = resp.responseXML;\n\n    let faultstring: string = null;\n    let errorCode: string = null;\n\n    let errorMessage = \"Unknown (unable to parse the fault)\";\n    if (faultXml !== null && typeof faultXml == \"object\") {\n        let bodyNode: Node = faultXml.firstChild.firstChild;\n\n        //Retrieve the fault node\n        for (let i = 0; i < bodyNode.childNodes.length; i++) {\n            let node: Node = bodyNode.childNodes[i];\n\n            //NOTE: This comparison does not handle the case where the XML namespace changes\n            if (\"s:Fault\" === node.nodeName) {\n                for (let j = 0; j < node.childNodes.length; j++) {\n                    let testNode: Node = node.childNodes[j];\n                    if (\"faultstring\" === testNode.nodeName) {\n                        faultstring = getNodeText(testNode);\n                    }\n                    if (\"detail\" === testNode.nodeName) {\n                        for (let k = 0; k < testNode.childNodes.length; k++) {\n                            let orgServiceFault: Node = testNode.childNodes[k];\n                            if (\"OrganizationServiceFault\" === orgServiceFault.nodeName) {\n                                for (let l = 0; l < orgServiceFault.childNodes.length; l++) {\n                                    var errorCodeNode: Node = orgServiceFault.childNodes[l];\n                                    if (\"ErrorCode\" === errorCodeNode.nodeName) {\n                                        errorCode = getNodeText(errorCodeNode);\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    if (errorCode != null && faultstring != null) {\n        errorMessage = \"Error Code:\" + errorCode + \" Message: \" + faultstring;\n    } else {\n        if (faultstring != null) {\n            errorMessage = faultstring;\n        }\n    }\n\n    if (async) {\n        return new Error(errorMessage);\n    } else {\n        throw new Error(errorMessage);\n    }\n}\n\nexport function doRequest (soapBody: string, requestType: string, async?: boolean, internalCallback?: Function): void {\n    async = async || false;\n\n    // Wrap the Soap Body in a soap:Envelope.\n    let soapXml =`\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <soap:Body>\n            <${requestType} xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">${soapBody}</${requestType}>\n        </soap:Body>\n    </soap:Envelope>\n    `;\n\n    let req = new XMLHttpRequest();\n    req.open(\"POST\", orgServicePath(), async);\n    req.setRequestHeader(\"Accept\", \"application/xml, text/xml, */*\");\n    req.setRequestHeader(\"Content-Type\", \"text/xml; charset=utf-8\");\n    req.setRequestHeader(\"SOAPAction\", `http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/${requestType}`);\n\n    //IE10\n    try {\n        req.responseType = 'msxml-document';\n    } catch (e) {\n    }\n\n    if (async) {\n        req.onreadystatechange = function () {\n            if (req.readyState === 4 /* complete */) {\n                req.onreadystatechange = null; //Addresses potential memory leak issue with IE\n                if (req.status === 200) { // \"OK\"\n                    let doc = req.responseXML;\n                    try {\n                        setSelectionNamespaces(doc);\n                    } catch (e) {\n                    }\n                    internalCallback(doc);\n                } else {\n                    getError(true, req);\n                }\n            }\n        };\n\n        req.send(soapXml);\n    } else {\n        req.send(soapXml);\n        if (req.status === 200) {\n            let doc = req.responseXML;\n            try {\n                setSelectionNamespaces(doc);\n            } catch (e) {\n            }\n            let result = doc;\n            return !!internalCallback ? internalCallback(result) : result;\n        } else {\n            getError(false, req);\n        }\n    }\n    // ReSharper disable NotAllPathsReturnValue\n}\n// ReSharper restore NotAllPathsReturnValue\n\n/**\n * Private function to return the path to the organization service\n *\n * @returns {string}\n */\nfunction orgServicePath(): string {\n    return `${getClientUrl()}/XRMServices/2011/Organization.svc/web`;\n}\n\nexport function fetchMore(fetchCoreXml: string, pageNumber: number, pageCookie: any, fetchResults: any): any {\n\n    //Build new query\n    let moreFetchXml = `\n        <fetch mapping=\"logical\" page=\"${pageNumber}\" count=\"5000\" paging-cookie=\"${pageCookie}\">\n            ${fetchCoreXml.replace(/\\\"/g, \"'\")}\n        </fetch>\n    `;\n\n    let moreMsgBody = `\n        <request i:type=\"a:RetrieveMultipleRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n            <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                <a:KeyValuePairOfstringanyType>\n                    <b:key>Query</b:key>\n                    <b:value i:type=\"a:FetchExpression\">\n                        <a:Query>${crmXmlEncode(moreFetchXml)}</a:Query>\n                    </b:value>\n                </a:KeyValuePairOfstringanyType>\n            </a:Parameters>\n            <a:RequestId i:nil=\"true\"/>\n            <a:RequestName>RetrieveMultiple</a:RequestName>\n        </request>\n    `;\n\n\n    return doRequest(moreMsgBody, \"Execute\", false, (moreResultXml: string) {\n        let newFetchResult: Node = selectSingleNode(moreResultXml, \"//a:Entities\");\n        let newMoreRecords: boolean = (selectSingleNodeText(moreResultXml, \"//a:MoreRecords\") === \"true\");\n\n        for (let iii = 0, nLength = newFetchResult.childNodes.length; iii < nLength; iii++) {\n            let entity = new businessEntity();\n\n            entity.deserialize(newFetchResult.childNodes[iii]);\n            fetchResults.push(entity);\n        }\n\n        if (newMoreRecords) {\n            pageNumber += 1;\n            let newPageCookie = selectSingleNodeText(moreResultXml, \"//a:PagingCookie\").replace(/\\\"/g, '\\'').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&quot;');\n\n            fetchMore(fetchCoreXml, pageNumber, newPageCookie, fetchResults);\n        } else {\n            return fetchResults;\n        }\n    });\n}\n\nexport function joinArray(prefix: string, array?: Array<any>, suffix?: string): string {\n    let output: Array<any> = [];\n    for (let i = 0, ilength = array.length; i < ilength; i++) {\n        if (array[i] !== \"\" && array[i] != undefined) {\n            output.push(prefix, array[i], suffix);\n        }\n    }\n    return output.join(\"\");\n}\n\nexport function joinConditionPair(attributes: Array<any>, values: Array<any>): string {\n    let output: Array<string> = [];\n    for (let i = 0, ilength = attributes.length; i < ilength; i++) {\n        if (attributes[i] !== \"\") {\n            let value1 = values[i];\n            if (typeof value1 == typeof []) {\n                output.push(\"<condition attribute='\", attributes[i], \"' operator='in' >\");\n\n                for (let valueIndex in value1) {\n                    if (value1.hasOwnProperty(valueIndex)) {\n                        let value = encodeValue(value1[valueIndex]);\n                        output.push(\"<value>\" + value + \"</value>\");\n                    }\n                }\n                output.push(\"</condition>\");\n            } else if (typeof value1 == typeof \"\") {\n                output.push(\"<condition attribute='\", attributes[i], \"' operator='eq' value='\", encodeValue(value1), \"' />\");\n            }\n        }\n    }\n    return output.join(\"\");\n}\n\n// Added in 1.4.1 for metadata retrieval\n// Inspired From Microsoft SDK code to retrieve Metadata using JavaScript\n// Copyright (C) Microsoft Corporation.  All rights reserved.\nlet arrayElements = [\n    \"Attributes\",\n    \"ManyToManyRelationships\",\n    \"ManyToOneRelationships\",\n    \"OneToManyRelationships\",\n    \"Privileges\",\n    \"LocalizedLabels\",\n    \"Options\",\n    \"Targets\"\n];\n\nexport function isMetadataArray(elementName: string): boolean {\n    for (var i = 0, ilength = arrayElements.length; i < ilength; i++) {\n        if (elementName === arrayElements[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function getNodeName(node: any): string {\n    if (typeof (node.baseName) !== \"undefined\") {\n        return node.baseName;\n    } else {\n        return node.localName;\n    }\n}\n\nexport function objectifyNode(node: Node): any {\n    //Check for null\n    if (node.attributes != null && node.attributes.length === 1) {\n        if (node.attributes.getNamedItem(\"i:nil\") != null && node.attributes.getNamedItem(\"i:nil\").nodeValue === \"true\") {\n            return null;\n        }\n    }\n\n    //Check if it is a value\n    if ((node.firstChild != null) && (node.firstChild.nodeType === 3)) {\n        let nodeName: string = getNodeName(node);\n\n        switch (nodeName) {\n            //Integer Values\n            case \"ActivityTypeMask\":\n            case \"ObjectTypeCode\":\n            case \"ColumnNumber\":\n            case \"DefaultFormValue\":\n            case \"MaxValue\":\n            case \"MinValue\":\n            case \"MaxLength\":\n            case \"Order\":\n            case \"Precision\":\n            case \"PrecisionSource\":\n            case \"LanguageCode\":\n                return parseInt(node.firstChild.nodeValue, 10);\n                // Boolean values\n            case \"AutoRouteToOwnerQueue\":\n            case \"CanBeChanged\":\n            case \"CanTriggerWorkflow\":\n            case \"IsActivity\":\n            case \"IsActivityParty\":\n            case \"IsAvailableOffline\":\n            case \"IsChildEntity\":\n            case \"IsCustomEntity\":\n            case \"IsCustomOptionSet\":\n            case \"IsDocumentManagementEnabled\":\n            case \"IsEnabledForCharts\":\n            case \"IsGlobal\":\n            case \"IsImportable\":\n            case \"IsIntersect\":\n            case \"IsManaged\":\n            case \"IsReadingPaneEnabled\":\n            case \"IsValidForAdvancedFind\":\n            case \"CanBeSecuredForCreate\":\n            case \"CanBeSecuredForRead\":\n            case \"CanBeSecuredForUpdate\":\n            case \"IsCustomAttribute\":\n            case \"IsPrimaryId\":\n            case \"IsPrimaryName\":\n            case \"IsSecured\":\n            case \"IsValidForCreate\":\n            case \"IsValidForRead\":\n            case \"IsValidForUpdate\":\n            case \"IsCustomRelationship\":\n            case \"CanBeBasic\":\n            case \"CanBeDeep\":\n            case \"CanBeGlobal\":\n            case \"CanBeLocal\":\n                return (node.firstChild.nodeValue === \"true\") ? true : false;\n                //OptionMetadata.Value and BooleanManagedProperty.Value and AttributeRequiredLevelManagedProperty.Value\n            case \"Value\":\n                //BooleanManagedProperty.Value\n                if ((node.firstChild.nodeValue === \"true\") || (node.firstChild.nodeValue === \"false\")) {\n                    return (node.firstChild.nodeValue === \"true\") ? true : false;\n                }\n                //AttributeRequiredLevelManagedProperty.Value\n                if (\n                        (node.firstChild.nodeValue === \"ApplicationRequired\") ||\n                        (node.firstChild.nodeValue === \"None\") ||\n                        (node.firstChild.nodeValue === \"Recommended\") ||\n                        (node.firstChild.nodeValue === \"SystemRequired\")\n                    ) {\n                    return node.firstChild.nodeValue;\n                } else {\n                    //OptionMetadata.Value\n                    return parseInt(node.firstChild.nodeValue, 10);\n                }\n                //String values\n            default:\n                return node.firstChild.nodeValue;\n        }\n    }\n\n    //Check if it is a known array\n    if (isMetadataArray(getNodeName(node))) {\n        let arrayValue: Array<string> = [];\n        for (let iii: number = 0, tempLength: number = node.childNodes.length; iii < tempLength; iii++) {\n            let objectTypeName: string;\n            if ((node.childNodes[iii].attributes != null) && (node.childNodes[iii].attributes.getNamedItem(\"i:type\") != null)) {\n                objectTypeName = node.childNodes[iii].attributes.getNamedItem(\"i:type\").nodeValue.split(\":\")[1];\n            } else {\n                objectTypeName = getNodeName(node.childNodes[iii]);\n            }\n\n            let b = objectifyNode(node.childNodes[iii]);\n            b._type = objectTypeName;\n            arrayValue.push(b);\n\n        }\n\n        return arrayValue;\n    }\n\n    //Null entity description labels are returned as <label/> - not using i:nil = true;\n    if (node.childNodes.length === 0) {\n        return null;\n    }\n\n    //Otherwise return an object\n    let c: any = {};\n    if (node.attributes.getNamedItem(\"i:type\") != null) {\n        c._type = node.attributes.getNamedItem(\"i:type\").nodeValue.split(\":\")[1];\n    }\n    \n    for (let i: number = 0, ilength: number = node.childNodes.length; i < ilength; i++) {\n        if (node.childNodes[i].nodeType === 3) {\n            c[getNodeName(node.childNodes[i])] = node.childNodes[i].nodeValue;\n        } else {\n            c[getNodeName(node.childNodes[i])] = objectifyNode(node.childNodes[i]);\n        }\n    }\n    return c;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/HelperSoap.ts\n **/","/// <reference path=\"../typings/main.d.ts\" />\n\nimport {oDataPath, dateReviver, errorHandler, getXhr, performRequest} from \"./HelperRest\";\nimport {parameterCheck, stringParameterCheck, booleanParameterCheck, callbackParameterCheck} from \"./ParameterCheck\";\n\n        // RetrieveMultiple: retrieveMultipleRecords,\n        // Associate: associateRecord,\n        // Disassociate: disassociateRecord\nexport default class Rest {\n    /**\n     * Sends synchronous/asynchronous request to create a new record\n     *\n     * @param {Object} object A JavaScript object with properties corresponding to the Schema name of\n     * entity attributes that are valid for create operations\n     * @param {string} type A String representing the name of the entity\n     * @param {Function} successCallback The function that will be passed through and be called by a successful * * response.\n     * This function can accept the returned record as a parameter.\n     * @param {Function} errorCallback The function that will be passed through and be called by a failed\n     * response.\n     * This function must accept an Error object as a parameter.\n     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n     * true means asynchronously. false means synchronously\n     */\n    static Create(object: Object, type: string, successCallback: Function, errorCallback: Function, async:boolean): void {\n        parameterCheck(object, \"XrmServiceToolkit.REST.createRecord requires the object parameter.\");\n        stringParameterCheck(type, \"XrmServiceToolkit.REST.createRecord requires the type parameter is a string.\");\n        callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.createRecord requires the successCallback is a function.\");\n        callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.createRecord requires the errorCallback is a function.\");\n        booleanParameterCheck(async, \"XrmServiceToolkit.REST.createRecord requires the async is a boolean.\");\n\n        let req: XMLHttpRequest = <XMLHttpRequest>getXhr();\n        req.open(\"POST\", oDataPath() + type, async);\n        req.setRequestHeader(\"Accept\", \"application/json\");\n        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n        if (async) {\n            req.onreadystatechange = () => {\n                if (req.readyState === 4 /* complete */) {\n                    req.onreadystatechange = null;\n                    if (req.status === 201) {\n                        successCallback(JSON.parse(req.responseText, dateReviver).d);\n                    } else {\n                        errorCallback(errorHandler(req));\n                    }\n                }\n            };\n            req.send(JSON.stringify(object));\n        } else {\n            req.send(JSON.stringify(object));\n            if (req.status === 201) {\n                successCallback(JSON.parse(req.responseText, dateReviver).d);\n            } else {\n                errorCallback(errorHandler(req));\n            }\n        }\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to retrieve a record\n     *\n     * @param {string} id A String representing the GUID value for the record to retrieve\n     * @param {string} type A String representing the name of the entity\n     * @param {string} select A String representing the $select OData System Query Option to control which\n     * attributes will be returned. This is a comma separated list of Attribute names that are valid for retrieve.\n     * If null all properties for the record will be returned\n     * @param {string} expand  String representing the $expand OData System Query Option value to control which\n     * related records are also returned. This is a comma separated list of of up to 6 entity relationship names\n     * If null no expanded related records will be returned.\n     * @param {Function} successCallback The function that will be passed through and be called by a successful response.\n     * This function must accept the returned record as a parameter.\n     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n     * This function must accept an Error object as a parameter.\n     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n     * true means asynchronously. false means synchronously\n     */\n    static Retrieve(id: string, type: string, select: string, expand: string, successCallback: Function, errorCallback: Function, async: boolean): void {\n        stringParameterCheck(id, \"XrmServiceToolkit.REST.retrieveRecord requires the id parameter is a string.\");\n        stringParameterCheck(type, \"XrmServiceToolkit.REST.retrieveRecord requires the type parameter is a string.\");\n        if (select != null)\n            stringParameterCheck(select, \"XrmServiceToolkit.REST.retrieveRecord requires the select parameter is a string.\");\n        if (expand != null)\n            stringParameterCheck(expand, \"XrmServiceToolkit.REST.retrieveRecord requires the expand parameter is a string.\");\n        callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.retrieveRecord requires the successCallback parameter is a function.\");\n        callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.retrieveRecord requires the errorCallback parameter is a function.\");\n        booleanParameterCheck(async, \"XrmServiceToolkit.REST.retrieveRecord requires the async parameter is a boolean.\");\n\n        let systemQueryOptions = \"\";\n\n        if (select != null || expand != null) {\n            systemQueryOptions = \"?\";\n            if (select != null) {\n                let selectString = \"$select=\" + select;\n                if (expand != null) {\n                    selectString = selectString + \",\" + expand;\n                }\n                systemQueryOptions = systemQueryOptions + selectString;\n            }\n            if (expand != null) {\n                systemQueryOptions = systemQueryOptions + \"&$expand=\" + expand;\n            }\n        }\n\n        let req: XMLHttpRequest = <XMLHttpRequest>getXhr();\n        req.open(\"GET\", oDataPath() + type + \"(guid'\" + id + \"')\" + systemQueryOptions, async);\n        req.setRequestHeader(\"Accept\", \"application/json\");\n        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n        if (async) {\n            req.onreadystatechange = () => {\n                if (req.readyState === 4 /* complete */) {\n                    if (req.status === 200) {\n                        successCallback(JSON.parse(req.responseText, dateReviver).d);\n                    } else {\n                        errorCallback(errorHandler(req));\n                    }\n                }\n            };\n            req.send();\n        } else {\n            req.send();\n            if (req.status === 200) {\n                successCallback(JSON.parse(req.responseText, dateReviver).d);\n            }\n            else {\n                errorCallback(errorHandler(req));\n            }\n        }\n\n    };\n\n    /**\n     * Sends synchronous/asynchronous request to update a record\n     *\n     * @param {string} id A String representing the GUID value for the record to update\n     * @param {Object} object A JavaScript object with properties corresponding to the Schema name of\n     * entity attributes that are valid for create operations\n     * @param {string} type A String representing the name of the entity\n     * @param {Function} successCallback The function that will be passed through and be called by a successful response.\n     * Nothing will be returned to this function\n     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n     * This function must accept an Error object as a parameter\n     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n     * true means asynchronously. false means synchronously\n     */\n    static Update(id: string, object: Object, type: string, successCallback: Function, errorCallback: Function, async: boolean): void {\n        stringParameterCheck(id, \"XrmServiceToolkit.REST.updateRecord requires the id parameter.\");\n        parameterCheck(object, \"XrmServiceToolkit.REST.updateRecord requires the object parameter.\");\n        stringParameterCheck(type, \"XrmServiceToolkit.REST.updateRecord requires the type parameter.\");\n        callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.updateRecord requires the successCallback is a function.\");\n        callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.updateRecord requires the errorCallback is a function.\");\n        booleanParameterCheck(async, \"XrmServiceToolkit.REST.updateRecord requires the async parameter is a boolean.\");\n\n        let req: XMLHttpRequest = <XMLHttpRequest>getXhr();\n\n        req.open(\"POST\", oDataPath() + type + \"(guid'\" + id + \"')\", async);\n        req.setRequestHeader(\"Accept\", \"application/json\");\n        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n        req.setRequestHeader(\"X-HTTP-Method\", \"MERGE\");\n\n        if (async) {\n            req.onreadystatechange = () => {\n                if (req.readyState === 4 /* complete */) {\n                    if (req.status === 204 || req.status === 1223) {\n                        successCallback();\n                    } else {\n                        errorCallback(errorHandler(req));\n                    }\n                }\n            };\n            req.send(JSON.stringify(object));\n        } else {\n            req.send(JSON.stringify(object));\n            if (req.status === 204 || req.status === 1223) {\n                successCallback();\n            }\n            else {\n                errorCallback(errorHandler(req));\n            }\n        }\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to delete a record\n     *\n     * @param {string} id A String representing the GUID value for the record to delete\n     * @param {string} type A String representing the name of the entity\n     * @param {Function} successCallback The function that will be passed through and be called by a successful response.\n     * Nothing will be returned to this function\n     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n     * This function must accept an Error object as a parameter\n     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n     * true means asynchronously. false means synchronously\n     */\n    static Delete(id: string, type: string, successCallback: Function, errorCallback: Function, async: boolean): void {\n        stringParameterCheck(id, \"XrmServiceToolkit.REST.deleteRecord requires the id parameter.\");\n        stringParameterCheck(type, \"XrmServiceToolkit.REST.deleteRecord requires the type parameter.\");\n        callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.deleteRecord requires the successCallback is a function.\");\n        callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.deleteRecord requires the errorCallback is a function.\");\n        booleanParameterCheck(async, \"XrmServiceToolkit.REST.deleteRecord requires the async parameter is a boolean.\");\n\n        let req: XMLHttpRequest = <XMLHttpRequest>getXhr();\n        req.open(\"POST\", oDataPath() + type + \"(guid'\" + id + \"')\", async);\n        req.setRequestHeader(\"Accept\", \"application/json\");\n        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n        req.setRequestHeader(\"X-HTTP-Method\", \"DELETE\");\n\n        if (async) {\n            req.onreadystatechange = () => {\n                if (req.readyState === 4 /* complete */) {\n                    if (req.status === 204 || req.status === 1223) {\n                        successCallback();\n                    } else {\n                        errorCallback(errorHandler(req));\n                    }\n                }\n            };\n            req.send();\n        } else {\n            req.send();\n            if (req.status === 204 || req.status === 1223) {\n                successCallback();\n            } else {\n                errorCallback(errorHandler(req));\n            }\n        }\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to retrieve records\n     *\n     * @param {string} type The Schema Name of the Entity type record to retrieve.\n     * For an Account record, use \"Account\"\n     * @param {string} options A String representing the OData System Query Options to control the data returned\n     * @param {Function} successCallback The function that will be passed through and be called for each page of records returned.\n     * Each page is 50 records. If you expect that more than one page of records will be returned,\n     * this function should loop through the results and push the records into an array outside of the function.\n     * Use the OnComplete event handler to know when all the records have been processed\n     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n     * This function must accept an Error object as a parameter\n     * @param {Function} onComplete The function that will be called when all the requested records have been returned.\n     * No parameters are passed to this function\n     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n     * true means asynchronously. false means synchronously\n     */\n    static RetrieveMultiple(type: string, options: string, successCallback: Function, errorCallback: Function, onComplete: Function, async: boolean): void {\n        stringParameterCheck(type, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the type parameter is a string.\");\n        if (options != null)\n            stringParameterCheck(options, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the options parameter is a string.\");\n        callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the successCallback parameter is a function.\");\n        callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the errorCallback parameter is a function.\");\n        callbackParameterCheck(onComplete, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the OnComplete parameter is a function.\");\n        booleanParameterCheck(async, \"XrmServiceToolkit.REST.retrieveMultipleRecords requires the async parameter is a boolean.\");\n\n        let optionsString = \"\";\n        if (options != null) {\n            if (options.charAt(0) !== \"?\") {\n                optionsString = \"?\" + options;\n            } else {\n                optionsString = options;\n            }\n        }\n\n        let req: XMLHttpRequest = <XMLHttpRequest>getXhr();\n        req.open(\"GET\", oDataPath() + type + optionsString, async);\n        req.setRequestHeader(\"Accept\", \"application/json\");\n        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n        if (async) {\n            req.onreadystatechange = () => {\n                if (req.readyState === 4 /* complete */) {\n                    if (req.status === 200) {\n                        let returned = JSON.parse(req.responseText, dateReviver).d;\n                        successCallback(returned.results);\n                        if (returned.__next == null) {\n                            onComplete();\n                        } else {\n                            let queryOptions = returned.__next.substring((oDataPath() + type).length);\n                            this.RetrieveMultiple(type, queryOptions, successCallback, errorCallback, onComplete, async);\n                        }\n                    } else {\n                        errorCallback(errorHandler(req));\n                    }\n                }\n            };\n            req.send();\n        } else {\n            req.send();\n            if (req.status === 200) {\n                let returned = JSON.parse(req.responseText, dateReviver).d;\n                successCallback(returned.results);\n                if (returned.__next == null) {\n                    onComplete();\n                } else {\n                    let queryOptions = returned.__next.substring((oDataPath() + type).length);\n                    this.RetrieveMultiple(type, queryOptions, successCallback, errorCallback, onComplete, async);\n                }\n            } else {\n                errorCallback(errorHandler(req));\n            }\n        }\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to associate a record\n     *\n     * @param {string} entityid1 A String representing the GUID value for the record to associate\n     * @param {string} odataSetName1 A String representing the odataset name for entityid1\n     * @param {string} entityid2 A String representing the GUID value for the record to be associated\n     * @param {string} odataSetName2 A String representing the odataset name for entityid2\n     * @param {string} relationship A String representing the name of the relationship for association\n     * @param {Function} successCallback The function that will be passed through and be called by a successful response.\n     * Nothing will be returned to this function\n     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n     * This function must accept an Error object as a parameter\n     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n     * true means asynchronously. false means synchronously\n     */\n    static Associate(entityid1: string, odataSetName1: string, entityid2: string, odataSetName2: string, relationship: string, successCallback: Function, errorCallback: Function, async: boolean): void {\n        parameterCheck(entityid1, \"XrmServiceToolkit.REST.associateRecord requires the entityid1 parameter.\");\n        parameterCheck(odataSetName1, \"XrmServiceToolkit.REST.associateRecord requires the odataSetName1 parameter.\");\n        parameterCheck(entityid2, \"XrmServiceToolkit.REST.associateRecord requires the entityid2 parameter.\");\n        parameterCheck(odataSetName2, \"XrmServiceToolkit.REST.associateRecord requires the odataSetName2 parameter.\");\n        parameterCheck(relationship, \"XrmServiceToolkit.REST.associateRecord requires the relationship parameter.\");\n        callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.associateRecord requires the successCallback is a function.\");\n        callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.associateRecord requires the errorCallback is a function.\");\n        booleanParameterCheck(async, \"XrmServiceToolkit.REST.associateRecord requires the async parameter is a boolean\");\n\n        let entity2: any = {};\n        entity2.uri = oDataPath() + \"/\" + odataSetName2 + \"(guid'\" + entityid2 + \"')\";\n        let jsonEntity = JSON.stringify(entity2);\n\n        performRequest({\n            type: \"POST\",\n            url: oDataPath() + \"/\" + odataSetName1 + \"(guid'\" + entityid1 + \"')/$links/\" + relationship,\n            data: jsonEntity,\n            success: successCallback,\n            error: errorCallback,\n            async: async\n        });\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to disassociate a record\n     *\n     * @param {string} entityid1 A String representing the GUID value for the record to disassociate\n     * @param {string} odataSetName A String representing the odataset name for entityid1\n     * @param {string} entityid2 A String representing the GUID value for the record to be disassociated\n     * @param {string} relationship A String representing the name of the relationship for disassociation\n     * @param {Function} successCallback The function that will be passed through and be called by a successful response.\n     * Nothing will be returned to this function\n     * @param {Function} errorCallback The function that will be passed through and be called by a failed response.\n     * This function must accept an Error object as a parameter\n     * @param {boolean} async A Boolean representing if the method should run asynchronously or synchronously\n     * true means asynchronously. false means synchronously\n     */\n    static Disassociate(entityid1: string, odataSetName: string, entityid2: string, relationship: string, successCallback: Function, errorCallback: Function, async: boolean): void {\n        parameterCheck(entityid1, \"XrmServiceToolkit.REST.disassociateRecord requires the entityid1 parameter.\");\n        parameterCheck(odataSetName, \"XrmServiceToolkit.REST.disassociateRecord requires the odataSetName parameter.\");\n        parameterCheck(entityid2, \"XrmServiceToolkit.REST.disassociateRecord requires the entityid2 parameter.\");\n        parameterCheck(relationship, \"XrmServiceToolkit.REST.disassociateRecord requires the relationship parameter.\");\n        callbackParameterCheck(successCallback, \"XrmServiceToolkit.REST.disassociateRecord requires the successCallback is a function.\");\n        callbackParameterCheck(errorCallback, \"XrmServiceToolkit.REST.disassociateRecord requires the errorCallback is a function.\");\n        booleanParameterCheck(async, \"XrmServiceToolkit.REST.disassociateRecord requires the async parameter is a boolean.\");\n\n        var url = oDataPath() + \"/\" + odataSetName + \"(guid'\" + entityid1 + \"')/$links/\" + relationship + \"(guid'\" + entityid2 + \"')\";\n        performRequest({\n            url: url,\n            type: \"POST\",\n            action: \"DELETE\",\n            error: errorCallback,\n            success: successCallback,\n            async: async\n        });\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/Rest.ts\n **/","/// <reference path=\"../typings/main.d.ts\" />\nimport {alertMessage, htmlEncode, innerSurrogateAmpersandWorkaround, crmXmlDecode, crmXmlEncode } from \"./Helper\";\nimport {xrmEntityReference, businessEntity, doRequest, xmlParser, xmlToString, selectSingleNodeText, selectSingleNode, getNodeText, selectNodes, fetchMore, isArray, encodeValue, joinArray, joinConditionPair, objectifyNode} from \"./HelperSoap\";\n\nexport default class Soap{\n\n    /**\n     * Sends synchronous/asynchronous request to create a new record\n     *\n     * @param {Object} be A JavaScript object with properties corresponding to the Schema name of\n     * entity attributes that are valid for create operations.\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     * @returns {(void | any)} If sync -> results\n     */\n    static Create(be: businessEntity, callback?: Function): void | any {\n        let request = be.serialize();\n        let async = !!callback;\n        let mBody = `\n            <request i:type=\"a:CreateRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                <a:KeyValuePairOfstringanyType>\n                    <b:key>Target</b:key>\n                    ${request}\n                </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>Create</a:RequestName>\n            </request>\n        `;\n\n        return doRequest(mBody, \"Execute\", async, (resultXml: string) => {\n            let responseText = selectSingleNodeText(resultXml, \"//b:value\");\n            let result = crmXmlDecode(responseText);\n\n            if (!async) {\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to update an existing record\n     *\n     * @param {businessEntity} be A JavaScript object with properties corresponding to the Schema name of\n     * entity attributes that are valid for update operations\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     * @returns {(void | any)} If sync -> results\n     */\n    static Update(be: businessEntity, callback?: Function): void | any {\n        let request = be.serialize();\n        let async = !!callback;\n        let mBody = `\n            <request i:type=\"a:UpdateRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>Target</b:key>\n                        ${request}\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>Update</a:RequestName>\n            </request>\n        `;\n\n        return doRequest(mBody, \"Execute\", async, (resultXml: string) => {\n            let responseText = selectSingleNodeText(resultXml, \"//a:Results\");\n            let result = crmXmlDecode(responseText);\n\n            if (!async) {\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to delete a record\n     *\n     * @param {string} entityName A JavaScript String corresponding to the Schema name of\n     * entity that is used for delete operations\n     * @param {string} id A JavaScript String corresponding to the GUID of\n     * entity that is used for delete operations\n     * @param {Function} [callback] A Function used for asynchronous request. If not defined, it sends a synchronous request\n     * @returns {(void | any)} If sync -> results\n     */\n    static Delete(entityName: string, id: string, callback?: Function): void | any {\n        let request =`\n            <request i:type=\"a:DeleteRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>Target</b:key>\n                        <b:value i:type=\"a:EntityReference\">\n                            <a:Id>\"\n                                ${id}\n                            </a:Id>\n                            <a:LogicalName>\n                                ${entityName}\n                            </a:LogicalName>\n                            <a:Name i:nil=\"true\" />\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>Delete</a:RequestName>\n            </request>\n        `;\n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) {\n            let responseText = selectSingleNodeText(resultXml, \"//a:Results\");\n            let result = crmXmlDecode(responseText);\n\n            if (!async) {\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to execute a soap request\n     *\n     * @param {string} request A JavaScript string corresponding to the soap request\n     * that are valid for execute operations\n     * @param {Function} [callback] A Function used for asynchronous request. If not defined, it sends a synchronous request\n     * @returns {(void | any)} If sync -> results\n     */\n    static Execute(request: string, callback?: Function): void | any {\n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            if (!async){\n                return resultXml;\n            } else{\n                callback(resultXml);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to do a fetch request)\n     *\n     * @param {string} fetchCore A JavaScript String containing serialized XML using the FetchXML schema.\n     * For efficiency, start with the \"entity\" node\n     * @param {boolean} fetchAll Switch to enable paging\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     * @returns {(void | any)} If sync -> results\n     */\n    static Fetch (fetchCore: string, fetchAll?: boolean, callback?: Function): void | any {\n        let fetchXml = fetchCore;\n\n        if (fetchCore.slice(0, 7) === \"<entity\") {\n            fetchXml =`\n                <fetch mapping=\"logical\">\n                    ${fetchCore.replace(/\\\"/g, \"'\")}\n                </fetch>\n            `;\n        } else {\n            let isAggregate = (fetchCore.indexOf(\"aggregate=\") !== -1);\n            let isLimitedReturn = (fetchCore.indexOf(\"page='1'\") !== -1 && fetchCore.indexOf(\"count='\") !== -1);\n\n            let distinctPos = fetchCore.indexOf(\"distinct=\");\n            let isDistinct = (distinctPos !== -1);\n            let valQuotes = fetchCore.substring(distinctPos + 9, distinctPos + 10);\n            let distinctValue = isDistinct\n                ? fetchCore.substring(fetchCore.indexOf(\"distinct=\") + 10, fetchCore.indexOf(valQuotes, fetchCore.indexOf(\"distinct=\") + 10))\n                : \"false\";\n            let xmlDoc = xmlParser(fetchCore);\n            let fetchEntity = selectSingleNode(xmlDoc, \"//entity\");\n            if (fetchEntity === null) {\n                throw new Error(\"XrmServiceToolkit.Fetch: No 'entity' node in the provided FetchXML.\");\n            }\n            let fetchCoreDom = fetchEntity;\n            try {\n                fetchCore = xmlToString(fetchCoreDom).replace(/\\\"/g, \"'\");\n            } catch (error) {\n                if (fetchCoreDom !== undefined && fetchCoreDom.xml) {\n                    fetchCore = fetchCoreDom.xml.replace(/\\\"/g, \"'\");\n                } else {\n                    throw new Error(\"XrmServiceToolkit.Fetch: This client does not provide the necessary XML features to continue.\");\n                }\n            }\n\n            if (!isAggregate && !isLimitedReturn) {\n                fetchXml = `\n                    <fetch mapping=\"logical\" distinct=\"${(isDistinct ? distinctValue : \"false\")}\"'\" >\n                        ${fetchCore}\n                    </fetch>\n                `;\n            }\n        }\n\n        let request = `\n            <request i:type=\"a:RetrieveMultipleRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>Query</b:key>\n                        <b:value i:type=\"a:FetchExpression\">\n                            <a:Query>${crmXmlEncode(fetchXml)}</a:Query>\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\"/>\n                <a:RequestName>RetrieveMultiple</a:RequestName>\n            </request>\n        `;\n\n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let fetchResult: Node = selectSingleNode(resultXml, \"//a:Entities\");\n            let moreRecords: boolean = (selectSingleNodeText(resultXml, \"//a:MoreRecords\") === \"true\");\n\n            let fetchResults: Array<any> = [];\n            if (fetchResult != null) {\n                for (let ii: number = 0, olength = fetchResult.childNodes.length; ii < olength; ii++) {\n                    let entity: businessEntity = new businessEntity();\n\n                    entity.deserialize(fetchResult.childNodes[ii]);\n                    fetchResults.push(entity);\n                }\n\n                if (fetchAll && moreRecords) {\n                    let pageCookie = selectSingleNodeText(resultXml, \"//a:PagingCookie\").replace(/\\\"/g, '\\'').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&quot;');\n\n                    fetchMore(fetchCore, 2, pageCookie, fetchResults);\n                }\n\n                if (!async){\n                    return fetchResults;\n                } else{\n                    callback(fetchResults);\n                }\n            }\n            // ReSharper disable once NotAllPathsReturnValue\n        });\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to retrieve a record\n     *\n     * @param {string} entityName A JavaScript String corresponding to the Schema name of\n     * entity that is used for retrieve operations\n     * @param {string} id A JavaScript String corresponding to the GUID of\n     * entity that is used for retrieve operations\n     * @param {Array} columnSet  A JavaScript Array corresponding to the attributes of\n     * entity that is used for retrieve operations\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     * @returns {(void | any)} If sync -> results\n     */\n    static Retrieve(entityName: string, id: string, columnSet: Array<any>, callback: Function): void | any {\n        let attributes = \"\";\n        // ReSharper disable AssignedValueIsNeverUsed\n        let query = \"\";\n        // ReSharper restore AssignedValueIsNeverUsed\n        if (columnSet != null) {\n            for (let i = 0, ilength = columnSet.length; i < ilength; i++) {\n                attributes += \"<c:string>\" + columnSet[i] + \"</c:string>\";\n            }\n            query = \"<a:AllColumns>false</a:AllColumns>\" +\n                    \"<a:Columns xmlns:c='http://schemas.microsoft.com/2003/10/Serialization/Arrays'>\" +\n                        attributes +\n                    \"</a:Columns>\";\n        }\n        else {\n            query = \"<a:AllColumns>true</a:AllColumns><a:Columns xmlns:b='http://schemas.microsoft.com/2003/10/Serialization/Arrays' />\";\n        }\n\n        let msgBody = `\n            <request i:type=\"a:RetrieveRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>Target</b:key>\n                        <b:value i:type=\"a:EntityReference\">\n                            <a:Id>${encodeValue(id)}</a:Id>\n                            <a:LogicalName>${entityName}</a:LogicalName>\n                            <a:Name i:nil=\"true\" />\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>ColumnSet</b:key>\n                        <b:value i:type=\"a:ColumnSet\">\n                            ${query}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>Retrieve</a:RequestName>\n            </request>\n        `;\n\n        let async = !!callback;\n\n        return doRequest(msgBody, \"Execute\", !!callback, (resultXml: string) => {\n            let retrieveResult: Node = selectSingleNode(resultXml, \"//b:value\");\n            let entity: businessEntity = new businessEntity();\n            entity.deserialize(retrieveResult);\n\n            if (!async){\n                return entity;\n            } else {\n                callback(entity);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to do a retrieveMultiple request\n     *\n     * @param {string} query A JavaScript String with properties corresponding to the retrievemultiple request\n     * that are valid for retrievemultiple operations\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     * @returns {(void | any)} If sync -> results\n     */\n    static RetrieveMultiple(query: string, callback: Function): void | any {\n        let request = `\n            <request i:type=\"a:RetrieveMultipleRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>Query</b:key>\n                        <b:value i:type=\"a:QueryExpression\">\n                            ${query}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\"/>\n                <a:RequestName>RetrieveMultiple</a:RequestName>\n            </request>\n        `;\n\n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let resultNodes: Node = selectSingleNode(resultXml, \"//a:Entities\");\n\n            let retriveMultipleResults: Array<businessEntity> = [];\n\n            for (let i = 0, ilength = resultNodes.childNodes.length; i < ilength; i++) {\n                let entity = new businessEntity();\n\n                entity.deserialize(resultNodes.childNodes[i]);\n                retriveMultipleResults[i] = entity;\n            }\n\n            if (!async){\n                return retriveMultipleResults;\n            } else{\n                callback(retriveMultipleResults);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to do a queryByAttribute request\n     *\n     * @static\n     * @param {*} queryOptions A JavaScript Object with properties corresponding to the queryByAttribute Criteria\n     * that are valid for queryByAttribute operations.\n     * queryOptions.entityName is a string represents the name of the entity\n     * queryOptions.attributes is a array represents the attributes of the entity to query\n     * queryOptions.values is a array represents the values of the attributes to query\n     * queryOptions.columnSet is a array represents the attributes of the entity to return\n     * queryOptions.orderBy is a array represents the order conditions of the results\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     */\n    static QueryByAttribute(queryOptions: any, callback: Function): void {\n        let entityName: string = queryOptions.entityName;\n        let attributes: any = queryOptions.attributes;\n        let values: any = queryOptions.values;\n        let columnSet: any = queryOptions.columnSet;\n        let orderBy = queryOptions.orderBy || \"\";\n\n        attributes = isArray(attributes) ? attributes : [attributes];\n        values = isArray(values) ? values : [values];\n        orderBy = (!!orderBy && isArray(orderBy)) ? orderBy : [orderBy];\n        columnSet = (!!columnSet && isArray(columnSet)) ? columnSet : [columnSet];\n\n        let xml =`\n            <entity name=\"${entityName}\">\n                    ${joinArray(\"<attribute name='\", columnSet, \"' />\")}\n                    ${joinArray(\"<order attribute='\", orderBy, \"' />\")}\n                <filter>\n                    ${joinConditionPair(attributes, values)}\n                </filter>\n            </entity>\n        `;\n\n        return this.Fetch(xml, false, callback);\n    };\n\n    /**\n     * Sends synchronous/asynchronous request to do a queryAll request. This is to return all records (>5k+).\n     * Consider Performance impact when using this method.\n     *\n     * @static\n     * @param {*} queryOptions A JavaScript Object with properties corresponding to the queryByAttribute Criteria\n     * that are valid for queryByAttribute operations.\n     * queryOptions.entityName is a string represents the name of the entity\n     * queryOptions.attributes is a array represents the attributes of the entity to query\n     * queryOptions.values is a array represents the values of the attributes to query\n     * queryOptions.columnSet is a array represents the attributes of the entity to return\n     * queryOptions.orderBy is a array represents the order conditions of the results\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     */\n    static QueryAll(queryOptions: any, callback: Function): void {\n        let entityName: string = queryOptions.entityName;\n        let attributes: Array<any> = queryOptions.attributes;\n        let values: any = queryOptions.values;\n        let columnSet: Array<any> = queryOptions.columnSet;\n        let orderBy: Array<any> = queryOptions.orderBy || '';\n\n        attributes = isArray(attributes) ? attributes : [attributes];\n        values = isArray(values) ? values : [values];\n        orderBy = (!!orderBy && isArray(orderBy)) ? orderBy : [orderBy];\n        columnSet = (!!columnSet && isArray(columnSet)) ? columnSet : [columnSet];\n\n        let fetchCore = `\n            <entity name=\"${entityName}\">\n                    ${joinArray(\"<attribute name='\", columnSet, \"' />\")}\n                    ${joinArray(\"<order attribute='\", orderBy, \"' />\")}\n                <filter>\n                        ${joinConditionPair(attributes, values)}\n                </filter>\n            </entity>\n        `;\n\n        return this.Fetch(fetchCore, true, callback);\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to setState of a record\n     *\n     * @static\n     * @param {string} entityName A JavaScript String corresponding to the Schema name of\n     * entity that is used for setState operations.\n     * @param {string} id A JavaScript String corresponding to the GUID of\n     * entity that is used for setState operations\n     * @param {number} stateCode A JavaScript Integer corresponding to the value of\n     * entity state that is used for setState operations\n     * @param {number} statusCode A JavaScript Integer corresponding to the value of\n     * entity status that is used for setState operations\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     */\n    static SetState(entityName: string, id: string, stateCode: number, statusCode: number, callback: Function): void {\n        let request = `\n            <request i:type=\"b:SetStateRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">\n                <a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <c:key>EntityMoniker</c:key>\n                        <c:value i:type=\"a:EntityReference\">\n                            <a:Id>${encodeValue(id)}</a:Id>\n                            <a:LogicalName>${entityName}</a:LogicalName>\n                            <a:Name i:nil=\"true\" />\n                        </c:value>\n                        </a:KeyValuePairOfstringanyType>\n                        <a:KeyValuePairOfstringanyType>\n                            <c:key>State</c:key>\n                            <c:value i:type=\"a:OptionSetValue\">\n                             <a:Value>${stateCode.toString()}</a:Value>\n                            </c:value>\n                        </a:KeyValuePairOfstringanyType>\n                        <a:KeyValuePairOfstringanyType>\n                            <c:key>Status</c:key>\n                            <c:value i:type=\"a:OptionSetValue\">\n                             <a:Value>${statusCode.toString()}</a:Value>\n                            </c:value>\n                        </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>SetState</a:RequestName>\n            </request>\n       `;\n\n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let responseText = selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n            let result = crmXmlDecode(responseText);\n            if (!async) {\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to associate records\n     *\n     * @static\n     * @param {string} relationshipName A JavaScript String corresponding to the relationship name\n     * that is used for associate operations\n     * @param {string} targetEntityName A JavaScript String corresponding to the relationship name\n     * that is used for associate operations\n     * @param {string} targetId A JavaScript String corresponding to the GUID of the target entity\n     * that is used for associate operations\n     * @param {string} relatedEntityName A JavaScript String corresponding to the schema name of the related entity\n     * that is used for associate operations\n     * @param {Array<businessEntity>} relatedBusinessEntities A JavaScript Array corresponding to the collection of the related entities as BusinessEntity\n     * that is used for associate operations\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     * @returns {(void | any)} If sync -> results\n     */\n    static Associate(relationshipName: string, targetEntityName: string, targetId: string, relatedEntityName: string, relatedBusinessEntities: Array<businessEntity>, callback: Function): void | any{\n        let relatedEntities = relatedBusinessEntities;\n\n        relatedEntities = isArray(relatedEntities) ? relatedEntities : [relatedEntities];\n\n        let output: Array<string> = [];\n        for (let i: number = 0, ilength: number = relatedEntities.length; i < ilength; i++) {\n            if (relatedEntities[i].id !== \"\") {\n                output.push(\"<a:EntityReference>\",\n                                \"<a:Id>\", relatedEntities[i].id, \"</a:Id>\",\n                                \"<a:LogicalName>\", relatedEntityName, \"</a:LogicalName>\",\n                                \"<a:Name i:nil='true' />\",\n                            \"</a:EntityReference>\");\n            }\n        }\n\n        let relatedXml = output.join(\"\");\n\n        let request = `\n            <request i:type=\"a:AssociateRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>Target</b:key>\n                        <b:value i:type=\"a:EntityReference\">\n                            <a:Id>${encodeValue(targetId)}</a:Id>\n                            <a:LogicalName>${targetEntityName}</a:LogicalName>\n                            <a:Name i:nil=\"true\" />\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>Relationship</b:key>\n                        <b:value i:type=\"a:Relationship\">\n                            <a:PrimaryEntityRole>Referenced</a:PrimaryEntityRole>\n                            <a:SchemaName>${relationshipName}</a:SchemaName>\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                    <b:key>RelatedEntities</b:key>\n                    <b:value i:type=\"a:EntityReferenceCollection\">\n                        ${relatedXml}\n                    </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>Associate</a:RequestName>\n            </request>\n        `;\n\n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let responseText = selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n            let result = crmXmlDecode(responseText);\n            if (!async) {\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to disassociate records\n     *\n     * @static\n     * @param {string} relationshipName A JavaScript String corresponding to the relationship name\n     * that is used for associate operations\n     * @param {string} targetEntityName A JavaScript String corresponding to the relationship name\n     * that is used for associate operations\n     * @param {string} targetId A JavaScript String corresponding to the GUID of the target entity\n     * that is used for associate operations\n     * @param {string} relatedEntityName A JavaScript String corresponding to the schema name of the related entity\n     * that is used for associate operations\n     * @param {Array<businessEntity>} relatedBusinessEntities A JavaScript Array corresponding to the collection of the related entities as BusinessEntity\n     * that is used for associate operations\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     * @returns {(void | any)} If sync -> results\n     */\n    static Disassociate(relationshipName: string, targetEntityName: string, targetId: string, relatedEntityName: string, relatedBusinessEntities: Array<businessEntity>, callback: Function): void | any {\n        let relatedEntities = relatedBusinessEntities;\n\n        relatedEntities = isArray(relatedEntities) ? relatedEntities : [relatedEntities];\n\n        let output: Array<string> = [];\n        for (let i = 0, ilength = relatedEntities.length; i < ilength; i++) {\n            if (relatedEntities[i].id !== \"\") {\n                output.push(\"<a:EntityReference>\",\n                                \"<a:Id>\", relatedEntities[i].id, \"</a:Id>\",\n                                \"<a:LogicalName>\", relatedEntityName, \"</a:LogicalName>\",\n                                \"<a:Name i:nil='true' />\",\n                            \"</a:EntityReference>\");\n            }\n        }\n        let relatedXml = output.join(\"\");\n        let request = `\n            <request i:type=\"a:DisassociateRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>Target</b:key>\n                        <b:value i:type=\"a:EntityReference\">\n                            <a:Id>${encodeValue(targetId)}</a:Id>\n                            <a:LogicalName>${targetEntityName}</a:LogicalName>\n                            <a:Name i:nil=\"true\" />\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>Relationship</b:key>\n                        <b:value i:type=\"a:Relationship\">\n                            <a:PrimaryEntityRole i:nil=\"true\" />\n                            <a:SchemaName>${relationshipName}</a:SchemaName>\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                    <b:key>RelatedEntities</b:key>\n                    <b:value i:type=\"a:EntityReferenceCollection\">\n                        ${relatedXml}\n                    </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>Disassociate</a:RequestName>\n            </request>\n        `;\n\n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let responseText = selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n            let result = crmXmlDecode(responseText);\n            if (!async) {\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous request to retrieve the GUID of the current user\n     *\n     * @static\n     * @returns {string} (description)\n     */\n    static GetCurrentUserId (): string {\n        let request = `\n            <request i:type=\"b:WhoAmIRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">\n                <a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\" />\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>WhoAmI</a:RequestName>\n            </request>\n        `;\n        let xmlDoc = doRequest(request, \"Execute\");\n\n        return getNodeText(selectNodes(xmlDoc, \"//b:value\")[0]);\n    }\n\n    /**\n     * Sends synchronous request to retrieve the GUID of the current user's business unit\n     * \n     * @static\n     * @returns {string}\n     */\n    static GetCurrentUserBusinessUnitId(): string {\n        let request = `\n            <request i:type=\"b:WhoAmIRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">\n                <a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\" />\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>WhoAmI</a:RequestName>\n            </request>\n        `;\n        let xmlDoc = doRequest(request, \"Execute\");\n\n        return getNodeText(selectNodes(xmlDoc, \"//b:value\")[1]);\n    }\n\n    /**\n     * Sends synchronous request to retrieve the list of the current user's roles\n     * \n     * @static\n     * @returns {Array<string>} All roles of the current user\n     */\n    static GetCurrentUserRoles(): Array<string> {\n        var xml = `\n            <fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"true\">\n                <entity name=\"role\">\n                <attribute name=\"name\" />\n                <attribute name=\"businessunitid\" />\n                <attribute name=\"roleid\" />\n                <order attribute=\"name\" descending=\"false\" /> +\n                <link-entity name=\"systemuserroles\" from=\"roleid\" to=\"roleid\" visible=\"false\" intersect=\"true\">\n                    <link-entity name=\"systemuser\" from=\"systemuserid\" to=\"systemuserid\" alias=\"aa\">\n                    <filter type=\"and\">\n                        <condition attribute=\"systemuserid\" operator=\"eq-userid\" />\n                    </filter>\n                    </link-entity>\n                </link-entity>\n                </entity>\n            </fetch>\n        `;\n\n        let fetchResult = this.Fetch(xml);\n        let roles: Array<string> = [];\n\n        if (fetchResult !== null && typeof fetchResult != \"undefined\") {\n            for (let i = 0, ilength = fetchResult.length; i < ilength; i++) {\n                roles[i] = fetchResult[i].attributes[\"name\"].value;\n            }\n        }\n\n        return roles;\n    }\n\n    /**\n     * Sends synchronous request to check if the current user has certain roles\n     * Passes name of role as arguments. For example, IsCurrentUserInRole('System Administrator')\n     * Returns true or false\n     * \n     * @static\n     * @returns {boolean}\n     */\n    static IsCurrentUserInRole(): boolean {\n        let roles: Array<string> = this.GetCurrentUserRoles();\n        for (let i: number = 0, ilength: number = roles.length; i < ilength; i++) {\n            for (let j: number = 0, jlength: number = arguments.length; j < jlength; j++) {\n                if (roles[i] === arguments[j]) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to assign an existing record to a user / a team\n     * \n     * @static\n     * @param {string} targetEntityName A JavaScript String corresponding to the schema name of the target entity\n     * that is used for assign operations\n     * @param {string} targetId A JavaScript String corresponding to the GUID of the target entity\n     * that is used for assign operations\n     * @param {string} assigneeEntityName A JavaScript String corresponding to the schema name of the assignee entity\n     * that is used for assign operations\n     * @param {string} assigneeId A JavaScript String corresponding to the GUID of the assignee entity\n     * that is used for assign operations\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     */\n    static Assign(targetEntityName: string, targetId: string, assigneeEntityName: string, assigneeId: string, callback: Function): void {\n        let request = `\n            <request i:type=\"b:AssignRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">\n                <a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                    <c:key>Target</c:key>\n                    <c:value i:type=\"a:EntityReference\">\n                        <a:Id>${encodeValue(targetId)}</a:Id>\n                        <a:LogicalName>${targetEntityName}</a:LogicalName>\n                        <a:Name i:nil=\"true\" />\n                    </c:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                    <c:key>Assignee</c:key>\n                    <c:value i:type=\"a:EntityReference\">\n                        <a:Id>${encodeValue(assigneeId)}</a:Id>\n                        <a:LogicalName>${assigneeEntityName}</a:LogicalName>\n                        <a:Name i:nil=\"true\" />\n                    </c:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>Assign</a:RequestName>\n            </request>\n        `;\n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let responseText: string = selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n            let result: string = crmXmlDecode(responseText);\n            if (!async){\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to do a grantAccess request.\n     * Levels of Access Options are: AppendAccess, AppendToAccess, AssignAccess, CreateAccess, DeleteAccess, None, ReadAccess, ShareAccess, and * WriteAccess\n     * \n     * @static\n     * @param {*} accessOptions A JavaScript Object with properties corresponding to the grantAccess Criteria\n     * that are valid for grantAccess operations.\n     * accessOptions.targetEntityName is a string represents the name of the target entity\n     * accessOptions.targetEntityId is a string represents the GUID of the target entity\n     * accessOptions.principalEntityName is a string represents the name of the principal entity\n     * accessOptions.principalEntityId is a string represents the GUID of the principal entity\n     * accessOptions.accessRights is a array represents the access conditions of the results\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     */\n    static GrantAccess(accessOptions: any, callback: Function): void {\n        let targetEntityName: string = accessOptions.targetEntityName;\n        let targetEntityId: string = accessOptions.targetEntityId;\n        let principalEntityName: string = accessOptions.principalEntityName;\n        let principalEntityId: string = accessOptions.principalEntityId;\n        let accessRights: string | Array<string> = accessOptions.accessRights;\n\n        accessRights = isArray(accessRights) ? accessRights : [accessRights];\n\n        let accessRightString = \"\";\n        for (let i: number = 0, ilength: number = accessRights.length; i < ilength; i++) {\n            accessRightString += encodeValue(accessRights[i]) + \" \";\n        }\n\n        let request = `\n            <request i:type=\"b:GrantAccessRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">\n                <a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                    <c:key>Target</c:key>\n                    <c:value i:type=\"a:EntityReference\">\n                        <a:Id>${encodeValue(targetEntityId)}</a:Id>\n                        <a:LogicalName>${targetEntityName}</a:LogicalName>\n                        <a:Name i:nil=\"true\" />\n                    </c:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                    <c:key>PrincipalAccess</c:key>\n                    <c:value i:type=\"b:PrincipalAccess\">\n                        <b:AccessMask>${accessRightString}</b:AccessMask>\n                        <b:Principal>\n                        <a:Id>${encodeValue(principalEntityId)}</a:Id>\n                        <a:LogicalName>${principalEntityName}</a:LogicalName>\n                        <a:Name i:nil=\"true\" />\n                        </b:Principal>\n                    </c:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>GrantAccess</a:RequestName>\n            </request>\n        `;\n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let responseText: string = selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n            let result: string = crmXmlDecode(responseText);\n            if (!async){\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to do a modifyAccess request.\n     * Levels of Access Options are: AppendAccess, AppendToAccess, AssignAccess, CreateAccess, DeleteAccess, None, ReadAccess, ShareAccess, and * WriteAccess\n     * \n     * @static\n     * @param {*} accessOptions A JavaScript Object with properties corresponding to the modifyAccess Criteria\n     * that are valid for modifyAccess operations.\n     * accessOptions.targetEntityName is a string represents the name of the target entity\n     * accessOptions.targetEntityId is a string represents the GUID of the target entity\n     * accessOptions.principalEntityName is a string represents the name of the principal entity\n     * accessOptions.principalEntityId is a string represents the GUID of the principal entity\n     * accessOptions.accessRights is a array represents the access conditions of the results\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     */\n    static ModifyAccess(accessOptions: any, callback: Function): void {\n        let targetEntityName: string = accessOptions.targetEntityName;\n        let targetEntityId: string = accessOptions.targetEntityId;\n        let principalEntityName: string = accessOptions.principalEntityName;\n        let principalEntityId: string = accessOptions.principalEntityId;\n        let accessRights: string | Array<string> = accessOptions.accessRights;\n\n        accessRights = isArray(accessRights) ? accessRights : [accessRights];\n\n        let accessRightString = \"\";\n        for (let i = 0, ilength = accessRights.length; i < ilength; i++) {\n            accessRightString += encodeValue(accessRights[i]) + \" \";\n        }\n\n        let request = `\n            <request i:type=\"b:ModifyAccessRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">\n                <a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                    <c:key>Target</c:key>\n                    <c:value i:type=\"a:EntityReference\">\n                        <a:Id>${encodeValue(targetEntityId)}</a:Id>\n                        <a:LogicalName>${targetEntityName}</a:LogicalName>\n                        <a:Name i:nil=\"true\" />\n                    </c:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                    <c:key>PrincipalAccess</c:key>\n                    <c:value i:type=\"b:PrincipalAccess\">\n                        <b:AccessMask>${accessRightString}</b:AccessMask>\n                        <b:Principal>\n                        <a:Id>${encodeValue(principalEntityId)}</a:Id>\n                        <a:LogicalName>${principalEntityName}</a:LogicalName>\n                        <a:Name i:nil=\"true\" />\n                        </b:Principal>\n                    </c:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>ModifyAccess</a:RequestName>\n            </request>\n        `;\n        \n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let responseText: string = selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n            let result: string = crmXmlDecode(responseText);\n            if (!async){\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to do a revokeAccess request\n     * \n     * @static\n     * @param {*} accessOptions A JavaScript Object with properties corresponding to the revokeAccess Criteria\n     * that are valid for revokeAccess operations.\n     * accessOptions.targetEntityName is a string represents the name of the target entity\n     * accessOptions.targetEntityId is a string represents the GUID of the target entity\n     * accessOptions.revokeeEntityName is a string represents the name of the revokee entity\n     * accessOptions.revokeeEntityId is a string represents the GUID of the revokee entity\n     * @param {Function} callback Function used for asynchronous request. If not defined, it sends a synchronous request\n     */\n    static RevokeAccess(accessOptions: any, callback: Function): void {\n        let targetEntityName: string = accessOptions.targetEntityName;\n        let targetEntityId: string = accessOptions.targetEntityId;\n        let revokeeEntityName: string = accessOptions.revokeeEntityName;\n        let revokeeEntityId: string = accessOptions.revokeeEntityId;\n\n        let request: string = `\n            <request i:type=\"b:RevokeAccessRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">\n                <a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                    <c:key>Target</c:key>\n                    <c:value i:type=\"a:EntityReference\">\n                        <a:Id>${encodeValue(targetEntityId)}</a:Id>\n                        <a:LogicalName>${targetEntityName}</a:LogicalName>\n                        <a:Name i:nil=\"true\" />\n                    </c:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                    <c:key>Revokee</c:key>\n                    <c:value i:type=\"a:EntityReference\">\n                        <a:Id>${encodeValue(revokeeEntityId)}</a:Id>\n                        <a:LogicalName>${revokeeEntityName}</a:LogicalName>\n                        <a:Name i:nil=\"true\" />\n                    </c:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>RevokeAccess</a:RequestName>\n            </request>\n        `;\n        let async: boolean = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let responseText: string = selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n            let result: string = crmXmlDecode(responseText);\n            if (!async){\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends synchronous/asynchronous request to do a retrievePrincipalAccess request\n     * \n     * @static\n     * @param {*} accessOptions A JavaScript Object with properties corresponding to the retrievePrincipalAccess Criteria\n     * that are valid for retrievePrincipalAccess operations.\n     * accessOptions.targetEntityName is a string represents the name of the target entity\n     * accessOptions.targetEntityId is a string represents the GUID of the target entity\n     * accessOptions.principalEntityName is a string represents the name of the principal entity\n     * accessOptions.principalEntityId is a string represents the GUID of the principal entity\n     * @param {Function} callback A Function used for asynchronous request. If not defined, it sends a synchronous request\n     */\n    static RetrievePrincipalAccess(accessOptions: any, callback: Function): void {\n        let targetEntityName: string = accessOptions.targetEntityName;\n        let targetEntityId: string = accessOptions.targetEntityId;\n        let principalEntityName: string = accessOptions.principalEntityName;\n        let principalEntityId: string = accessOptions.principalEntityId;\n\n        let request: string = `\n            <request i:type='b:RetrievePrincipalAccessRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts' xmlns:b='http://schemas.microsoft.com/crm/2011/Contracts'>\n                <a:Parameters xmlns:c='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>\n                    <a:KeyValuePairOfstringanyType>\n                    <c:key>Target</c:key>\n                    <c:value i:type='a:EntityReference'>\n                        <a:Id>${encodeValue(targetEntityId)}</a:Id>\n                        <a:LogicalName>${targetEntityName}</a:LogicalName>\n                        <a:Name i:nil='true' />\n                    </c:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                    <c:key>Principal</c:key>\n                    <c:value i:type='a:EntityReference'>\n                        <a:Id>${encodeValue(principalEntityId)}</a:Id>\n                        <a:LogicalName>${principalEntityName}</a:LogicalName>\n                        <a:Name i:nil='true' />\n                    </c:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil='true' />\n                <a:RequestName>RetrievePrincipalAccess</a:RequestName>\n            </request>\n        `;\n        \n        let async: boolean = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let result: string = selectSingleNodeText(resultXml, \"//b:value\");\n            if (!async){\n                return result;\n            } else {\n                callback(result);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n    \n    /**\n     * Sends an synchronous/asynchronous RetrieveAllEntitieMetadata Request to retrieve all entities metadata in the system\n     * \n     * @static\n     * @param {Array<string>} entityFilters The filter array available to filter which data is retrieved. Case Sensitive filters [Entity,Attributes,Privileges,Relationships]\n     * Include only those elements of the entity you want to retrieve in the array. Retrieving all parts of all entities may take significant time.\n     * @param {boolean} retrieveIfPublished Sets whether to retrieve the metadata that has not been published\n     * @param {Function} callback The function that will be passed through and be called by a successful response.\n     * This function also used as an indicator if the function is synchronous/asynchronous\n     * @returns {(void | any)} Entity Metadata Collection\n     */\n    static RetrieveAllEntitiesMetadata(entityFilters: Array<string>, retrieveIfPublished: boolean, callback:Function): void | any {\n        entityFilters = isArray(entityFilters) ? entityFilters : [entityFilters];\n        let entityFiltersString: string = \"\";\n        for (let iii: number = 0, templength: number = entityFilters.length; iii < templength; iii++) {\n            entityFiltersString += encodeValue(entityFilters[iii]) + \" \";\n        }\n\n        let request = `\n            <request i:type=\"a:RetrieveAllEntitiesRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>EntityFilters</b:key>\n                        <b:value i:type=\"c:EntityFilters\" xmlns:c=\"http://schemas.microsoft.com/xrm/2011/Metadata\">\n                        ${encodeValue(entityFiltersString)}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>RetrieveAsIfPublished</b:key>\n                        <b:value i:type=\"c:boolean\" xmlns:c=\"http://www.w3.org/2001/XMLSchema\">\n                        ${encodeValue(retrieveIfPublished.toString())}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>RetrieveAllEntities</a:RequestName>\n            </request>\n        `;\n\n        let async = !!callback;\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let response: any = selectNodes(resultXml, \"//c:EntityMetadata\");\n\n            let results: Array<any> = [];\n            for (let i = 0, ilength = response.length; i < ilength; i++) {\n                let a = objectifyNode(response[i]);\n                a._type = \"EntityMetadata\";\n                results.push(a);\n            }\n\n            if (!async){\n                return results;\n            } else {\n                callback(results);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends an synchronous/asynchronous RetreiveEntityMetadata Request to retrieve a particular entity metadata in the system\n     * \n     * @static\n     * @param {string} entityFilters The filter string available to filter which data is retrieved. Case Sensitive filters [Entity,Attributes,Privileges,Relationships]\n     * Include only those elements of the entity you want to retrieve in the array. Retrieving all parts of all entities may take significant time\n     * @param {string} logicalName The string of the entity logical name\n     * @param {boolean} retrieveIfPublished Sets whether to retrieve the metadata that has not been published\n     * @param {Function} callback The function that will be passed through and be called by a successful response.\n     * This function also used as an indicator if the function is synchronous/asynchronous\n     * @returns {(void | any)} Entity Metadata\n     */\n    static RetrieveEntityMetadata(entityFilters: string, logicalName: string, retrieveIfPublished: boolean, callback: Function): void | any {\n        entityFilters = isArray(entityFilters) ? entityFilters : [entityFilters];\n        let entityFiltersString: string = \"\";\n        for (let iii: number = 0, templength: number = entityFilters.length; iii < templength; iii++) {\n            entityFiltersString += encodeValue(entityFilters[iii]) + \" \";\n        }\n\n        let request: string = `\n            <request i:type=\"a:RetrieveEntityRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>EntityFilters</b:key>\n                        <b:value i:type=\"c:EntityFilters\" xmlns:c=\"http://schemas.microsoft.com/xrm/2011/Metadata\">\n                        ${encodeValue(entityFiltersString)}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>MetadataId</b:key>\n                        <b:value i:type=\"c:guid\"  xmlns:c=\"http://schemas.microsoft.com/2003/10/Serialization/\">\n                        ${encodeValue(\"00000000-0000-0000-0000-000000000000\")}\n                        </b:value>\"\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>RetrieveAsIfPublished</b:key>\n                        <b:value i:type=\"c:boolean\" xmlns:c=\"http://www.w3.org/2001/XMLSchema\">\n                        ${encodeValue(retrieveIfPublished.toString())}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>LogicalName</b:key>\n                        <b:value i:type=\"c:string\" xmlns:c=\"http://www.w3.org/2001/XMLSchema\">\n                        ${encodeValue(logicalName)}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>RetrieveEntity</a:RequestName>\n            </request>\n        `;\n\n        let async = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let response: any = selectNodes(resultXml, \"//b:value\");\n\n            let results: Array<string> = [];\n            for (let i: number = 0, ilength = response.length; i < ilength; i++) {\n                let a: any = objectifyNode(response[i]);\n                a._type = \"EntityMetadata\";\n                results.push(a);\n            }\n\n            if (!async){\n                return results;\n            } else {\n                callback(results);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n\n    /**\n     * Sends an synchronous/asynchronous RetrieveAttributeMetadata Request to retrieve a particular entity's attribute metadata in the system\n     * \n     * @static\n     * @param {string} entityLogicalName The string of the entity logical name\n     * @param {string} attributeLogicalName The string of the entity's attribute logical name\n     * @param {boolean} retrieveIfPublished Sets whether to retrieve the metadata that has not been published\n     * @param {Function} callback The function that will be passed through and be called by a successful response.\n     * This function also used as an indicator if the function is synchronous/asynchronous\n     * @returns {(void | any)} Entity Metadata\n     */\n    static RetrieveAttributeMetadata(entityLogicalName: string, attributeLogicalName: string, retrieveIfPublished: boolean, callback: Function): void | any {\n        let request = `\n            <request i:type=\"a:RetrieveAttributeRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\">\n                <a:Parameters xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>EntityLogicalName</b:key>\n                        <b:value i:type=\"c:string\" xmlns:c=\"http://www.w3.org/2001/XMLSchema\">\n                        ${encodeValue(entityLogicalName)}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>MetadataId</b:key>\n                        <b:value i:type=\"ser:guid\"  xmlns:ser=\"http://schemas.microsoft.com/2003/10/Serialization/\">\n                        ${encodeValue(\"00000000-0000-0000-0000-000000000000\")}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>RetrieveAsIfPublished</b:key>\n                        <b:value i:type=\"c:boolean\" xmlns:c=\"http://www.w3.org/2001/XMLSchema\">\n                        ${encodeValue(retrieveIfPublished.toString())}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                    <a:KeyValuePairOfstringanyType>\n                        <b:key>LogicalName</b:key>\n                        <b:value i:type=\"c:string\"   xmlns:c=\"http://www.w3.org/2001/XMLSchema\">\n                        ${encodeValue(attributeLogicalName)}\n                        </b:value>\n                    </a:KeyValuePairOfstringanyType>\n                </a:Parameters>\n                <a:RequestId i:nil=\"true\" />\n                <a:RequestName>RetrieveAttribute</a:RequestName>\n            </request>\n        `;\n\n        let async: boolean = !!callback;\n\n        return doRequest(request, \"Execute\", async, (resultXml: string) => {\n            let response: any = selectNodes(resultXml, \"//b:value\");\n            let results: Array<any> = [];\n            for (let i: number = 0, ilength: number = response.length; i < ilength; i++) {\n                let a: any = objectifyNode(response[i]);\n                results.push(a);\n            }\n\n            if (!async){\n                return results;\n            } else {\n                callback(results);\n            }\n            // ReSharper disable NotAllPathsReturnValue\n        });\n        // ReSharper restore NotAllPathsReturnValue\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/Soap.ts\n **/"],"sourceRoot":""}